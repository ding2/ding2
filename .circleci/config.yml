version: 2

jobs:
  drush_make:
    docker:
      - image: circleci/php:7.0-cli
    steps:
    - checkout
    - run:
        name: Install Drush
        command: |
          echo 'export PATH=~/.composer/vendor/bin:$PATH'  >> $BASH_ENV
          source $BASH_ENV
          composer global require drush/drush:6.* --prefer-source --no-interaction
    - run:
        name: Download installation profile dependencies using Drush make
        command: drush make ding2.make --no-core --contrib-destination=. -y --concurrency=8
    # Built an entire Drupal site with core, contrib and custom
    # code First we build Drupal core only. Instead of using the
    # profile specified in the make file we use the one we have
    # just build. This way we do not have to update drupal.make
    # for each build.
    - run:
        name: Download Drupal using Drush Make
        command: drush make drupal.make --projects=drupal ~/drupal
    - run:
        name: Assemble Drupal site
        command: |
          mkdir -p ~/drupal/profiles/ding2
          cp -R ./* ~/drupal/profiles/ding2
    - persist_to_workspace:
        root: ~/
        paths:
          - drupal

  gulp:
    docker:
    - image: circleci/node:6.14
    steps:
    - checkout
    - run:
        name: Install theme dependencies
        command: |
          npm rebuild node-sass
          npm install
        working_directory: themes/ddbasic
    - run:
        name: Process theme files
        command: node_modules/.bin/gulp uglify sass
        working_directory: themes/ddbasic
    - run:
        name: Relocate theme files to built site
        command: |
          mkdir -p ~/drupal/profiles/ding2/themes/ddbasic/scripts
          cp -R sass_css ~/drupal/profiles/ding2/themes/ddbasic/
          cp -R scripts/min ~/drupal/profiles/ding2/themes/ddbasic/scripts
        working_directory: themes/ddbasic
    - persist_to_workspace:
        root: ~/
        paths:
          - drupal/profiles/ding2/themes/ddbasic/sass_css
          - drupal/profiles/ding2/themes/ddbasic/scripts/min

  php_lint:
    docker:
    - image: circleci/php:7.0-cli
    steps:
    - checkout
    - run:
        name: Install PHP linter
        command: |
          echo 'export PATH=~/.composer/vendor/bin:$PATH'  >> $BASH_ENV
          source $BASH_ENV
          composer global require jakub-onderka/php-parallel-lint:^1 --no-interaction
    - run:
        name: Lint PHP files
        command: parallel-lint -e php,inc,module,theme,install,profile .

  site_install:
    docker:
    - image: circleci/php:7.0-cli
    - image: circleci/mysql:5.7.20-ram
    working_directory: ~/drupal
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Configure PHP for Drupal
        command: |
          sudo apt-get update
          sudo apt install -y libpng-dev mysql-client
          sudo -E docker-php-ext-install gd pdo_mysql
          sudo chmod 0777 $PHP_INI_DIR/conf.d
          echo "memory_limit = 512M" >> $PHP_INI_DIR/conf.d/docker-php-drupal.ini
          rm -f $PHP_INI_DIR/conf.d/docker-php-ext-xdebug.ini
          php -i
    - run:
        name: Install Drush
        command: |
          echo 'export PATH=~/.composer/vendor/bin:$PATH'  >> $BASH_ENV
          source $BASH_ENV
          composer global require drush/drush:6.* --prefer-source --no-interaction
    - run:
        name: Install Ding2 site
        command: |
          drush site-install ding2 \
          --db-url=mysql://root@127.0.0.1/circle_test -y --debug \
          --site-name=Ding2 --account-name=admin --account-pass=admin \
          install_configure_form.update_status_module='array(FALSE,FALSE)' \
          ding2_module_selection_form.providers_selection=connie \
          opensearch_admin_settings.opensearch_url=https://opensearch.addi.dk/b3.5_5.0/ \
          ting_covers_addi_admin_settings_form.ting_covers_addi_wsdl_url=http://moreinfo.addi.dk/2.11 \
          ting_covers_addi_admin_settings_form.ting_covers_addi_username=username \
          ting_covers_addi_admin_settings_form.ting_covers_addi_group=group \
          ting_covers_addi_admin_settings_form.ting_covers_addi_password=password
    - run:
        name: Dump database for installed site
        command: |
          mkdir ~/db
          drush sql-dump --result-file=~/db/db.sql
    - persist_to_workspace:
        root: ~/
        paths:
        - drupal/sites/default/settings.php
        - db
    - store_artifacts:
        path: ~/db/db.sql

  unit_tests:
    docker:
    - image: circleci/php:7.0-cli
    - image: circleci/mysql:5.7.20-ram
    working_directory: ~/drupal
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Configure PHP for Drupal
        command: |
          sudo apt-get update
          sudo apt install -y libpng-dev mysql-client
          sudo -E docker-php-ext-install gd pdo_mysql
          sudo chmod 0777 $PHP_INI_DIR/conf.d
          echo "memory_limit = 512M" >> $PHP_INI_DIR/conf.d/docker-php-drupal.ini
          rm -f $PHP_INI_DIR/conf.d/docker-php-ext-xdebug.ini
          php -i
    - run:
        name: Install Drush
        command: |
          echo 'export PATH=~/.composer/vendor/bin:$PATH'  >> $BASH_ENV
          source $BASH_ENV
          composer global require drush/drush:6.* --prefer-source --no-interaction
    - run:
        name: Import database
        command: drush sqlq --file=$HOME/db/db.sql
    - run:
        name: Install unit test dependencies
        command: composer install
        working_directory: ~/drupal/profiles/ding2/modules/ding_test
    - run:
        name: Configure site for unit tests
        command: |
          drush en connie ding_test -y
          echo "ini_set('error_reporting', E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED & ~E_WARNING);" | sudo tee --append ~/drupal/sites/default/settings.php
    - run:
        name: Run unit tests
        command: |
          mkdir -p ~/tests/phpunit
          php scripts/run-tests.sh --xml ~/phpunit "Ding! - Ting search unittest"
          php scripts/run-tests.sh --xml ~/phpunit "Opensearch"
          php scripts/run-tests.sh --xml ~/phpunit --class ConnieSearchSearchProviderImplementationTestCase
    - store_test_results:
        path: ~/tests/phpunit

  behat_tests:
    docker:
    - image: circleci/php:7.0-apache
    - image: circleci/mysql:5.7.20-ram
    - image: justinribeiro/chrome-headless:stable
    working_directory: ~/drupal
    parallelism: 3
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Configure PHP for Drupal
        command: |
          sudo apt-get update
          sudo apt install -y libpng-dev mysql-client
          sudo -E docker-php-ext-install gd pdo_mysql
          sudo chmod 0777 $PHP_INI_DIR/conf.d
          echo "memory_limit = 512M" >> $PHP_INI_DIR/conf.d/docker-php-drupal.ini
          rm -f $PHP_INI_DIR/conf.d/docker-php-ext-xdebug.ini
          php -i
    - run:
        name: Configure Apache
        command: |
          sudo rm -rf /var/www/html
          sudo ln -s ~/drupal /var/www/html
          sudo chmod -R 0777 /var/www/html/sites/default
          sudo a2enmod rewrite
          sudo service apache2 restart
    - run:
        name: Install Drush
        command: |
          echo 'export PATH=~/.composer/vendor/bin:$PATH'  >> $BASH_ENV
          source $BASH_ENV
          composer global require drush/drush:6.* --prefer-source --no-interaction
    - run:
        name: Import database
        command: drush sqlq --file=$HOME/db/db.sql
    - run:
        name: Configure site for Behat tests
        command: |
          drush cc all
          drush cgen
          drush en -y connie ting_covers_placeholder
          drush dis -y ting_covers_addi
          drush vset -y ting_agency 100200
          drush vset -y opensearch_url 'https://oss-services.dbc.dk/opensearch/5.0/'
          drush vset -y opensearch_search_profile test
          drush vset -y opensearch_recommendation_url 'http://openadhl.addi.dk/1.1/'
          drush vset -y ting_infomedia_url 'http://useraccessinfomedia.addi.dk/1.3/'
          drush vset -y opensearch_search_autocomplete_suggestion_url 'http://opensuggestion.addi.dk/b3.5_2.0/'
          drush vset -y opensearch_search_autocomplete_method 'facets'
          drush vset -y ting_openlist_prefix test
          drush vset -y ting_openlist_wsdl 'https://test.openlist.ddbcms.dk/?wsdl'
          drush vset -y ting_library_code 100200
          drush vset -y user_consent_activate true
          drush vset -y loan_history_store_title ''
          drush vset -y loan_history_store_title_first_time ''
          drush php-eval 'variable_set("loan_history_store_description_first_time", array("value" => ""));'
          drush php-eval 'variable_set("loan_history_store_description", array("value" => ""));'
          sudo chown -R 33:33 /var/www/html/sites/default/files
    - run:
        name: Install Behat
        command: composer install
        working_directory: ~/drupal/profiles/ding2/tests/behat
    - run:
        name: Run Behat tests
        command: |
          mkdir -p ~/tests/behat/screenshots
          export SCREENSHOT_DIR="/home/circleci/tests/behat/screenshots/"
          export BEHAT_PARAMS='{"extensions" : {"Behat\\MinkExtension" : {"base_url" : "http://localhost/", "sessions" : { "default": { "chrome": { "api_url": "http://localhost:9222" }}}}}}'
          ./bin/behat -p chrome --tags '~no_ci' --tags '~wip'  --list-scenarios \
            | circleci tests split --split-by=timings --timings-type=testname \
            | xargs -n 1 -I % ./bin/behat --format=junit --out=$HOME/tests/behat/% --format=pretty --out=std -p chrome %
        working_directory: ~/drupal/profiles/ding2/tests/behat
    - store_test_results:
        path: ~/tests/behat
    - store_artifacts:
        path: ~/tests/behat

  package:
    docker:
    - image: docker:git
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Package site
        command: |
          mkdir -p ~/build
          tar -zcvf ~/build/ding2-$CIRCLE_SHA1.tar.gz -C ~/drupal .
    - persist_to_workspace:
        root: ~/
        paths:
        - build
    - store_artifacts:
        path: ~/build

  github_release:
    docker:
    - image: cibuilds/github:0.12
    working_directory: ~/build
    steps:
    - checkout:
        path: ~/project
    - attach_workspace:
        at: ~/
    - run:
        name: "Publish release on GitHub"
        command: |
          CIRCLE_TAG="$(cd ~/project && git tag -l --points-at HEAD)"
          if [ -n "${CIRCLE_TAG}" ]
          then
            PRERELEASE=$([[ $CIRCLE_TAG =~ rc ]] && echo "-prerelease" || echo "")
            mv ding2-$CIRCLE_SHA1.tar.gz ding2-$CIRCLE_TAG.tar.gz
            ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n ${CIRCLE_TAG} -delete ${PRERELEASE} ${CIRCLE_TAG} ding2-$CIRCLE_TAG.tar.gz
          else
            echo "No release created. No tag detected for commit."
          fi

  docker_db_image:
    docker:
    - image: docker:stable-git
    working_directory: ~/db
    steps:
    - checkout:
        path: ~/project
    - attach_workspace:
        at: ~/
    - setup_remote_docker
    - run:
        name: Build Docker database image
        command: |
          docker build -t mysql . -f-<<EOF
          FROM mysql:5.7.23
          COPY db.sql /docker-entrypoint-initdb.d/db.sql
          EOF
    - run:
        name: Push image to Docker Hub
        command: |
          if [ -n "${DOCKER_USER}" ] && [ -n "${DOCKER_PASS}" ]
          then
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            CIRCLE_TAG="$(cd ~/project && git tag -l --points-at HEAD)"
            DOCKER_TAG=$([[ $CIRCLE_BRANCH == 'master' ]] && echo 'master' || echo 'latest')
            DOCKER_TAG=$([[ -n "${CIRCLE_TAG}" ]] && echo $CIRCLE_TAG || echo $DOCKER_TAG)
            docker tag mysql $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-mysql:$DOCKER_TAG
            docker push $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-mysql:$DOCKER_TAG
          else
            echo "Not pushing Docker image to Docker Hub. Environment variables DOCKER_USER and/or DOCKER_PASS are not set."
          fi

workflows:
  version: 2
  build-test-package:
    jobs:
    - drush_make
    - gulp
    - php_lint
    - site_install:
        requires:
          - drush_make
          - gulp
          - php_lint
    - unit_tests:
        requires:
          - site_install
    - behat_tests:
        requires:
        - site_install
    - package:
        requires:
          - drush_make
          - gulp
    - github_release:
        requires:
          - package
          - unit_tests
          - behat_tests
        filters:
          branches:
            only:
              - /^release.*/
    - docker_db_image:
        requires:
          - site_install
        filters:
          branches:
            only:
              - master
              - /^release.*/

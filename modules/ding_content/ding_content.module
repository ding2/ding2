<?php

include_once('ding_content.features.inc');

/**
 * @file
 * Various integration with panels to create panel panes and more.
 */

/**
 * Implements hook_menu().
 */
function ding_content_menu() {
  $items = array();

  $items['ding_content/media'] = array(
    'title' => 'Media browser list',
    'description' => 'Ajax Callback for getting media',
    'page callback' => 'ding_content_media_browser_list',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_content.admin.inc',
  );


  return $items;
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function ding_content_media_browser_plugin_info() {
  $plugins = array();

  $plugins['ding_content'] = array(
    '#weight' => 0,
  );

  return $plugins;
}

/**
 * Implements hook_media_browser_plugin_view().
 */
function ding_content_media_browser_plugin_view($plugin_name, $params) {
  $media_path = drupal_get_path('module', 'media');
  $path = drupal_get_path('module', 'ding_content');

  $params += array(
    'types' => array(),
    'multiselect' => FALSE,
  );

  switch ($plugin_name) {
    case 'ding_content':
      return array(
        '#title' => t('Personal library'),
        '#attached' => array(
          'js' => array(
            $media_path . '/js/plugins/media.library.js',
            $path . '/js/ding_content.media.js',
          ),
          'css' => array(
            // @todo: should move this.
            $media_path . '/js/plugins/media.library.css',
            $path . '/css/ding_content.media.css',
          ),
        ),
        '#settings' => array(
          'viewMode' => 'thumbnails',
          'getMediaUrl' => url('ding_content/media'),
        // We should probably change this to load dynamically when requested
        // via the JS file.
        ) + $params,
        '#markup' => '<div id="container"><div id="scrollbox"><ul id="media-browser-library-list" class="media-list-thumbnails"></ul><div id="status"></div></div></div>',
      );
  }

  return array();
}


/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function ding_content_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $path = drupal_get_path('module', 'ding_content');
    $settings['customConfig'] = '/' . $path . '/js/ding_content.editor_config.js';
  }
}

/**
 * Implements hook_form_alter().
 */
function ding_content_form_alter(&$form, &$form_state, $form_id) {
  // Make some modifications for all panel pane configure forms rendered with
  // Panels IPE and Ding IPE filter.
  // See: ctools_content_form() and ctools_content_configure_form_defaults().
  if (strpos($form['#action'], '/panels/ajax/ipe/') !== FALSE && $form_state['modal'] == TRUE) {
    // Ensure override title element is present. Some panel's content types may
    // have 'no title override' in plugin definition causing it to not be
    // present and always use the default title.
    if (!empty($form['override_title'])) {
      // Enforce h2 header tag for the panel title.
      $form['override_title_heading']['#default_value'] = 'h2';
      $form['override_title_heading']['#access'] = FALSE;

      // Simplify and improve title configuration:
      //
      //   1. Remove override title option.
      //   2. Enable title override as default. This will make the title field
      //      appear when the form is renderede initially.
      //   3. Make title field required.
      //   4. Use '%title' as default value to keep current behavior where the
      //      panels default title (if any) is used as default. This also
      //      minimizes the chance that administrators will leave the title
      //      empty making the "Add one more" AJAX button fail silenty because
      //      of required validation error.
      //   5. Insert label above title field.
      //   6. Insert better decsription below title field that only mentions the
      //      %title keyword and recommends updating.
      //
      // The goal is the make it more likely that the administrators sees and
      // updates and title field.
      $conf = $form_state['conf'];
      $form['override_title']['#access'] = FALSE;
      $form['override_title']['#default_value'] = TRUE;
      $form['override_title_text']['#required'] = TRUE;
      $form['override_title_text']['#default_value'] = isset($conf['override_title_text']) ? $conf['override_title_text'] : '%title';
      $form['override_title_text']['#title'] = t('Title');
      $form['override_title_markup']['#markup'] = t("The default value %title uses the panel's default title. For better accesibility it's recommended to change it and use a title more specific to the context.");
    }
  }
}

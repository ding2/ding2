<?php
/**
 * @file
 * Ting search carousel module main file.
 */

define('TING_SEARCH_CAROUSEL_ANIMATE_DELAY', 5);

define('TING_SEARCH_CAROUSEL_MODULE_PATH', drupal_get_path('module', 'ting_search_carousel'));

/**
 * Implements hook_theme().
 */
function ting_search_carousel_theme($existing, $type, $theme, $path) {
  return array(
    'ting_search_carousel' => array(
      'variables' => array(
        'searches' => NULL,
        'index' => NULL,
        'autoplay' => NULL,
      ),
      'template' => 'templates/ting_search_carousel',
      'file' => 'ting_search_carousel.theme.inc',
    ),
    'ting_search_carousel_queries' => array(
      'render element' => 'form',
    ),
    'ting_object_cover_simple' => array(
      'render element' => 'elements',
      'preprocess functions' => array('template_preprocess_ting_object_cover_simple'),
      'attached' => array(
        'js' => array(drupal_get_path('module', 'ting_covers') . '/js/ting-covers.js'),
      ),
      'file' => 'ting_search_carousel.theme.inc',
    ),
  );
}


 /**
 * Implements hook_libraries_info().
 */
function ting_search_carousel_libraries_info() {
  $libraries = array();

  $libraries['slick'] = array(
    'name' => 'Slick.js library',
    'path' => 'slick',
    'vendor url' => 'https://github.com/kenwheeler/slick',
    'download url' => 'https://github.com/kenwheeler/slick/archive/master.zip',
    'version callback' => 'ting_search_carousel_get_version',
    'files' => array(
      'css' => array('slick.css', 'slick-theme.css'),
      'js' => array('slick.min.js'),
    ),
  );

  return $libraries;
}

/**
 * Helper function.
 */
function ting_search_carousel_get_version() {
  return TRUE;
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function ting_search_carousel_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Set database cache base on tab index in the front-end.
 *
 * @param string $hash
 *   Search carousel personal hash.
 * @param int $index
 *   Search carousel tab index.
 * @param mixed $items
 *   Search carousel items, containing id, title, creator and image url.
 */
function _ting_search_carousel_set_cache($hash, $index, $items) {
  $data = array();
  if ($cache = cache_get('ting_search_carousel_result_' . $hash)) {
    $data = $cache->data;
  }
  $data[$hash][$index] = $items;
  cache_set('ting_search_carousel_result_' . $hash, $data, 'cache');
}

/**
 * Implements hook_image_default_styles().
 */
function ting_search_carousel_image_default_styles() {
  return array(
    'ting_search_carousel' => array(
      'name' => 'ting_search_carousel',
      'effects' => array(
        array(
          'label' => 'Scale and crop',
          'effect callback' => 'image_scale_and_crop_effect',
          'dimensions callback' => 'image_scale_dimensions',
          'module' => 'image',
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => '200',
            'height' => '290',
          ),
          'weight' => '1',
        ),
      ),
    ),
  );
}

/**
 * Wrapper function that adds the modules JavaScript.
 */
function _ting_search_carousel_add_javascript() {
  drupal_add_js(TING_SEARCH_CAROUSEL_MODULE_PATH . '/js/ting_search_carousel.js');
}

/**
 * Wrapper function that adds the modules css.
 */
function _ting_search_carousel_add_css() {
  drupal_add_css(TING_SEARCH_CAROUSEL_MODULE_PATH . '/css/ting_search_carousel.css');
  libraries_load('slick');
}

/**
 * Return the pane contents.
 */
function ting_search_carousel_content_type_render($subtype, $conf, $panel_args, $context) {
  $search_results_cache = cache_get($conf['cache_id']);
  $searches = array();
  $searches_configuration = array();

  if ($conf['searches']) {
    $searches = $conf['searches'];
  }
  elseif (variable_get('ting_carousel_search_queries', array())) {
    $searches = variable_get('ting_carousel_search_queries', array());
  }

  if ($conf['ting_search_carousel_settings']) {
    $searches_configuration = $conf['ting_search_carousel_settings'];
  }
  elseif (variable_get('ting_search_carousel_settings', array())) {
    $searches_configuration = variable_get('ting_search_carousel_settings', array());
  }

  if (empty($search_results_cache)) {
    $cache_id = ting_search_carousel_search_queries($searches, $searches_configuration);
    $search_results_cache = cache_get($cache_id);
    $search_results = $search_results_cache->data;
  }
  else {
    $search_results = $search_results_cache->data;
  }

  // Add rendered items to searches configuration.
  foreach ($searches as $search_key => $search) {
    if (!empty($search_results[$search_key])) {
      $searches[$search_key]['search_items'] = $search_results[$search_key];
    }
  }

  $carousel_content = theme('ting_search_carousel',
    array(
      'searches' => $searches,
      'hash' => $conf['cache_id'],
      'autoplay' => $searches_configuration['ting_search_carousel_animate'],
    ));

  $block = new stdClass();
  $block->content = $carousel_content;

  return $block;
}

/**
 * Search queries admin form.
 */
function ting_search_carousel_settings_form($form, &$form_state) {
  $form['#tree'] = TRUE;

  if (!isset($form_state['num_searches'])) {
    $form_state['num_searches'] = $form_state['conf']['searches'] ? count($form_state['conf']['searches']) - 1 : 0;
  }

  $form['ting_search_carousel'] = array(
    '#type' => 'fieldset',
    '#title' => t('Searches'),
    '#description' => t('Leave fields blank if you want to remove query'),
    '#prefix' => '<div id="ting-search-carousel">',
    '#suffix' => '</div>',
    '#theme' => 'ting_search_carousel_queries',
  );

  for ($i = 0; $i <= $form_state['num_searches']; $i++) {
    $search = ($form_state['conf']['searches'][$i]) ? $form_state['conf']['searches'][$i] : array();
    $form['ting_search_carousel']['ting_searches'][$i] = _ting_search_carousel_queries($i, $search);
  }

  $form['add_ting_search'] = array(
    '#type' => 'submit',
    '#value' => t('Add new query'),
    '#submit' => array('_ting_search_carousel_add_query_submit'),
    '#ajax' => array(
      'callback' => '_ting_search_carousel_add_query_ajax',
      'wrapper' => 'ting-search-carousel',
    ),
  );

  // Prepare settings form data.
  $settings = array(
    'ting_search_carousel_settings' => array(
      'ting_search_carousel_tabs_position' => 'bottom',
      'ting_search_carousel_item_limit' => 12,
      'ting_search_carousel_description_toggle' => 0,
      'ting_search_carousel_item_sorting' => '',
      'ting_search_carousel_animate' => TING_SEARCH_CAROUSEL_ANIMATE_DELAY,
    ),
  );

  foreach ($settings['ting_search_carousel_settings'] as $key => &$val) {
    if (isset($form_state['conf']['ting_search_carousel_settings'][$key])) {
      $val = $form_state['conf']['ting_search_carousel_settings'][$key];
    }
  }

  // Ting search carousel settings.
  $form['ting_search_carousel_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Frontend settings'),
  );

  $form['ting_search_carousel_settings']['ting_search_carousel_tabs_position'] = array(
    '#title' => t('Position of navigational tabs'),
    '#type' => 'select',
    '#options' => array(
      'bottom' => t("Bottom"),
    ),
    '#default_value' => $settings['ting_search_carousel_settings']['ting_search_carousel_tabs_position'],
    '#required' => TRUE,
    '#description' => t('Select where you want the tabs for displaying the various searches to be placed in frontend.'),
  );

  $form['ting_search_carousel_settings']['ting_search_carousel_item_limit'] = array(
    '#type' => 'select',
    '#title' => t('Item limit'),
    '#options' => array_combine(range(6, 24, 6), range(6, 24, 6)),
    '#description' => t('The number of items to be returned in search result.'),
    '#default_value' => $settings['ting_search_carousel_settings']['ting_search_carousel_item_limit'],
  );

  $form['ting_search_carousel_settings']['ting_search_carousel_description_toggle'] = array(
    '#title' => t('Show descriptions for navigational tabs'),
    '#type' => 'checkbox',
    '#default_value' => $settings['ting_search_carousel_settings']['ting_search_carousel_description_toggle'],
    '#required' => FALSE,
    '#description' => t('Toggle whether descriptions of the various searches are displayed or not.'),
  );

  $form['ting_search_carousel_settings']['ting_search_carousel_item_sorting'] = array(
    '#type' => 'select',
    '#title' => t('Sorting'),
    '#options' => array(
      '' => t('- None -'),
      'title_ascending' => t('Title (Ascending)'),
      'title_descending' => t('Title (Descending)'),
      'creator_ascending' => t('Creator (Ascending)'),
      'creator_descending' => t('Creator (Descending)'),
      'date_ascending' => t('Date (Ascending)'),
      'date_descending' => t('Date (Descending)'),
      'acquisitionDate_ascending' => t('Acquisition date (Ascending)'),
      'acquisitionDate_descending' => t('Acquisition date (Descending)'),
    ),
    '#default_value' => $settings['ting_search_carousel_settings']['ting_search_carousel_item_sorting'],
    '#description' => t('If not set, defaults to Ranking'),
  );

  $form['ting_search_carousel_settings']['ting_search_carousel_animate'] = array(
    '#type' => 'textfield',
    '#title' => t('Auto-animate delay (seconds)'),
    '#default_value' => $settings['ting_search_carousel_settings']['ting_search_carousel_animate'],
    '#description' => t('Enter "0"  to not animate.'),
    '#element_validate' => array('_ting_search_carousel_element_validate_delay'),
    '#size' => 4,
    '#maxlength' => 3,
  );

  // Custom form submit handler.
  $form['#submit'] = array('ting_search_carousel_search_submit');

  return $form;
}

/**
 * Handler for building part of form.
 *
 * @param int $weight
 *   Weight of the search query form.
 *
 * @param array $query
 *   Array of quires.
 *
 * @return array
 *   Renderable array.
 */
function _ting_search_carousel_queries($weight = 0, $query = array()) {
  return array(
    'sort' => array(
      '#type' => 'weight',
      '#delta' => 5,
      '#default_value' => $weight,
      '#attributes' => array('class' => array('sort')),
    ),
    'title' => array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#description' => t('The title of the search is used for the tab in the carousel. Keep it short.'),
      '#default_value' => isset($query['title']) ? $query['title'] : '',
    ),
    'subtitle' => array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#description' => t('The subtitle displayed next to the search results.'),
      '#default_value' => isset($query['subtitle']) ? $query['subtitle'] : '',
    ),
    'query' => array(
      '#type' => 'textfield',
      '#title' => t('Query'),
      '#maxlength' => 2048,
      '#description' => t('The query to display search results for.'),
      '#default_value' => isset($query['query']) ? $query['query'] : '',
    ),
  );
}

/**
 * Custom form theme function.
 */
function theme_ting_search_carousel_queries($variables) {
  $form = $variables['form'];
  drupal_add_tabledrag('ting-search-carousel-queries', 'order', 'sibling', 'sort');

  $header = array('Searches', '');
  $rows = array();

  foreach (element_children($form['ting_searches']) as $id) {
    $form['ting_searches'][$id]['sort']['#attributes']['class'][] = 'sort';

    $sort = $form['ting_searches'][$id]['sort'];
    unset($form['ting_searches'][$id]['sort']);

    $rows[] = array(
      'data' => array(
        drupal_render($form['ting_searches'][$id]),
        drupal_render($sort),
      ),
      'class' => array('draggable'),
    );
  }

  $output = theme_table(array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'ting-search-carousel-queries'),
  ));

  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Submit function for adding query in form.
 */
function _ting_search_carousel_add_query_submit($form, &$form_state) {
  $form_state['num_searches']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback for adding query in form.
 */
function _ting_search_carousel_add_query_ajax($form, $form_state) {
  return $form['ting_search_carousel'];
}

/**
 * Validate animation delay value.
 *
 * @param array $element
 *   Array that containts element of form.
 * @param array $form_state
 *   Array which contains info about form.
 *
 * @see ting_search_carousel_settings_form()
 */
function _ting_search_carousel_element_validate_delay($element, &$form_state) {
  $delay = $form_state['values']['ting_search_carousel_settings']['ting_search_carousel_animate'];

  if (!is_numeric($delay) && $delay !== 0) {
    form_set_error('ting_search_carousel_animate', t('Animate delay value must be a number.'));
  }
  elseif ($delay < 0) {
    form_set_error('ting_search_carousel_animate', t('Animate delay value must be a positive number.'));
  }
}

/**
 * Submit handler for admin backend queries form.
 */
function ting_search_carousel_search_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Set ting carousel delay.
  $settings_values = $values['ting_search_carousel_settings'];
  $form_state['conf'] = array(
    'ting_search_carousel_settings' => array(
      'ting_search_carousel_tabs_position' => $settings_values['ting_search_carousel_tabs_position'],
      'ting_search_carousel_item_limit' => $settings_values['ting_search_carousel_item_limit'],
      'ting_search_carousel_description_toggle' => $settings_values['ting_search_carousel_description_toggle'],
      'ting_search_carousel_item_sorting' => $settings_values['ting_search_carousel_item_sorting'],
      'ting_search_carousel_animate' => $settings_values['ting_search_carousel_animate'],
    ),
  );

  // Check if some queries was removed.
  $searches = array();
  foreach ($values['ting_search_carousel']['ting_searches'] as $search_key => $ting_search) {
    if (!empty($ting_search['query']) && !empty($ting_search['title'])) {
      $searches[$search_key] = $values['ting_search_carousel']['ting_searches'][$search_key];
    }
  }

  // Reset array index.
  $searches = array_values($searches);
  usort($searches, function($a, $b) {
    if ($a['sort'] == $b['sort']) {
      return 0;
    }
    return ($a['sort'] < $b['sort']) ? -1 : 1;
  });

  $form_state['conf']['searches'] = $searches;

  $form_state['conf']['cache_id'] = ting_search_carousel_search_queries($searches, $settings_values);
}

/**
 * Implements hook_entity_info_alter().
 */
function ting_search_carousel_entity_info_alter(&$entity_info) {
  $entity_info['ting_object']['view modes'] += array(
    'ting_search_carousel' => array(
      'label' => t('Ting search carousel'),
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Return ting objects by search query.
 *
 * @param array $searches
 *   Array of queries for ting search.
 * @param array $search_options
 *   Search options array.
 *
 * @return mixed
 *   Array of ting objects or bool.
 */
function ting_search_carousel_search_queries(array $searches, array $search_options) {
  $hash_string = '';
  $items = array();
  foreach ($searches as $search_key => $search) {
    $hash_string .= trim($search['query']);

    $sort = $search_options['ting_search_carousel_item_sorting'];
    $ting_search_options = array(
      'facets' => array(),
      'enrich' => TRUE,
      'allObjects' => FALSE,
      'sort' => $sort,
    );

    $search_result = ting_do_search($search['query'], 1, 50, $ting_search_options);
    $count_search_results = $search_result->numTotalCollections;

    if ($count_search_results > 0) {
      $collection_ids = array_keys($search_result->collections);
      $cover_exists = ting_search_carousel_check_covers($collection_ids);
      $item_ids = array_keys($cover_exists);

      $objects = ding_entity_load_multiple($item_ids);

      foreach ($objects as $item) {
        $build = ting_object_view($item, 'ting_search_carousel');

        $items[$search_key][$item->localId] = drupal_render($build);
      }
    }
  }

  $cache_id = ting_search_carousel_generate_cache_id($hash_string);

  // Clear carousel search cache.
  cache_clear_all('ting_search_carousel_result', 'cache');

  // Cache rendered items.
  cache_set($cache_id, $items, 'cache');

  return $cache_id;
}

/**
 * Check covers for certain identifiers.
 *
 * This also stores the original images.
 *
 * @param array $ids
 *   Items faust number.
 *
 * @return array
 *   Set of results, keyed by id with boolean values.
 */
function ting_search_carousel_check_covers(array $ids) {
  module_load_include('module', 'ting_covers');

  $covers = ting_covers_get($ids);

  $result = array();
  foreach ($covers as $faust => $cover) {
    $result[$faust] = TRUE;
  }

  return $result;
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param string $keyword
 *   A generic keyword.
 *
 * @return string
 *   Hash string, meaning a certain cache id.
 */
function ting_search_carousel_generate_cache_id($keyword) {
  return 'ting_search_carousel_' . drupal_hash_base64($keyword);
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function ting_search_carousel_field_formatter_info_alter(&$info) {
  $info['ting_cover_simple'] = array(
    'label' => t('Simple cover'),
    'field types' => array('ting_cover'),
    'settings' => array(
      'image_style' => 'medium',
    ),
    'module' => 'ting_search_carousel',
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_search_carousel_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'ting_object_cover_simple',
      '#object' => $entity,
      '#image_style' => $display['settings']['image_style'],
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'ting_covers') . '/js/ting-covers.js'),
      ),
    );
  }

  return $element;
}

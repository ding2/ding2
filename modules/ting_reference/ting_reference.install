<?php
/**
 * @file
 * Defines the field schema and entity fields.
 */

function ting_reference_schema() {
  $schema['ting_reference'] = array(
    'description' => 'Provide ting reference relations.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ting_object_id' => array(
        'description' => 'Ting object id.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'unique keys' => array(
      'uk_nid_tid' => array('nid', 'ting_object_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function ting_reference_field_schema($field) {
  $columns = array();
  switch ($field['type']) {
    case 'ting_reference':
      $columns = array(
        'headline' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'query' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'sorting' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'amount' => array(
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
        ),
      );
      break;
  }

  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_ding_entity_fields().
 */
function ting_reference_ding_entity_fields() {
  return array(
    'ting_reference_reverse' => array(
      'field' => array(
        'locked' => TRUE,
        'storage' => array(
          'type' => 'virtual_field',
        ),
      ),
      'instance' => array(
        'label' => t('Nodes referencing this Ting object.'),
      ),
    ),
  );
}

/**
 * Convert blackhole field storage to virtual field.
 */
function ting_reference_update_7000() {
  return db_update('field_config')
    ->fields(array(
      'storage_type' => 'virtual_field',
      'storage_module' => 'virtual_field',
    ))
    ->condition('module', 'ting_reference')
    ->execute();
}

/**
 * Add ting reference relations table.
 */
function ting_reference_update_7001() {
  $schema['ting_reference'] = array(
    'description' => 'Provide ting reference relations.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ting_object_id' => array(
        'description' => 'Ting object id.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'unique keys' => array(
      'uk_nid_tid' => array('nid', 'ting_object_id'),
    ),
  );

  db_create_table('ting_reference', $schema['ting_reference']);

  // Migrate references(materials) field data.
  _ting_reference_migrate_fields();
}

/**
 * Migrate ting reference materials fields.
 */
function _ting_reference_migrate_fields() {
  // Get content types that have materials field.
  $content_types = field_info_instances('node');
  $node_types = array();
  foreach ($content_types as $content_type => $fields) {
    foreach ($fields as $field) {
      if (strpos($field['field_name'], 'materials') !== FALSE) {
        $node_types[$content_type] = $content_type;
      }
    }
  }
  // Get node ids of the selected types.
  $nids = array();
  foreach ($node_types as $node_type) {
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $node_type)
      ->execute()
      ->fetchCol();
    $nids = array_merge($nids, $result);
  }

  foreach ($nids as $nid) {
    // Get all tids(ting object ids) related to a given node id.
    $query = db_select('field_data_endpoints', 'e1');
    $query->join('field_data_endpoints', 'e2', 'e1.entity_id = e2.entity_id');

    $query->fields('e2', array('endpoints_entity_id'))
      ->condition('e1.endpoints_entity_type', 'node')
      ->condition('e1.endpoints_entity_id', $nid)
      ->condition('e2.endpoints_entity_type', 'ting_object');
    $tids = $query->execute()->fetchCol();

    // Get all ding entity ids related to tids and insert into the ting_reference table.
    if (!empty($tids)) {
      $query = db_insert('ting_reference')->fields(array('nid', 'ting_object_id'));
      foreach ($tids as $tid) {
        $result = db_select('ting_object', 't')
          ->fields('t', array('ding_entity_id'))
          ->condition('tid', $tid)
          ->execute()
          ->fetchCol();

        $query->values(array('nid' => $nid, 'ting_object_id' => $result[0]));
      }
      $query->execute();
    }
  }
}

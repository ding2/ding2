<?php
/**
 * @file
 * Defines the field schema and entity fields.
 */

function ting_reference_schema() {
  $schema['ting_reference'] = array(
    'description' => 'Provide ting reference relations.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'field_name' => array(
        'description' => 'Field machine name',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'ting_object_id' => array(
        'description' => 'Ting object id.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'unique keys' => array(
      'uk_nid_fn_tid' => array('nid', 'field_name', 'ting_object_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function ting_reference_field_schema($field) {
  $columns = array();
  switch ($field['type']) {
    case 'ting_reference':
      $columns = array(
        'headline' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'query' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'sorting' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'amount' => array(
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
        ),
      );
      break;
  }

  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_ding_entity_fields().
 */
function ting_reference_ding_entity_fields() {
  return array(
    'ting_reference_reverse' => array(
      'field' => array(
        'locked' => TRUE,
        'storage' => array(
          'type' => 'virtual_field',
        ),
      ),
      'instance' => array(
        'label' => t('Nodes referencing this Ting object.'),
      ),
    ),
  );
}

/**
 * Convert blackhole field storage to virtual field.
 */
function ting_reference_update_7000() {
  return db_update('field_config')
    ->fields(array(
      'storage_type' => 'virtual_field',
      'storage_module' => 'virtual_field',
    ))
    ->condition('module', 'ting_reference')
    ->execute();
}

/**
 * Add ting reference relations table & migrate ting reference fields.
 */
function ting_reference_update_7001() {
  $schema = drupal_get_schema('ting_reference', TRUE);
  db_create_table('ting_reference', $schema);

  // Migrate references(materials) field data and delete old field.
  _ting_reference_migrate_fields();
}

/**
 * Migrate ting reference materials fields.
 */
function _ting_reference_migrate_fields() {
  $fields = field_read_fields(array('type' => 'ting_reference'));
  foreach ($fields as $field) {
    // Get node ids for migration.
    $field_info = field_info_field($field['field_name']);
    $bundles = reset($field_info['bundles']);
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $bundles[0]);
    $result = $query->execute();
    $nids = (!empty($result)) ? array_keys($result['node']) : array();

    foreach ($nids as $nid) {
      if (strpos($field['field_name'], 'materials') !== FALSE) {
        // Move ting object id to the ting_reference table.
        _ting_reference_migrate_tids($nid);
      }
      else {
        // Update newly created ting_reference field.
        _ting_reference_update_fields($bundles[0], $field['field_name'], $nid);
      }
    }
    // Delete materials old field.
    if (strpos($field['field_name'], 'materials') !== FALSE) {
      field_delete_field($field['field_name']);
    }
  }
}

/**
 * Attach field update function on the newly created field.
 *
 * @param $type string
 *   Content type.
 * @param $field_name string
 *   Field machine name.
 * @param $nid int
 *   Node id.
 */
function _ting_reference_update_fields($type, $field_name, $nid) {
  $node = new stdClass();
  $node->type = $type;
  $node->nid = $nid;
  $node->{$field_name}[LANGUAGE_NONE][0] = array(
    'headline' => '',
    'query' => '',
    'sorting' => '',
    'amount' => 0,
  );

  field_attach_update('node', $node);
}

/**
 * Migrate ting object ids from ding entity id to the ting_reference table.
 *
 * @param $nid int
 *   Node id.
 */
function _ting_reference_migrate_tids($nid) {
  // Get all tids(ting object ids) related to a given node id.
  $query = db_select('field_data_endpoints', 'e1');
  $query->join('field_data_endpoints', 'e2', 'e1.entity_id = e2.entity_id');

  $query->fields('e2', array('endpoints_entity_id'))
    ->condition('e1.endpoints_entity_type', 'node')
    ->condition('e1.endpoints_entity_id', $nid)
    ->condition('e2.endpoints_entity_type', 'ting_object');
  $tids = $query->execute();

  // Get all ding entity ids related to tids and insert into the ting_reference table.
  $query = db_insert('ting_reference')->fields(array('nid', 'ting_object_id'));
  foreach ($tids as $tid) {
    $result = db_select('ting_object', 't')
      ->fields('t', array('ding_entity_id'))
      ->condition('tid', $tid->endpoints_entity_id)
      ->execute()
      ->fetchField();

    if ($result) {
      $query->values(array('nid' => $nid, 'ting_object_id' => $result));
    }
  }
  $query->execute();
}

/**
 * Add field name column.
 */
function ting_reference_update_7002() {
  $table_name = 'ting_reference';
  db_add_field($table_name, 'field_name', array(
    'description' => 'Field machine name',
    'type' => 'varchar',
    'length' => '255',
    'not null' => TRUE,
    'default' => '',
  ));

  // Drop previous unique key.
  db_drop_unique_key($table_name, 'uk_nid_tid');

  // Add new unique key.
  db_add_unique_key($table_name, 'uk_nid_fn_tid', array('nid', 'field_name', 'ting_object_id'));
}

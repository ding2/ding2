<?php
/**
 * @file
 * Code for the Ting object reference feature.
 */

module_load_include('inc', 'ting_reference', 'ting_reference.search');

/**
 * Implements hook_menu().
 */
function ting_reference_menu() {
  $items = array();

  // Callback for the advanced widget to do auto-completion.
  $items['ting_reference/autocomplete/object/js'] = array(
    'page callback' => '_ting_reference_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_entity_info_alter().
 *
 * Add new view mode used mainly to display the ting references on node edit
 * pages.
 */
function ting_reference_entity_info_alter(&$entity_info) {
  // Test that the function exists as it may not during installation, but as
  // cache is cleared later on this is not a problem.
  if (function_exists('ding_entity_info')) {
    $ding_entity_info = ding_entity_info('ding_entity');
    // Entity might not be defined yet (is the case in the installer).
    if (isset($entity_info[$ding_entity_info['entity_type']]['view modes'])) {
      // Add a user_list display mode for add-on modules to use.
      $entity_info[$ding_entity_info['entity_type']]['view modes'] += array(
        'ting_reference_preview' => array(
          'label' => t('Reference preview'),
          'custom settings' => TRUE,
        ),
      );
    }
  }
}

/**
 * Implements hook_preprocess_ting_object().
 */
function ting_reference_preprocess_ting_object(&$variables) {
  if (isset($variables['content']['ting_reference_reverse'])) {
    $variables['content']['ting_reference_reverse']['#prefix'] = '<a name="ting_reference"></a>';
  }
}

/**
 * Implements hook_field_info().
 */
function ting_reference_field_info() {
  return array(
    'ting_reference' => array(
      'label' => t('Ting reference'),
      'description' => t('Stores relationships between Ting objects and Drupal entities.'),
      'settings' => array(),
      'default_widget' => 'ting_reference_simple',
      'default_formatter' => 'ting_reference_default',
    ),
    'ting_reference_reverse' => array(
      'label' => t('Ting references'),
      'description' => t('Nodes referencing this Ting object.'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_reference_reverse_default',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function ting_reference_field_is_empty($item, $field) {
  $empty = TRUE;
  if (!empty($item['materials'][0]['ting_object_id']) || !empty($item['search']['query'])) {
    $empty = FALSE;
  }

  return $empty;
}

/**
 * Implements hook_field_insert().
 */
function ting_reference_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Get the entity's id.
  $entity_ids = entity_extract_ids($entity_type, $entity);
  $entity_id = array_shift($entity_ids);

  $settings = reset($items);
  if (!empty($settings['materials']['add']) && is_array( $settings['materials'])) {
    unset($settings['materials']['add']);

    // Save ting materials to ting_reference table.
    ting_reference_set_relation($entity_id, $field['field_name'], $settings['materials']);
  }


  $items = array(
    array(
      'headline' => $settings['headline'],
      'query' => $settings['search']['query'],
      'sorting' => $settings['search']['sorting'],
      'amount' => (int) $settings['search']['amount'],
    ),
  );
}


/**
 * Implements hook_field_update().
 */
function ting_reference_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Get the entity's id.
  $entity_ids = entity_extract_ids($entity_type, $entity);
  $entity_id = array_shift($entity_ids);

  $settings = reset($items);
  if (!empty($settings['materials']) && is_array($settings['materials']) && $entity_id) {
    unset($settings['materials']['add']);

    // Save ting materials to ting_reference table.
    ting_reference_set_relation($entity_id, $field['field_name'], $settings['materials']);

    $result = ting_reference_get_search_references($field, $entity_id);
    $clear_cache = FALSE;
    if (!empty($settings['search'])) {
      foreach ($settings['search'] as $key => $value) {
        if ($value != $result[$field['field_name'] . '_' . $key]) {
          $clear_cache = TRUE;
          break;
        }
      }
    }

    // Clear cache if some search fields are changed.
    if ($clear_cache) {
      $cid = ting_reference_generate_cache_id($result);
      cache_clear_all($cid, 'cache');
    }

    // Presave fields settings on node update.
    $items = array(
      array(
        'headline' => (!empty($settings['headline'])) ? $settings['headline'] : '',
        'query' => (!empty($settings['search'])) ? $settings['search']['query'] : '',
        'sorting' => (!empty($settings['search'])) ? $settings['search']['sorting'] : '',
        'amount' => (!empty($settings['search'])) ? (int) $settings['search']['amount'] : 0,
      ),
    );
  }
}

/**
 * Implements hook_field_delete().
 */
function ting_reference_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Get the entity's id.
  $entity_ids = entity_extract_ids($entity_type, $entity);
  $entity_id = array_shift($entity_ids);

  // When saving empty array to ting reference table it will remove all records.
  ting_reference_set_relation($entity_id, $field['field_name'], array());
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_reference_field_formatter_info() {
  return array(
    'ting_reference_default' => array(
      'label' => t('Default'),
      'description' => t('Displays the referenced Ting object with a specific display mode.'),
      'field types' => array('ting_reference'),
      'settings' => array(
        'view_mode' => 'teaser',
      ),
    ),
    'ting_reference_reverse_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ting_reference_reverse',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ting_reference_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state) {
  $display = $instance['display'][$view_mode];
  $element = array();
  switch ($display['type']) {
    case 'ting_reference_default':
      $entity_info = entity_get_info('ting_object');
      $view_modes = array();
      foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
        $view_modes[$view_mode] = $view_mode_info['label'];
      }

      $element['view_mode'] = array(
        '#title' => t('View mode'),
        '#type' => 'select',
        '#default_value' => $display['settings']['view_mode'],
        '#options' => $view_modes,
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ting_reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];

  $summary = '';
  switch ($display['type']) {
    case 'ting_reference_default':
      $view_mode =  $display['settings']['view_mode'];
      $entity_info = entity_get_info('ting_object');
      if (isset($entity_info['view modes'][$view_mode])) {
        $view_mode = $entity_info['view modes'][$view_mode]['label'];
      }

      $summary .= t('View mode @view_mode', array('@view_mode' => $view_mode));
      break;
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  $settings = reset($items);
  $entity_info = entity_get_info($entity_type);
  $entity_id = $entity->{$entity_info['entity keys']['id']};
  $entity_ids = ting_reference_get_relation($entity_id, $field['field_name']);

  switch ($display['type']) {
    case 'ting_reference_default':
      $output = (!empty($settings['headline'])) ? '<h3>' . t($settings['headline']) . '</h3>' : '';

      // Load the ting objects found.
      $objects = array();
      if (!empty($entity_ids)) {
        $objects += entity_load('ting_object', array(), array('ding_entity_id' => $entity_ids));
      }
      $objects += ting_reference_get_objects($settings['query'],  $settings['amount'], $settings['sorting']);

      $output .= ting_reference_markup_content($display['settings']['view_mode'], $objects);
      $element[]['#markup'] = $output;
      break;

    case 'ting_reference_reverse_default':
      // Extract the IDs for the entities we need to load.
      // @TODO: make view mode configurable.
      // Load the entity and build it.
      $entities = array();
      if (!empty($entity_ids)) {
        $entities = entity_load('ting_object', array(), array('ding_entity_id' => $entity_ids));
      }
      $build = entity_view($entity_type, $entities, 'search_result');

      // Don't show links. Should be an option.
      unset($build['links']);
      $element[] = $build;
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function ting_reference_field_widget_info() {
  return array(
    'ting_reference_simple' => array(
      'label' => t('Ting reference (simple)'),
      'field types' => array('ting_reference'),
      'behaviors' => array(
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'ting_reference_advanced' => array(
      'label' => t('Ting reference (advanced)'),
      'field types' => array('ting_reference'),
    ),
  );
}

/**
 * Implements hook_widget_info_alter().
 */
function ting_reference_widget_info_alter(&$info) {
  if (isset($info['hidden'])) {
    $info['hidden']['field types'][] = 'ting_reference_reverse';
  }
}

/**
 * Implements hook_field_widget_form().
 */
function ting_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Try to find the relation, if one exists for the current delta.
  $ting_object_ids = array();
  $ding_entities = array();

  $entity = $element['#entity'];
  if (!empty($entity->nid)) {
    $ting_object_ids = ting_reference_get_relation($entity->nid, $field['field_name']);
  }

  // Hidden field used to get the drupal entity id (tid) for a ting_object_id.
  $element['tid'] = array(
    '#type' => 'hidden',
    '#element_validate' => array('ting_reference_object_id_validate'),
    '#default_value' => $ting_object_ids,
  );
  $element['title'] = array(
    '#markup' => '<h3>' . $element['#title'] . '</h3>',
  );
  switch ($instance['widget']['type']) {
    case 'ting_reference_simple':
      $element['ting_object_id'] = array(
        '#type' => 'textfield',
        '#description' => t('Enter object ID, FAUST or ISBN number, to select an object from the Ting datawell.'),
        '#default_value' => current($ting_object_ids),
      );
      break;

    case 'ting_reference_advanced':
      $element['headline'] = array(
        '#type' => 'textfield',
        '#title' => t('Headline'),
        '#description' => t('Enter headline of the ting reference search.'),
        '#default_value' => (!empty($items[0]['headline'])) ? $items[0]['headline'] : '',
      );

      $element['materials'] = array(
        '#type' => 'fieldset',
        '#title' => t('Materials'),
        '#prefix' => '<div id="ting-materials-' . $field['field_name'] . '-wrapper">',
        '#suffix' => '</div>',
      );

      if (empty($form_state[$field['field_name']]['materials_count'])) {
        $form_state[$field['field_name']]['materials_count'] = count($ting_object_ids) + 1;
      }
      if (!empty($ting_object_ids)) {
        $ding_entities = entity_load('ting_object', FALSE, array('ding_entity_id' => $ting_object_ids));
      }
      for ($i = 0; $i < $form_state[$field['field_name']]['materials_count']; $i++) {
        $element['materials'][$i]['ting_object_id'] = array(
          '#type' => 'textfield',
          '#title' => t('Search'),
          '#autocomplete_path' => 'ting_reference/autocomplete/object/js',
          '#description' => t('Enter a query to search for objects or collections to reference'),
          '#default_value' => (!empty($ting_object_ids[$i])) ? $ting_object_ids[$i] : '',
        );
      }

      $element['materials']['add'] = array(
        '#type' => 'submit',
        '#value' => t('Add'),
        '#name' => $field['field_name'] . '_ting_object_id_add_btn',
        '#related_field' => $field['field_name'],
        '#limit_validation_errors' => array(),
        '#ajax' => array(
          'wrapper' => 'ting-materials-' . $field['field_name'] . '-wrapper',
          'callback' => 'ting_object_id_add_ajax_handler',
        ),
        '#submit' => array('ting_reference_object_id_add_submit'),
      );

      foreach ($ding_entities as $ding_entity) {
        // Load the entity and build it in preview view mode.
        $build = ting_object_view($ding_entity, 'ting_reference_preview', $langcode);

        // Add the build to the form with some css.
        $element['preview'][] = $build;
      }

      $element['search'] = array(
        '#type' => 'fieldset',
        '#title' => t('Search materials'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $element['search']['query'] = array(
        '#type' => 'textfield',
        '#title' => t('Search query'),
        '#description' => t('Enter CQL search query.'),
        '#default_value' => (!empty($items[0]['query'])) ? $items[0]['query'] : '',
      );
      $element['search']['sorting'] = array(
        '#type' => 'select',
        '#title' => t('Sorting'),
        '#options' => ting_search_sort_options(),
        '#default_value' => (!empty($items[0]['sorting'])) ? $items[0]['sorting'] : '',
      );
      $element['search']['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Amount of results'),
        '#description' => t('Enter amount of results to be displayed on the node page.'),
        '#default_value' => (!empty($items[0]['amount'])) ? $items[0]['amount'] : '',
        '#size' => 10,
        '#maxlength' => 10,
      );
      $element['#attached']['css'] = array(
        drupal_get_path('module', 'ting_reference') . '/css/ting_reference.css',
      );
      break;
  }

  return $element;
}

/**
 * Validate the object ID form element.
 */
function ting_reference_object_id_validate($element, &$form_state, $form) {
  // Get the value entered in ting_object_id (the visible element).
  $parents = $element['#parents'];
  end($parents);
  $lastKey = key($parents);
  $parents[$lastKey] = 'materials';

  $materials = drupal_array_get_nested_value($form_state['values'], $parents);

  // Don't bother validating empty fields.
  if (!empty($materials)) {
    module_load_include('client.inc', 'ting');
    foreach ($materials as $material) {
      if (!empty($material['ting_object_id'])) {
        // If the colon was URL-encoded, decode it - and trim whitespace from
        // both ends of the input string.
        $ting_object_id = trim(str_replace('%3A', ':', $material['ting_object_id']));

        // Load the object to validate if exists.
        // Loading it should make it available for use with ting_get_object().
        // Using on the validation step will make sure that ting object is available.
        $ting_entity = ting_object_load($ting_object_id);

        if ($ting_entity) {
          // Set the form values needed.
          form_set_value($element, $ting_entity->tid, $form_state);
        }
        else {
          form_set_error(implode('][', $parents), t('Object “%identifier” could not be found.', array('%identifier' => $ting_object_id)));
        }
      }
    }
  }
}

/**
 * Implements hook_ding_anchor_info().
 */
function ting_reference_ding_anchor_info() {
  return array('ting_reference' => t('On this site'));
}

/**
 * Auto-complete callback function that searches the data well for objects.
 *
 * The search is based on the string entered in the UI or the SQL expression.
 *
 * @param string $string
 *   The sting to search for or the SQL expression.
 */
function _ting_reference_autocomplete($string) {
  $matches = array();

  // Load ting client.
  module_load_include('client.inc', 'ting');

  // Only use auto-complete if more that 3 chars have been written.
  if ($string && (drupal_strlen($string) > 3)) {
    // Try to build the best search query based on the inputted string.
    if (preg_match('/(^\d+$)|(^\d+:\d+$)|(=)/', $string)) {
      // The query is either ISBN, tid or CQL search expression.
      $query = $string;
    }
    else {
      // Add wildcard to the search string.
      $query  = _ting_search_quote($string) . '*';
    }

    // Search the data well.
    $result = ting_do_search($query, 1, 10, array('facets' => array(), 'allObjects' => FALSE));

    // If there is no usable result, exit immediately, providing no reply.
    if ($result && $result->numTotalObjects) {
      foreach ($result->collections as $collection) {
        $object = array_shift($collection->reply->objects);
        $matches[$collection->id] = t('!title (!type, !year, !id)', array(
          '!title' => isset($object->record['dc:title'][''][0]) ? $object->record['dc:title'][''][0] : '',
          '!type' => isset($object->record['dc:type']['dkdcplus:BibDK-Type'][0]) ? $object->record['dc:type']['dkdcplus:BibDK-Type'][0] : '',
          '!year' => $object->record['dc:date'][''][0],
          '!id' => $object->localId,
        ));
      }
    }
    else {
      $matches[$string] = t('No matches found');
    }
  }

  // Return the result as JSON.
    drupal_json_output($matches);
}

/**
 * Ajax handler for add more material items button.
 */
function ting_object_id_add_ajax_handler($form, &$form_state) {
  $element = $form_state['triggering_element'];
  $parents = $element['#parents'];
  array_pop($parents);

  return drupal_array_get_nested_value($form, $parents);
}

/**
 * Submit handler for add new material item.
 */
function ting_reference_object_id_add_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $field = $form_state['clicked_button']['#related_field'];
  $form_state[$field]['materials_count']++;
}

<?php

/**
 * @file
 * Represents hook definitions and common functions.
 */

require_once 'ding_event_subscriptions.pages.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_event_subscriptions_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu().
 */
function ding_event_subscriptions_menu() {
  $items = array();

  $items['ding-event-subscriptions/download-ics'] = array(
    'page callback' => 'ding_event_subscriptions_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_event_subscriptions_theme($existing, $type, $theme, $path) {
  return array(
    'ding_event_subscriptions_ics' => array(
      'variables' => array('events' => NULL),
    ),
  );
}

/**
 * Helper function for generating url with params depending on current path.
 *
 * @return bool|string
 *   Generated url or FALSE on failing.
 */
function ding_event_subscriptions_generate_url() {
  $menu = menu_get_item();
  if (!empty($menu)) {
    $maps = $menu['map'];
    $conditions = array();
    switch ($maps[0]) {
      case 'node':
        $node = $maps[1];
        switch ($node->type) {
          case 'ding_library':
            $conditions['library'] = $node->nid;
            break;

          case 'ding_event':
            $conditions['event'] = $node->nid;
            break;
        }
        break;

      case 'bibliotek':
        $context = $maps[1];
        $conditions['library'] = $context->argument;
        if (!empty($maps[3])) {
          $conditions['category'] = $maps[3];
        }
        break;

      case 'taxonomy':
        $term = $maps[2];
        $conditions['category'] = $term->tid;
        break;
    }

    return url('ding-event-subscriptions/download-ics', array(
      'query' => $conditions,
    ));
  }
  return FALSE;
}

/**
 * Helper function for getting events by conditions.
 *
 * @param array $conditions
 *   Array with conditions for getting events.
 *
 * @return array
 *   Array of event nodes.
 */
function ding_event_subscriptions_get_events(array $conditions = array()) {
  $events = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'ding_event')
    ->propertyCondition('status', NODE_PUBLISHED);

  if (!empty($conditions['event'])) {
    $query->propertyCondition('nid', $conditions['event']);
  }

  if (!empty($conditions['category'])) {
    $query->fieldCondition('field_ding_event_category', 'tid', $conditions['category'], '=');
  }

  if (!empty($conditions['library'])) {
    $query->fieldCondition('og_group_ref', 'target_id ', $conditions['library'], '=');
  }

  $query->addTag('ding_event_subscriptions');

  $result = $query->execute();
  if (isset($result['node'])) {
    foreach ($result['node'] as $data) {
      $events[$data->nid] = node_load($data->nid);
    }
  }

  return $events;
}

/**
 * Theme function for generating ics file based on list of events.
 *
 * @param array $variables
 *   Array with accessible variables.
 *
 * @return string
 *   Generated list of events in ICS format.
 */
function theme_ding_event_subscriptions_ics(&$variables) {
  $output = '';
  $events = $variables['events'];
  $output .= ding_event_subscriptions_line('BEGIN', 'VCALENDAR', FALSE);
  $output .= ding_event_subscriptions_line('PRODID', '-//EasySuite//DK', FALSE);
  $output .= ding_event_subscriptions_line('VERSION', '2.0', FALSE);
  $output .= ding_event_subscriptions_line('CALSCALE', 'GREGORIAN', FALSE);
  foreach ($events as $event) {
    // Body/description processing.
    $body = field_get_items('node', $event, 'field_ding_event_body');
    $body = trim(render(field_view_value('node', $event, 'field_ding_event_body', $body[0])));
    $teaser = field_get_items('node', $event, 'field_ding_event_lead');
    $teaser = trim(render(field_view_value('node', $event, 'field_ding_event_lead', $teaser[0])));
    $body = drupal_html_to_text("{$teaser} {$body}");

    // Price processing.
    $price = field_get_items('node', $event, 'field_ding_event_price');
    $price = !empty($price[0]['value']) ? $price[0]['value'] : '';

    // Dates processing.
    $date = field_get_items('node', $event, 'field_ding_event_date');
    $start = new DateTime($date[0]['value']);
    $end = new DateTime($date[0]['value2']);
    $now = new DateTime();

    // Location processing.
    $location = field_get_items('node', $event, 'field_ding_event_location');
    $location = implode(',', array_filter($location[0]));

    // UID processing.
    $uid = uniqid();

    // URL processing.
    $url = url("node/{$event->nid}", array(
      'absolute' => TRUE,
    ));

    $output .= ding_event_subscriptions_line('BEGIN', 'VEVENT', FALSE);
    $output .= ding_event_subscriptions_line('UID', $uid, FALSE);
    $output .= ding_event_subscriptions_line('SUMMARY', $event->title);
    $output .= ding_event_subscriptions_line('DESCRIPTION', $teaser . $body);
    $output .= ding_event_subscriptions_line('URL;VALUE=URI', $url);
    $output .= ding_event_subscriptions_line('PRICE', $price);
    $output .= ding_event_subscriptions_line('DTSTART', $start->format('Ymd\THis'), FALSE);
    $output .= ding_event_subscriptions_line('DTEND', $end->format('Ymd\THis'), FALSE);
    $output .= ding_event_subscriptions_line('DTSTAMP', $now->format('Ymd\THis'), FALSE);
    $output .= ding_event_subscriptions_line('LOCATION', $location);
    $output .= ding_event_subscriptions_line('END', 'VEVENT');
    $output .= ding_event_subscriptions_line('END', 'VCALENDAR');
  }

  return $output;
}

/**
 * Helper function for generating line of ICF file.
 *
 * @param string $name
 *   Name of param.
 * @param string $value
 *   Value of param.
 * @param bool $escape
 *   Indicates should value be escaped or not.
 *
 * @return string
 *   Formatted line of file.
 */
function ding_event_subscriptions_line($name, $value, $escape = TRUE) {
  $name = drupal_strtoupper($name);
  if ($escape) {
    $value = ding_event_subscriptions_escape($value);
  }
  return "{$name}:{$value}\n";
}

/**
 * Helper function for escaping values of ICS file.
 *
 * @param string $data
 *   Represent data which should be escaped.
 *
 * @return mixed
 *   Escaped string or false.
 */
function ding_event_subscriptions_escape($data) {
  return preg_replace('/([\,;])/', '\\\$1', $data);
}

/**
 * Implements hook_query_TAG_alter().
 */
function ding_event_subscriptions_query_ding_event_subscriptions_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_ding_event_date', 'f', 'node.nid = f.entity_id');
  $query->where(':time >= f.field_ding_event_date_value2', array(':time' => date('Y-m-d H:i:s')));
}

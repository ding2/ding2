<?php
/**
 * @file
 * Enables integration with Ting.
 */

use Drupal\xautoload\Adapter\LocalDirectoryAdapter;
use Ting\Search\DingProviderStrategy;
use Ting\Search\TingSearchRequest;
use Ting\TingObjectInterface;

// Load Field module hooks.
module_load_include('inc', 'ting', 'ting.field');

/**
 * Implements hook_ctools_plugin_api().
 */
function ting_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Lets the system know where our task and task_handler plugins are.
 */
function ting_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Informs the plugin system that Page Manager owns task, task_handler, and
 * page_wizard plugin types.
 *
 * All of these are empty because the defaults all work.
 */
function ting_ctools_plugin_type() {
  return array(
    'tasks' => array(),
    'content_types' => array(),
    'task_handlers' => array(),
    'page_wizards' => array(),
    'arguments' => array(),
    'contexts' => array(),
  );
}

/**
 * Implements hook_menu().
 */
function ting_menu() {

  $items['ting/object/%ting_object'] = array(
    'title callback' => 'ting_page_title',
    'title arguments' => array(2),
    'page callback' => 'ting_object_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['ting/collection/%ting_collection'] = array(
    'title callback' => 'ting_page_title',
    'title arguments' => array(2),
    'page callback' => 'ting_collection_page_view',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['admin/config/ting'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'position' => 'left',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/ting/settings'] = array(
    'title' => 'Ting',
    'description' => 'Manage Ting integration settings.',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_ting_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/ting/settings/general'] = array(
    'title' => t('General settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/ting/online_types'] = array(
    'title' => 'Online types and URL labels',
    'description' => 'Define online resource types and their corresponding URL labels.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_online_types_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
  );

  $items['admin/config/ting/reservable'] = array(
    'title' => 'Reservable Ting objects',
    'description' => 'Configure on which Ting objects there will be a reservation button.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_reservable_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
  );

  $items['admin/config/ting/language'] = array(
    'title' => 'Language',
    'description' => 'Configure how languages affect Ting objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_language_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ting.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Adjusts the menu so that the field subtab becomes the default local task,
 * to avoid having an useless placeholder page.
 */
function ting_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    if (isset($items['admin/structure/ting_object/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/ting_object'] = $items['admin/structure/ting_object/fields'];
      $item = &$items['admin/structure/ting_object'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Ting objects';
      $item['description'] = 'Manage Ting object display.';

      $items['admin/structure/ting_object/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
    if (isset($items['admin/structure/ting_collection/fields'])) {
      // Make the fields task the default local task.
      $items['admin/structure/ting_collection'] = $items['admin/structure/ting_collection/fields'];
      $item = &$items['admin/structure/ting_collection'];
      $item['type'] = MENU_NORMAL_ITEM;
      $item['title'] = 'Ting collection';
      $item['description'] = 'Manage Ting collection display.';

      $items['admin/structure/ting_collection/fields'] = array(
        'title' => 'Manage fields',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function ting_permission() {
  return array(
    'administer ting settings' => array(
      'title' => t('Administer ting settings'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function ting_block_info() {
  return array(
    'ting_collection_types' => array(
      'info' => t('Ting collection material types'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'ting_object_types' => array(
      'info' => t('Ting alternative material types'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'ting_relation_anchors' => array(
      'info' => t('Ting relations for material '),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Ensures that all expired entries are delete form the cache on cron runes.
 * TODO BBS-SAL: move/copy to opensearch as cache_opensearch
 * (depending on whether we keep cache_ting)
 */
function ting_cron() {
  cache_clear_all(NULL, 'cache_ting');
}

/**
 * Implements hook_flush_caches().
 *
 * TODO BBS-SAL: move/copy to opensearch as cache_opensearch
 * (depending on whether we keep cache_ting)
 */
function ting_flush_caches() {
  return array('cache_ting');
}

/**
 * Get relations for an ting_entity as an array ([$type] => array($relations)).
 */
function ting_get_relations($ting_entity) {
  $relations = array();
  // TODO BBS-SAL: use search:supported_relations provider function to filter
  // the relations to avoid referencing opensearch types directly.
  foreach ($ting_entity->relations as $relation) {
    if ($relation->type == 'dbcaddi:hasOpenUrl' || $relation->type == 'dbcaddi:hasOnlineAccess') {
      continue;
    }
    $relations[$relation->type][] = $relation;
  }

  // Get references from ting_reference.
  if (module_exists('ting_reference')) {
    $refs = module_invoke('ting_reference', 'get_relations', 'ting_object', $ting_entity);
    if (!empty($refs)) {
      foreach ($refs as $ref) {
        $relations[$ref->relation_type][] = $ref;
      }
    }
  }
  return $relations;
}

/**
 * Implements hook_block_view().
 */
function ting_block_view($delta = '') {
  $block = new stdClass();

  switch ($delta) {
    // Render a block with links to related materials including a count of how
    // many instances of each type is available.
    case 'ting_relation_anchors':
      $items = array();
      if ($object = menu_get_object('ting_object', 2)) {
        $relations = ting_get_relations($object);
        if (!empty($relations)) {
          $relation_types = module_invoke_all('ding_anchor_info');
          $block->subject = t('About the material');

          foreach ($relations as $key => $relation) {
            if (isset($relation_types[$key])) {
              $items[] = l($relation_types[$key] . ' (' . count($relation) . ') ', '#' . $key, array('external' => TRUE));
            }
          }
          $block->content = array(
            '#theme' => 'item_list',
            '#items' => $items,
          );
        }
      }
      break;

    case 'ting_collection_types':
      if ($collection = menu_get_object('ting_collection', 2)) {
        $block->subject = t('Other materialtypes');
        $items = array();
        foreach ($collection->types as $k => $type) {
          if ($collection->types_count[$type] == 1) {
            $items[] = l($type . ' (' . $collection->types_count[$type] . ')', 'ting/object/' . $collection->getEntities()[$k]->ding_entity_id);
          }
          else {
            $items[] = l($type . ' (' . $collection->types_count[$type] . ')', '#' . $type, array('external' => TRUE));
          }
        }

        $block->content = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );
      }
      break;

    case 'ting_object_types':
      $object = menu_get_object('ting_object', 2);
      if ($object && $collection = ting_collection_load($object->id)) {
        $items = array();

        foreach ($collection->getEntities() as $entity) {
          $item = ting_object_view($entity, 'teaser');
          $items[] = render($item);
        }

        // Only display block if there are more than one item.
        if (count($items) > 1) {
          $block->subject = t('Other materialtypes');
          $block->content = array(
            '#theme' => 'item_list',
            '#items' => $items,
          );

          // Add search overlay trigger.
          drupal_add_js(drupal_get_path('module', 'ting') . '/js/ting.js');
        }
      }
      break;
  }

  return $block;
}


/**
 * Implements hook_theme().
 */
function ting_theme() {
  return array(
    'ting_object' => array(
      'template' => 'ting_object',
      'render element' => 'elements',
      'file' => 'ting.theme.inc',
    ),
  );
}

/**
 * Implements hook_ding_devel_timers().
 */
function ting_ding_devel_timers() {
  return array(
    'ting' => array(
      'title' => 'Ting total request time was @time ms.',
    ),
    'ting_net' => array(
      'title' => 'Ting net time was @time ms.',
      'include in total' => FALSE,
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function ting_entity_info() {
  $return = array(
    'ting_object' => array(
      'label' => t('Ting object'),
      'controller class' => 'TingObjectController',
      'base table' => 'ting_object',
      'revision table' => 'ting_object_revision',
      'uri callback' => 'ting_object_uri',
      'ding_entity_type' => 'ding_entity',
      'ding_entity_menu' => 'ting/object/%ting_object',
      'ding_entity_index' => 2,
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'revision' => 'vid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),
      'bundles' => array(
        'ting_object' => array(
          'label' => 'Ting object',
          'admin' => array(
            'path' => 'admin/structure/ting_object',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),

    'ting_collection' => array(
      'label' => t('Ting collection'),
      'controller class' => 'TingCollectionController',
      // Some modules assume that fieldable entities has a base
      // table. Specify the object table as each collection is also an
      // object.
      'base table' => 'ting_object',
      'uri callback' => 'ting_collection_uri',
      'ding_entity_type' => 'ding_entity_collection',
      'ding_entity_menu' => 'ting/collection/%ting_collection',
      'ding_entity_index' => 2,
      'fieldable' => TRUE,
      'entity keys' => array(
        // We don't really have an ID, but use the ding_entity_id,
        // so we can use entity_uri.
        'id' => 'ding_entity_id',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => TRUE,
        ),
      ),
      'bundles' => array(
        'ting_collection' => array(
          'label' => 'Ting collection',
          'admin' => array(
            'path' => 'admin/structure/ting_collection',
            'access arguments' => array('administer content types'),
          ),
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_ding_entity_is().
 */
function ting_ding_entity_is($object, $class) {
  switch ($class) {
    case 'reservable':
    case 'cartable':
      $sources = variable_get('ting_reservable_sources', _ting_default_reservable_sources());
      $types = variable_get('ting_reservable_types', _ting_default_reservable_types());
      return (in_array(drupal_strtolower($object->ac_source), $sources) && in_array(drupal_strtolower($object->type), $types));

    case 'periodical':
      // TODO BBS-SAL: use a (new) provider call - hardcode the return-value in
      // the opensearch implementation.
      // @todo make this configurable.
      // @todo also make sure that availability information isn't displayed
      //   on the object
      return in_array(drupal_strtolower($object->type), array('tidsskrift', 'periodikum', 'årbog'));

    case 'online':
      return !empty($object->getOnline_url());
  }
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ting_ding_entity_buttons($type, $entity) {
  if ($entity instanceof TingEntity) {
    $buttons = array();

    if ($entity->is('online')) {
      $settings = variable_get('ting_url_labels', _ting_default_url_labels());
      $type = drupal_strtolower($entity->type);
      $label = isset($settings[$type]) && $settings[$type] ? $settings[$type] : $settings['_default'];
      $buttons[] = array(
        // The link can't use l() as it will encode the url from ting_proxy. Use
        // get online as the dc:identifier in $entity->online is not always the
        // correct url.
        array(
          '#type' => 'markup',
          '#markup' => '<a class="button-see-online action-button" target="_new" href="' . $entity->getOnline_url() . '">' . $label . '</a>',
        ),
      );
    }

    $collection = ting_collection_load($entity->id);
    if (count($collection->types) > 1) {
      $buttons[] = array(
        '#theme' => 'link',
        '#text' => t('Other formats'),
        '#path' => '#',
        '#options' => array(
          'attributes' => array(
            'class' => array('action-button', 'other-formats'),
          ),
          'html' => FALSE,
          'external' => TRUE,
        ),
      );
    }

    return $buttons;
  }
}

/**
 * Implements hook_page_alter().
 *
 * Log, and display if the devel module is active and the user has
 * permissions, a warning if the data well was queried more than once.
 *
 * TODO BBS-SAL: Move to opensearch.
 */
function ting_page_alter(&$page) {
  $calls = &drupal_static('ting_execute_cache');
  if (count($calls) > 5) {
    $calls_str = array();
    foreach ($calls as $call) {
      $calls_str[] = print_r($calls, TRUE);
    }

    watchdog('ting', 'Warning, ting_execute called @x times:<br />"@queries"', array('@x' => count($calls), '@queries' => implode('" "', $calls_str)), WATCHDOG_WARNING);

    if (function_exists('dpm') && user_access('access devel information')) {
      drupal_set_message(t('Warning, ting_execute called @x times.', array('@x' => count($calls))), 'error');
      dpm($calls, 'ting_execute queries:');
    }
  }
}

/**
 * Implements hook_ding_provider_user().
 */
function ting_ding_provider_user() {
  return array(
    'search' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Page callback: Display a ting object.
 */
function ting_object_page_view($object) {
  return ting_object_view($object);
}

/**
 * Page callback: Display a ting collection.
 */
function ting_collection_page_view($object) {
  if (count($object->getEntities()) < 2) {
    $uri = entity_uri('ting_object', $object);
    drupal_goto($uri['path'], $uri['options']);
  }
  return ting_collection_view($object);
}

/**
 * Page title callback.
 *
 * Strips chars '<' and '>' in order to avoid HTML injections.
 */
function ting_page_title($object) {
  return str_replace('&amp;', '&', htmlspecialchars($object->title, ENT_NOQUOTES, 'UTF-8'));
}

/**
 * Callback for entity_uri(). Returns the uri for the object.
 */
function ting_object_uri($collection) {
  return array('path' => 'ting/object/' . $collection->id);
}

/**
 * Callback for entity_uri(). Returns the uri for the collection.
 */
function ting_collection_uri($collection) {
  return array('path' => 'ting/collection/' . $collection->id);
}

/**
 * Add a provider_id to the objects.
 *
 * @to do
 *   Maybe this should be in a mapper module.
 */
function ting_ting_object_load($objects) {
  foreach ($objects as $object) {
    $object->provider_id = $object->localId;
  }
}

/**
 * Load a ting object.
 *
 * Don't use this, use ding_entity_load(). Default menu callback load of ting
 * object.
 *
 * @param string $id
 *   Ting entity id.
 *
 * @return TingEntity|bool
 *   Ting object or FALSE on failure.
 */
function ting_object_load($id) {
  return ding_entity_load($id, 'ting_object');
}

/**
 * Load multiple ting objects.
 *
 * Don't use this, use ding_entity_load_multiple().
 */
function ting_object_load_multiple($ids) {
  return ding_entity_load_multiple($ids, 'ting_object');
}

/**
 * Load a ting collection.
 *
 * Don't use this, use ding_collection_load(). Default menu callback load of
 * ting collections.
 *
 * @param string $id
 *   Ting entity id.
 *
 * @return TingCollection|bool
 *   Collection object or FALSE on failure.
 */
function ting_collection_load($id) {
  return ding_entity_load($id, 'ting_collection');
}

/**
 * Display a ting object.
 */
function ting_object_view($object, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $object->content = array();

  // Allow modules to change the view mode
  // If entity_entity_view_mode_prepare is called on the same object several
  // times, the view_mode is not changed. Therefore we unset
  // entity_view_prepared, before setting the view_mode.
  unset($object->entity_view_prepared);
  $view_mode = key(entity_view_mode_prepare('ting_object', array($object->id => $object), $view_mode, $langcode));

  // _field_invoke_multiple gets pissy if the arrays aren't indexed by the
  // local ID.
  field_attach_prepare_view('ting_object', array($object->tid => $object), $view_mode, $langcode);
  entity_prepare_view('ting_object', array($object->id => $object), $langcode);
  $object->content += field_attach_view('ting_object', $object, $view_mode, $langcode);

  // Allow modules to make their own additions to the object.
  module_invoke_all('ding_entity_view', $object, $view_mode, $langcode);
  module_invoke_all('entity_view', $object, 'ting_object', $view_mode, $langcode);

  $build = $object->content;
  unset($object->content);

  $build += array(
    '#theme' => 'ting_object',
    '#object' => $object,
    '#view_mode' => $view_mode,
  );

  drupal_alter('ting_view', $build);

  return $build;
}

/**
 * Display a ting collection.
 */
function ting_collection_view($object, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  $object->content = array();

  // _field_invoke_multiple gets pissy if the arrays aren't indexed by the
  // local ID.
  field_attach_prepare_view('ting_collection', array($object->ding_entity_id => $object), $view_mode, $langcode);
  entity_prepare_view('ting_collection', array($object->id => $object), $langcode);
  $object->content += field_attach_view('ting_collection', $object, $view_mode, $langcode);

  // Allow modules to make their own additions to the collection.
  module_invoke_all('ding_entity_collection_view', $object, $view_mode, $langcode);
  module_invoke_all('entity_view', $object, 'ting_collection', $view_mode, $langcode);

  $build = $object->content;
  unset($object->content);

  $build += array(
    // TODO: Separate theming?
    '#theme' => 'ting_object',
    '#object' => $object,
    '#view_mode' => $view_mode,
  );

  drupal_alter('ting_collection_view', $build);
  return $build;
}

/**
 * Sorts the objects according to type and language.
 *
 * But maintains the order of types and languages in the original array.
 *
 * @param TingObjectInterface[] $objects
 *   List of objects.
 */
function _ting_type_lang_sort(array $objects, &$return_types) {
  $types = array();
  $languages = array();
  $sorted = array();
  // Sort the objects into type buckets containing language buckets.
  foreach ($objects as $object) {
    // We're using keys so we don't have to uniq its afterwards.
    $types[$object->getType()] = TRUE;
    $languages[$object->getLanguage()] = TRUE;
    $buckets[$object->getType()][$object->getLanguage()][] = $object;
  }

  $return_types = array_keys($types);
  // Now flatten the buckets into a flat array.
  foreach ($return_types as $type) {
    foreach (array_keys($languages) as $language) {
      if (isset($buckets[$type][$language])) {
        $sorted = array_merge($sorted, $buckets[$type][$language]);
      }
    }
  }

  return $sorted;
}

/**
 * Default url labels.
 *
 * Defined as a function as a define can only be scalars.
 */
function _ting_default_url_labels() {
  return array(
    '_default' => t('See online'),
    'cd' => t('Hear online'),
    'kassettelydbånd' => t('Hear online'),
    'lydbog (cd)' => t('Hear online'),
    'lydbog (cd-mp3)' => t('Hear online'),
    'lydbog (online)' => t('Hear online'),
    'grammofonplade' => t('Hear online'),
  );
}

/**
 * Default online types.
 *
 * Defined as a function as a define can only be scalars.
 */
function _ting_default_online_types() {
  return array(
    'musik (net)',
    'ebog',
    'netdokument',
    'lydbog (net)',
    'film (net)',
    'tidsskrift (net)',
    'periodikum (net)',
    'pc-spil (net)',
    'avis (net)',
    'e-node',
  );
}

/**
 * Default reservable sources.
 *
 * Defined as a function as a define can only be scalars.
 */
function _ting_default_reservable_sources() {
  return array(
    'bibliotekskatalog',
  );
}

/**
 * Default reservable types.
 *
 * Defined as a function as a define can only be scalars.
 */
function _ting_default_reservable_types() {
  return array(
    'bog',
    'node',
    'dvd',
    'billedbog',
    'cd (musik)',
    'lydbog (cd)',
    'lydbog (bånd)',
    'tegneserie',
    'lydbog (cd-mp3)',
    'sammensat materiale',
    'cd',
    'bog stor skrift',
    'video',
    'blu-ray',
    'cd-rom',
    'pc-spil',
    'playstation 3',
    'xbox 360',
    'wii',
    'playstation 2',
    'playstation 4',
    'graphic novel',
    'nintendo ds',
    'dvd-rom',
    'kort',
    'xbox',
    'gameboy advance',
    'wii u',
    'grammofonplade',
    'playstation',
    'lydbog',
    'spil',
    'puslespil',
    'diskette',
  );
}

/**
 * Fetch known types from the datawell.
 *
 * @return array
 *   Array with data well material types.
 */
function _ting_fetch_well_types() {
  $types = array();

  // Delegate the fetching of types to a search provider.
  if (ding_provider_implements('search', 'material_types')) {
    $types = ding_provider_invoke('search', 'material_types');
  }

  // Only save if we actually got any types.
  if (!empty($types)) {
    variable_set('ting_well_types', $types);
  }

  return $types;
}

/**
 * Fetch known sources from the datawell.
 *
 * @return array
 *   Array with the sources.
 */
function _ting_fetch_well_sources() {
  $sources = array();

  // Delegate the fetching of sources to a search provider.
  if (ding_provider_implements('search', 'sources')) {
    $sources = ding_provider_invoke('search', 'sources');
  }

  // Only save if we actually got any sources.
  if (!empty($sources)) {
    variable_set('ting_well_sources', $sources);
  }

  return $sources;
}

/**
 * Get anchor name from collection type.
 *
 * @param string $type
 *   Name of the anchor.
 *
 * @return string
 *   HTML safe name.
 */
function _ting_anchor_name($type) {
  $name = str_replace(array('(', ')'), '', $type);
  $name = str_replace(' ', '-', $name);
  $name = str_replace(':', '', $name);
  $name = strtolower($name);
  return $name;
}

/**
 * Implements hook_xautoload().
 *
 * Place our Ting classes in the Ting namespace.
 */
function ting_xautoload(LocalDirectoryAdapter $adapter) {
  $adapter->absolute()->addPsr4('Ting\\', drupal_get_path('module', 'ting') . '/src');
}

/**
 * Prepares a query-object for use.
 *
 * @return \Ting\Search\TingSearchRequest
 *   A prepared query-object that can be used to search for materials.
 */
function ting_start_query() {
  // Set the query-object up with a strategy that uses ding_provider_invoke().
  return new TingSearchRequest(new DingProviderStrategy());
}

<?php

/**
 * @file
 * Ting Subsearch Common.
 */

/**
 * Do a secondary search juggling around the drupal static.
 *
 * @param string $keys
 *   The search phrase.
 *
 * @return TingClientSearchResult
 *   The search result of the secondary search.
 */
function ting_subsearch_common_do_secondary_search($keys, $options = array()) {

  // Store search result temporarily. We need to make seconday search.
  $temporary_search_result = drupal_static('ting_search_results');

  // Reset the static containing search result to be able do new search.
  drupal_static_reset('ting_search_search_execute');

  // Load original variables to temporary before changing them.
  if (!empty($options['profile'])) {
    $temporary_profile = variable_get('ting_search_profile', '');
    variable_set('ting_search_profile', $options['profile']);
  }
  if (!empty($options['agency'])) {
    $temporary_agency = variable_get('ting_agency', FALSE);
    variable_set('ting_agency', $options['agency']);
  }

  // Search for the secondary keys.
  ting_search_search_execute($keys, array('sort' => ''));

  $secondary_result = drupal_static('ting_search_results');

  // Overwrite the static with the original search.
  $revert = &drupal_static('ting_search_results');
  $revert = $temporary_search_result;

  if (!empty($temporary_profile)) {
    variable_set('ting_search_profile', $temporary_profile);
  }
  if (!empty($temporary_agency)) {
    variable_set('ting_agency', $temporary_agency);
  }

  return $secondary_result;
}

/**
 * Callback handler for suggested keys.
 *
 * Find suggested keys based on keys and callback.
 */
function ting_subsearch_common_suggested_keys($keys, $callback) {

  if (function_exists($callback)) {
    $suggestion = $callback($keys);
    if ($suggestion == FALSE || $suggestion == $keys) {
      return FALSE;
    }
    else {
      return $suggestion;
    }
  }
  return FALSE;
}

/**
 * Split query string.
 */
function ting_subsearch_common_query_params($query, $original_query = array()) {
  $result = array_merge($original_query, drupal_get_query_array($query));
  return $result;
}

/**
 * Implements hook_libraries_info().
 */
function ting_subsearch_common_libraries_info() {
  return array(
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promises' => array(
      'name' => 'Guzzle promises library',
      'vendor url' => 'https://github.com/guzzle/promises',
      'download url' => 'https://github.com/guzzle/promises',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr7' => array(
      'name' => 'PSR-7 message implementation',
      'vendor url' => 'https://github.com/guzzle/psr7',
      'download url' => 'https://github.com/guzzle/psr7',
      'version' => '1.3',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}

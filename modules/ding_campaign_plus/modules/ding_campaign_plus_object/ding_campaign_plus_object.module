<?php

/**
 * @file
 * Defines basic campaigns triggers and handling.
 */

define('DING_CAMPAIGN_PLUS_OBJECT_TYPE', 'object');

/**
 * Implements hook_ding_campaign_plus_info().
 */
function ding_campaign_plus_object_ding_campaign_plus_info() {
  return array(
    'title' => t('Object view'),
    'type' => DING_CAMPAIGN_PLUS_OBJECT_TYPE,
    'form' => 'ding_campaign_plus_object_admin_form',
    'auto' => array(
      'callback' => 'ding_campaign_plus_object_auto_admin_form',
      'default' => FALSE,
    ),
    'weight' => 10,
  );
}

/**
 * Implements hook_ding_campaign_plus_default_weights().
 */
function ding_campaign_plus_object_ding_campaign_plus_default_weights() {
  return array(
    'object' => array(
      'prefix' => t('Object'),
      'title' => t('Ting material view'),
      'weight' => 10,
    ),
  );
}

/**
 * Implements hook_node_load().
 */
function ding_campaign_plus_object_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type === 'ding_campaign_plus') {
      $rules = db_select('ding_campaign_plus_object', 'dcpo')
        ->fields('dcpo')
        ->condition('nid', $node->nid)
        ->execute()
        ->fetchAllAssoc('id');

      // Add type to easy identify this rule type.
      foreach ($rules as &$rule) {
        $rule->type = 'object';
      }

      if (!isset($node->ding_campaign_plus)) {
        $node->ding_campaign_plus = array();
      }
      $node->ding_campaign_plus = array_merge($node->ding_campaign_plus, $rules);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function ding_campaign_plus_object_node_insert($node) {
  if ($node->type === 'ding_campaign_plus') {
    $triggers = $node->tabs[DING_CAMPAIGN_PLUS_OBJECT_TYPE];

    if (!empty($triggers['rules']['query'])) {
      db_insert('ding_campaign_plus_object')
        ->fields(array(
          'nid' => $node->nid,
          'query' => $triggers['rules']['query'],
        ))->execute();
    }
  }
}

/**
 * Implements hook_node_update().
 */
function ding_campaign_plus_object_node_update($node) {
  if ($node->type === 'ding_campaign_plus') {
    ding_campaign_plus_object_node_delete($node);
    ding_campaign_plus_object_node_insert($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function ding_campaign_plus_object_node_delete($node) {
  if ($node->type === 'ding_campaign_plus') {
    db_delete('ding_campaign_plus_object')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_ding_campaign_plus_matches().
 */
function ding_campaign_plus_object_ding_campaign_plus_matches($contexts, $style) {
  $matches = array();

  $types = array('object', 'collection');

  foreach ($contexts as $key => $context) {
    switch ($key) {
      case 'path':
        if (count($context->raw) === 3 && $context->raw[0] === 'ting' && in_array($context->raw[1], $types)) {
          $ting_object_id = $context->raw[2];
          $matches['search'] = _ding_campaign_plus_object_match($ting_object_id);
        }
        break;
    }
  }

  return $matches;
}

/**
 * Implements hook_ding_campaign_plus_auto_trigger().
 *
 * When auto-generating campaigns this defines the triggers for the object
 * module.
 */
function ding_campaign_plus_object_ding_campaign_plus_auto_trigger($config, $campaign_node, $node, $subjects) {
  $trigger = array();
  $trigger[DING_CAMPAIGN_PLUS_OBJECT_TYPE] = array('rules' => array());

  if ($config && !empty($subjects)) {
    $value = '("';
    $value .= implode('" or "', $subjects);
    $trigger[DING_CAMPAIGN_PLUS_OBJECT_TYPE]['rules'] = array(
      'query' => $value . '")',
    );
  }

  return $trigger;
}

/**
 * Build form options used to configure auto generated campaigns.
 *
 * @param array $form_state
 *   The forms current state.
 * @param bool $default
 *   The default configuration value.
 *
 * @return array
 *   The form element send into the admin form.
 */
function ding_campaign_plus_object_auto_admin_form(array &$form_state, $default = FALSE) {
  return array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#description' => t('Activate trigger on object view based on matching subjects from content.'),
    '#default_value' => empty($default) ? FALSE : $default,
  );
}

/**
 * The node edit form callback defined in the hook_ding_campaign_plus_info.
 */
function ding_campaign_plus_object_admin_form(&$form_state) {
  $triggers = array();

  // Get campaign rule from node.
  if (isset($form_state['node']->nid)) {
    $value = _ding_campaign_plus_object_get_rules($form_state['node']->nid, $form_state['node']->ding_campaign_plus);
  }

  $triggers['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Search query'),
    '#description' => t('Search query that should trigger the campaign'),
    '#default_value' => isset($value['query']) ? $value['query'] : '',
    '#maxlength' => 2048,
  );

  return $triggers;
}

/**
 * Find "facet" rules in the current rules for a given node.
 *
 * @param int $nid
 *   Node id for the node (used as index in static cache).
 * @param array $rules
 *   All the rules loaded for the node.
 *
 * @return array
 *   The rules of the basic types.
 */
function _ding_campaign_plus_object_get_rules($nid, array $rules) {
  $filtered = &drupal_static(__FUNCTION__, array());

  if (!isset($filtered[$nid])) {
    $filtered[$nid] = array();

    foreach ($rules as $rule) {
      if ($rule->type === 'object') {
        $filtered[$nid] = array(
          'query' => $rule->query,
        );
      }
    }
  }

  return $filtered[$nid];
}

/**
 * Helper function to look-up rules in the database.
 *
 * @param string $ting_object_id
 *   Search keys entered by the user.
 *
 * @return array
 *   Campaign ID's for triggered campaigns.
 */
function _ding_campaign_plus_object_match($ting_object_id) {
  $nids = array();

  // Find rules that will match facet.
  $query = db_select('ding_campaign_plus_object', 'dcpo')
    ->fields('dcpo');
  $query->join('node', 'n', 'dcpo.nid = n.nid');
  $rules = $query->condition('status', 1)
    ->execute();

  if ($rules->rowCount() > 0) {
    foreach ($rules as $rule) {
      // Run campaign search query combined with the object id to see if it
      // contains the current viewed ting object.
      $results = ting_start_query()
        ->withFullTextQuery('(' . $rule->query . ') AND (' . $ting_object_id . ')')
        ->withCount(0)
        ->withPage(0)
        ->execute();

      if ($results->getNumTotalObjects() > 0) {
        $nids[] = $rule->nid;
      }
    }
  }

  return $nids;
}

/**
 * Implements hook_ding_campaign_plus_validator().
 *
 * Validate that a give campaign triggers don't have 0-hits in the search
 * query.
 */
function ding_campaign_plus_object_ding_campaign_plus_validator($nid) {
  $query = db_select('ding_campaign_plus_object', 'dcpo')
    ->fields('dcpo');
  $query->join('node', 'n', 'dcpo.nid = n.nid');
  $rules = $query->condition('status', 1)
    ->execute();

  if ($rules->rowCount() > 0) {
    $active = TRUE;
    foreach ($rules as $rule) {
      $results = ting_start_query()
        ->withFullTextQuery($rule->query)
        ->withCount(1)
        ->withPage(1)
        ->execute();
      if ($results->getNumTotalObjects() > 0) {
        // No need to check more rules one of theme makes hits.
        return TRUE;
      }
      else {
        $active = FALSE;
      }
    }

    return $active;
  }

  return NULL;
}

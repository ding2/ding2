<?php

/**
 * @file
 * Ding entity rating module.
 *
 * User rating of ting_objects with storage in OpenList
 */

include_once 'ding_entity_rating.serendipity.inc';

// Ding rating list.
define('DING_ENTITY_RATING_LIST', 'ratings');

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_entity_rating_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_menu().
 */
function ding_entity_rating_menu() {
  $items = array();
  
  // Add to list callback.
  $items['ding_entity_rating/%ctools_js/%ting_object/%user/%'] = array(
    'title' => 'Ding entity rating add to list',
    'page callback' => 'ding_entity_rating_add_to_list_callback',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('use personalisation'),
  );
  
  $items['ding_entity_rating/get'] = array(
    'title' => 'Ding entity get rating',
    'page callback' => 'ding_entity_rating_get_user_rating_callback',
    // 'page arguments' => array(2),
    'access arguments' => array('use personalisation'),
  );

  return $items;
}

/**
 * Menu hook callback for getting rating.
 */
function ding_entity_rating_get_user_rating_callback() {
  $ratings = array();
  
  foreach (ding_entity_load_multiple($_GET['ids']) as $object) {
    $ratings[$object->ding_entity_id] = ding_entity_rating_get_user_rating($object);
  }
  
  echo drupal_json_encode($ratings);
  drupal_exit();
}

/**
 * Add to list callback.
 *
 * @param bool $ajax
 *   If it's an ajax call or not.
 * @param object $entity
 *   The ting object to rate.
 * @param object $account
 *   The user account.
 * @param int $rating
 *   The given rating / weight.
 */
function ding_entity_rating_add_to_list_callback($ajax, $entity, $account, $rating) {
  // Access check for permission.
  global $user;
  if ($user->uid != $account->uid) {
    return '';
  }
  
  if ($ajax) {
    // Add to rated materials list.
    ding_entity_rating_add_to_list($entity, $account, $rating);
    
    // Build response.
    $output = theme('ding_entity_rating_thank_you', array());
    
    // Return response.
    print $output;
    drupal_exit();
  }
  else {
    // Only ajax supported.
    return '';
  }
}

/**
 * Implements hook_ding_list_operations().
 */
function ding_entity_rating_ding_list_operations() {
  return array(
    DING_ENTITY_RATING_LIST => array(
      DING_LIST_OPERATION_DETACH => TRUE,
      DING_LIST_OPERATION_SORT => TRUE,
      DING_LIST_OPERATION_AUTO_CREATE => TRUE,
      '_data' => array(
        'default_title' => t('Ratings'),
        'description' => t('This is the list of materials you have rated. Rate materials and get recommendations for similar content.'),
      ),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function ding_entity_rating_field_info() {
  // Add the rating form and options to ting objects display.
  $extra = array(
    'ding_entity_rating_result' => array(
      'label' => t('Average rating'),
      'description' => t('Average result of all ratings given to this entity'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ding_entity_rating_result_default',
    ),
    
    'ding_entity_rating_action' => array(
      'label' => t('Rate this'),
      'description' => t('Enables the users to rate this entity'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ding_entity_rating_action_default',
    ),
  );

  return $extra;  
}

/**
 * Implements hook_widget_info_alter().
 */
function ding_entity_rating_widget_info_alter(&$info) {
  if (isset($info['hidden'])) {
    $info['hidden']['field types'] += array(
      'ding_entity_rating_action',
      'ding_entity_rating_result',
    );
  }
}

/**
 * Implements hook_field_load().
 */
function ding_entity_rating_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    $items[$id][0] = array(
      'id' => $entity->id,
    );
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_entity_rating_field_formatter_info() {
  return array(
    'ding_entity_rating_result_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ding_entity_rating_result',
      ),
    ),
    'ding_entity_rating_action_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'ding_entity_rating_action',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ding_entity_rating_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    switch ($display['type']) {
      case 'ding_entity_rating_action_default':
        $element[$delta] = array(
          '#markup' => theme('ding_entity_rating_display', array('entity' => $entity)),
        );
        break;
    }
  }

  return $element;
}

/**
 * Check if the current user has rated an entity.
 *
 * @param object $entity
 *   The ting object entity to remove from the rating list.
 *
 * @return int
 *   Rating if the user has rated the entity and FALSE if not.
 */
function ding_entity_rating_get_user_rating($entity) {
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST);
  $result = FALSE;
  $element = ding_list_has_ding_list_element($list, 'ting_object', $entity->ding_entity_id);

  if ($element !== FALSE) {
    $result = ding_base_get_value('ding_type', $element, 'field_weight');
  }
  
  return $result;
}

/**
 * Implements hook_theme().
 */
function ding_entity_rating_theme($existing, $type, $theme, $path) {
  return array(
    'ding_entity_rating_display' => array(
      'variables' => array('entity' => NULL),
    ),
    'ding_entity_rating_average' => array(
      'variables' => array('rating' => NULL),
    ),
    'ding_entity_rating_thank_you' => array(
      'variables' => array(),
    ),    
    'ding_entity_rating_ding_user_complete_description' => array(
      'variables' => array('history_list' => NULL, 'account' => NULL),
    ),
  );
}

/**
 * Theme function for theme_ding_entity_rating_thank_you.
 */
function theme_ding_entity_rating_thank_you($variables) {
  return '<div class="ding-entity-rating-respons">' . t('Thank you for your input') . '</div>';
}

/**
 * Theme function for theme_ding_entity_rating_ding_user_complete_description.
 */
function theme_ding_entity_rating_ding_user_complete_description($variables) {
  $uid = $variables['account']->uid;
  $history_button = isset($variables['history_list']) ? "<li>" . l(t("Rate previous loans"), "list/" . $variables['history_list']->id) . "</li>" : "";
  
  return "<div class='description'>" .
    t('You could rate materials to give us an idea of your preferences.') .
    "</div><ul class='actions'><li>" . l(t("Rate your current loans"), "user/$uid/status/loans") . "</li>" .
    $history_button .
    "</ul>";
}

/**
 * Preprocessor for ding_entity_rating_display.
 */
function template_preprocess_ding_entity_rating_display(&$variables) {
  global $user;
  $entity = $variables['entity'];
  
  // Add styling and javascript.
  // Since we don't use render here, we attach them old fashioned way.
  $module_path = drupal_get_path('module', 'ding_entity_rating');
  drupal_add_css($module_path . '/css/ding_entity_rating.css');
  drupal_add_js($module_path . '/js/ding_entity_rating.js');

  $variables['rating'] = FALSE;
  
  // If the user hasn't rated and this isn't the rating list itself, enable
  // rating.
  $variables['classes_array'][] = 'ding-entity-rating';

  if (user_access('use personalisation')) {
    $variables['classes_array'][] = 'rateable';
  }

  $variables['path'] = $entity->ding_entity_id . '/' . $user->uid;

  $variables['avg'] = 0;
  // If the user has not rated the entity then display an average.
  if ($variables['rating'] === FALSE) {
    $variables['avg'] = ding_entity_rating_get_average($entity);
    $variables['rating'] = ($variables['avg']) ? round($variables['avg']) : -1;
  }
}

/**
 * Theme function for ding_entity_rating_display.
 */
function theme_ding_entity_rating_display($variables) {
  $output = '<div class="' . implode(' ', $variables['classes_array']) . '" data-ding-entity-rating-id="' . $variables['entity']->ding_entity_id . '" data-ding-entity-rating-path="' . $variables['path'] . '">';
  
  $output .= ding_entity_rating_build_theme_list($variables['rating']);
  
  // Add average value if the entity has ratings already.
  if (!empty($variables['avg'])) {
    $output .= '<span class="ding-entity-rating-avg">' . t('Average:') . ' ' . round($variables['avg'], 2) . '</span>';
  }
  
  return $output . '</div>';
}

/**
 * Preprocessor for ding_entity_rating_average
 */
function template_preprocess_ding_entity_rating_average(&$variables) {
  drupal_add_css(drupal_get_path('module', 'ding_entity_rating') . '/css/ding_entity_rating.css');
}

/**
 * Theme function for ding_entity_rating_average.
 */
function theme_ding_entity_rating_average($variables) {
  $output = '<div class="ding-entity-rating-submitted">';

  $rating = round($variables['rating']);
  $output .= ding_entity_rating_build_theme_list($rating);
  $output .= '</div>';
  return $output;
}

/**
 * Build the elements used by the theme functions.
 */
function ding_entity_rating_build_theme_list($rating) {
  $output = '';
  for ($i = 1; $i < 6; $i++) {
    $classes = array('fa', 'fa-star-o', 'star');
    if ($i <= $rating) {
      $classes[] = 'submitted';
    }
    $output .= '<i class="' . implode(' ', $classes) . '"></i>';
  }
  
  return $output;
}

/**
 * Check if the current path is a rating list path.
 *
 * @return bool
 *   TRUE if this is a rating list and FALSE if not.
 */
function ding_entity_rating_is_rating_list() {
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST);
  return arg(0) == 'list' && arg(1) == $list->id;
}

/**
 * Retrieve the average rating of a ting object entity.
 *
 * @param object $entity
 *   The ting object entity to remove from the rating list.
 *
 * @return int
 *   The average rating of the given entity.
 */
function ding_entity_rating_get_average($entity) {
  $query = db_select('field_data_field_weight', 'w');
  $query->join('eck_ding_type', 'dt', 'w.entity_id = dt.id');
  $query->join('field_data_field_value', 'v', 'w.entity_id = v.entity_id');
  $query->condition('v.field_value_value', $entity->ding_entity_id)
    ->addExpression('AVG(w.field_weight_value)', 'avg_count');
  $result = $query->execute();

  return $result->fetchField(0);
}

/**
 * Add entity from the rating list.
 *
 * @param object $entity
 *   The ting object entity to add to the rating list.
 * @param object $account
 *   The user account who's rating list to use.
 * @param int $rating
 *   The rating given to the ting object entity.
 *
 * @return object $entity
 *   Return the added ding list element entity.
 */
function ding_entity_rating_add_to_list($entity, $account, $rating) {
  // Get the rating list.
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST, $account);
  $element = ding_list_has_ding_list_element($list, 'ting_object', $entity->ding_entity_id);
  if (!$element) {
    $values = array(
      'value' => $entity->ding_entity_id,
      'weight' => $rating,
    );
    return ding_list_create_ding_list_element($list, 'ting_object', $values, $account, TRUE);
  }
  else {
    $values = array(
      'value' => $entity->ding_entity_id,
      'weight' => $rating,
    );
    return ding_list_edit_ding_list_element($element, 'ting_object', $values);
  }
}

/**
 * Remove entity from the rating list.
 *
 * @param object $entity
 *   The ting object entity to remove from the rating list.
 * @param object $account
 *   The user account who's rating list to use.
 *
 * @return bool
 *   Return TRUE if entity was successfully removed, FALSE if not. 
 */
function ding_entity_rating_remove_from_list($entity, $account) {
  // Get the rating list.
  $list = ding_list_get_list(DING_ENTITY_RATING_LIST, $account);
  if ($element = ding_list_has_ding_list_element($list, 'ting_object', $entity->ding_entity_id)) {
    ding_list_detach_ding_list_element($list, array($element->id));
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_ding_user_complete().
 */
function ding_entity_rating_ding_user_complete() {
  $complete = FALSE;

  $user_history_list = ding_list_get_lists(DING_LIST_TYPE_LOAN_HISTORY);
  $history_list = current($user_history_list);
  global $user;
  
  return array(
    'ding_entity_rating' => array(
      'title' => t('It pays to judge'),
      'points' => 3,
      'completed' => $complete,
      'markup' => theme('ding_entity_rating_ding_user_complete_description', array('history_list' => $history_list, 'account' => $user)),
    ),
  );
}

/**
 * Return a list of loans not yet rated.
 *
 * @return array
 *   An array of ding_entity_id's which have yet to be rated by the active user.
 */
function ding_entity_rating_get_loans_not_rated() {
  global $user;
  $unrated = array();
  if (ding_user_is_provider_user($user)) {
    $loans = ding_provider_invoke('loan', 'list', $user);
    $list = ding_list_get_list(DING_ENTITY_RATING_LIST, $user);
    foreach ($loans as $loan) {
      if (!$element = ding_list_has_ding_list_element($list, 'ting_object', $loan->ding_entity_id)) {
        $unrated[] = $loan->ding_entity_id;
      }
    }
  }
  return $unrated;
}

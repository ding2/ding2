<?php

/**
 * @file
 * Ding interaction pane
 */

include_once 'ding_interests.features.inc';
include_once 'ding_interests.serendipity.inc';

// Interests list.
define('DING_INTERESTS_LIST', 'interests');
define('DING_INTERESTS_INTERESTING', 5);
define('DING_INTERESTS_NOT_INTERESTING', 0);

/**
 * Implements hook_menu().
 */
function ding_interests_menu() {
  $items = array();

  $items['ding/interests/%ctools_js/%/%user/%'] = array(
    'title' => 'Ding interests add to list',
    'page callback' => 'ding_interests_add_to_list_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array(4),
    'access callback' => 'ding_interests_access',
  );
  $items['ding/interests/remove/%ctools_js/%taxonomy_term/%user'] = array(
    'title' => 'Ding interests remove from list',
    'page callback' => 'ding_interests_remove_from_list_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array(5),
    'access callback' => 'ding_interests_access',
  );
  $items['ding/interests/overview'] = array(
    'title' => 'List of all recommended subjects',
    'page callback' => 'ding_interests_all_recommended_subjects',
    'access arguments' => array('use personalisation'),
  );

  return $items;
}

function ding_interests_access($account) {
  global $user;
  return $user->uid == $account->uid && user_access('use personalisation');
}

/**
 * Implements hook_entity_info_alter().
 */
function ding_interests_entity_info_alter(&$entity_info) {
  // Taxonomy teasers are used for recommending interests.
  if (!isset($entity_info['taxonomy_term']['view modes']['teaser'])) {
    $entity_info['taxonomy_term']['view modes']['teaser'] = array(
      'label' => t('Teaser'),
      'custom settings' => TRUE,
    );
  }
}

/**
 * Synchronize with openlist.
 *
 * Create missing lists and update the historical loans list.
 */
function ding_interests_ding_list_operations() {
  return array(
    DING_INTERESTS_LIST => array(
      DING_LIST_OPERATION_DETACH => TRUE,
      DING_LIST_OPERATION_SORT => TRUE,
      DING_LIST_OPERATION_AUTO_CREATE => TRUE,
      '_data' => array(
        'default_title' => t('Interests'),
        'description' => t('Follow your favorite topics and recieve notifications when new materials arrive. <a href="/ding/interests/overview">Check out recommended topics here</a>'),
        'yes' => t('Interests'),
        'no' => t('Topics I have no interrest in.'),
      ),
    ),
  );
}

/**
 * Implements hook_ding_interaction_view().
 */
function ding_interests_ding_interaction_view() {
  kpr(debug_backtrace());
  if (user_is_logged_in()) {
    
    // UI for following interests is ajax time.
    ctools_include('ajax');
    $interests_list = ding_list_get_list(DING_INTERESTS_LIST);

    // Try to find the correct status tid.
    $status_voc = taxonomy_vocabulary_machine_name_load('interest_status');
    $status_terms = taxonomy_get_tree($status_voc->vid);

    foreach ($status_terms as $status_term) {
      if ($status_term->tid == variable_get('ding_interests_selected_tid')) {
        $status_tid = $status_term->tid;
      }
    }

    // Get 2 interests the user haven't yet decided to follow or not.
    $result = db_query("SELECT
  td.tid, IFNULL(fdfss.field_search_string_value, CONCAT('dc.subject=', td.name)) AS search_string, fv.field_value_value
FROM
  (
    taxonomy_term_data td
    JOIN field_data_field_status fs ON (fs.entity_id = td.tid)
    LEFT JOIN field_data_field_search_string fdfss ON (fdfss.entity_id = td.tid)
  )
  LEFT JOIN (
    field_data_field_value fv
    JOIN field_data_field_list_objects flo ON (fv.entity_id = flo.field_list_objects_target_id AND flo.entity_id = :list_id)
  ) ON (fv.field_value_value = IFNULL(fdfss.field_search_string_value, CONCAT('dc.subject=', td.name)))
WHERE
  fs.field_status_tid = :status_tid
  AND fv.field_value_value IS NULL
ORDER BY
  RAND()
LIMIT 2", array(':list_id' => $interests_list->id, ':status_tid' => $status_tid));

    $tids = $result->fetchCol();
    $terms = taxonomy_term_load_multiple($tids);

    if (!empty($terms)) {
      $views = taxonomy_term_view_multiple($terms, 'teaser');

      $view = '<div class="terms terms-interaction">';
      foreach (element_children($views) as $key) {
        $view .= '<div class="term">' . render($views[$key]) . '</div>';
      }
      $view .= '</div>';

      if ($view) {
        return $view . "<div class='all-interests'>" . l(t("View all subjects"), "ding/interests/overview") . "</div>";
      }
    }
  }
  return '';
}

/**
 * Implements hook_ding_interaction_info().
 */
function ding_interests_ding_interaction_info() {

  $active = user_is_logged_in();
  return array(
    'title' => t('Recommended subjects from the library staff'),
    'active' => $active,
  );
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function ding_interests_preprocess_taxonomy_term(&$variables) {
  $vocabulary = $variables['vocabulary_machine_name'];
  $view_mode = $variables['view_mode'];

  if (user_is_logged_in() && $vocabulary == 'ding_content_tags' && $view_mode == 'teaser' && arg(0) != 'list') {
    $term = $variables['term'];
    $status = '';
    if (!empty($term->field_status)) {
      $field = $term->field_status[field_language('taxonomy_term', $term, 'field_status')];
      if (empty($field[0]['taxonomy_term'])) {
        $status_term = taxonomy_term_load($field[0]['tid']);
      }
      else {
        $status_term = $field[0]['taxonomy_term'];
      }
      $status = $status_term->tid;
    }
    
    // Show the term if its part of "På baggrund af dine lån foreslår vi
    // emneord".
    // And if the term is "Udvalgt", which is a field set on the term page.
    if ($status == variable_get('ding_interests_selected_tid') && drupal_is_front_page() || !drupal_is_front_page() || isset($variables['content']['show_anyway'])) {
      $account = $variables['user'];
      $link = l($variables['term_name'], "taxonomy/term/" . $variables['tid']);
      if (arg(2) == $variables['tid']) {
        // No need to link to the term when you're already on the term page:
        $link = $variables['term_name'];
      }
      $variables['content']['ding_interest_teaser_text'] = array(
        '#type' => 'markup',
        '#markup' => "<div class='teaser-text'>" .
        t("Are you interested in more content about") .
        "</div><div class='term-link'>" .
        $link .
        "?</div>",
        '#weight' => -1,
      );

      $list = ding_list_get_list(DING_INTERESTS_LIST, $account);

      $value = ding_interest_get_term_cql($term);
      
      if (!ding_list_has_ding_list_element($list, 'taxonomy_term', $value)) {
        $interest_flag = ding_interests_ajax_button($term, $account, DING_INTERESTS_INTERESTING);
        $no_interest_flag = ding_interests_ajax_button($term, $account, DING_INTERESTS_NOT_INTERESTING);
        $variables['content']['ding_interest_interest_button'] = array(
          '#type' => 'markup',
          '#markup' => $interest_flag,
          '#weight' => 50,
        );
        $variables['content']['ding_interest_no_interest_button'] = array(
          '#type' => 'markup',
          '#markup' => $no_interest_flag,
          '#weight' => 50,
        );
      }
      else {
        $variables['content']['ding_interest_no_interest_button'] = array(
          '#type' => 'markup',
          '#markup' => t('Already added to !list', array('!list' => l(t('interests'), 'list/' . $list->id))),
          '#weight' => 50,
        );
      }
    }
  }
  elseif ($view_mode == 'teaser') {
    drupal_add_css(drupal_get_path('module', 'ding_interests') . '/ding_interests.css');
    $variables['classes_array'][] = 'no-content';
  }
}

/**
 * Ajax callback for the add to list button.
 *
 * @ajax boolean
 *   Indicates if this call is running through Ajax.
 *
 * @term object taxonomy_term
 *   The taxonomy term being added.
 *
 * @account object user
 *   The user to act on.
 *
 * @return array
 *   if ajax is used an array of ajax commands is returned,
 *   else an empty string is returned.
 */
function ding_interests_add_to_list_callback($ajax, $term_id, $account, $rating = 5) {
  if ($ajax) {
    $term = ding_list_get_taxonomy_term($term_id);

    // Add to interests list.
    $added_result = ding_interests_add_to_list($term, $account, $rating);
    $list = ding_list_get_list(DING_INTERESTS_LIST, $account);
    // Get ajax button.
    $link = ($rating == DING_INTERESTS_INTERESTING) ? l(t('interests'), 'list/' . $list->id) : l(t('not interested'), 'list/' . $list->id);
    $output = '<div class="response">' . t('Added to !list', array('!list' => $link)) . '</div>';

    if (!isset($_GET['frombutton'])) {
      // Set command.
      $identifier = '#taxonomy-term-' . $term->tid . ' .add-to-list';
      $commands[] = ajax_command_replace($identifier, $output);
    }
    else {
      if (!$added_result) {
        $response = t('Already added to !name', array('!name' => l($list->title, 'list/' . $list->id)));
        $commands[] = ajax_command_ding_popup('ding_list', t('List'), '<div class="ding-list-message">' . $response . '</div>');
      }
      else {
        $response = t('Added to !name', array('!name' => l($list->title, 'list/' . $list->id)));
        $commands[] = ajax_command_ding_popup('ding_list', t('List'), '<div class="ding-list-message">' . $response . '</div>');
      }
    }

    if ($rating > DING_INTERESTS_NOT_INTERESTING) {
      $commands[] = ding_serendipity_command_refresh(array('interest' => $term->tid, 'plugins' => array('ding_interests_materials')));
    }
    // Return output.
    ajax_deliver($commands);
  }
  else {
    // Ajax required.
    return '';
  }
}

/**
 * Ajax callback for the remove from list button.
 *
 * @ajax boolean
 *   Indicates if this call is running through Ajax.
 *
 * @term object taxonomy_term
 *   The taxonomy term being added.
 *
 * @account object user
 *   The user to act on.
 *
 * @return array
 *   if ajax is used an array of ajax commands is returned,
 *   else an empty string is returned.
 */
function ding_interests_remove_from_list_callback($ajax, $term, $account) {
  if ($ajax) {

    // Add to interests list ignore/not interested list.
    ding_interests_add_to_list($term, $account, DING_INTERESTS_NOT_INTERESTING);
    // Get ajax button.
    $output = ding_interests_ajax_button($term, $account, DING_INTERESTS_NOT_INTERESTING);
    // Set command.
    $identifier = '#taxonomy-term-' . $term->tid . ' .add-to-list';
    $commands[] = ajax_command_replace($identifier, $output);
    // Return output.
    ajax_deliver($commands);
  }
  else {
    // Ajax required.
    return '';
  }
}

/**
 * Add term to DING_INTERESTS_LIST.
 *
 * @term object taxonomy_term
 *   The taxonomy term being added.
 
 * @account object user
 *   The user to act on.
 
 * @rating number
 *   The rating to give the element.
 *
 * @return bool
 *    TRUE if the interest was inserted as a new interest
 *    FALSE if the interest already existed.
 */
function ding_interests_add_to_list($term, $account, $rating) {
  // Get the historical loan list.
  $list = ding_list_get_list(DING_INTERESTS_LIST, $account);

  $value = ding_interest_get_term_cql($term);

  if (!ding_list_has_ding_list_element($list, 'taxonomy_term', $value)) {
    $values = array(
      'search_title' => $term->name,
      'value' => $value,
      'state' => ($rating > DING_INTERESTS_NOT_INTERESTING) ? 'yes' : 'no',
    );
    ding_list_create_ding_list_element($list, 'taxonomy_term', $values, $account, TRUE);

    return TRUE;
  }
  
  return FALSE;
}

/**
 * Create a ctools ajax button to add or remove elements to the list.
 *
 * @term object taxonomy_term
 *   The taxonomy term being added.
 *
 * @account object user
 *   The user to act on.
 *
 * @rating number
 *   The rating to give the element.
 *
 * @remove boolean
 *   Indicates if this is a remove button or not.
 *
 * @return string
 *   The ajax buttom markup.
 */
function ding_interests_ajax_button($term, $account, $rating = DING_INTERESTS_INTERESTING, $remove = FALSE, $titles = array()) {
  // Include ctools ajax.
  ctools_include('ajax');
  $commands = array();
  // Set ajax button variables.
  if ($remove) {
    $path = 'ding/interests/remove/nojs/' . $term->tid . '/' . $account->uid;
  }
  else {
    $path = 'ding/interests/nojs/' . $term->tid . '/' . $account->uid . '/' . $rating;
  }

  if (!isset($titles['yes'])) {
    $titles['yes'] = t('Yes! Add to my interests');
  }
  if (!isset($titles['no'])) {
    $titles['no'] = t('No thanks, not interested');
  }

  // Rating 5 means interested.
  $title = ($rating == DING_INTERESTS_INTERESTING) ? $titles['yes'] : $titles['no'];
  $class = ($rating == DING_INTERESTS_INTERESTING) ? "yes" : "no";
  // Create ajax button.
  $output = ctools_ajax_text_button($title, $path, $title, "add-to-list transparent-button $class");
  return $output;
}

/**
 * Get interests list elements.
 *
 * @param string $type
 *   The element type.
 *
 * @return array
 *   An array of elements.
 */
function ding_interests_get_list_elements($type = FALSE) {
  $list = ding_list_get_list(DING_INTERESTS_LIST);
  if (empty($list)) {
    return array();
  }
  $elements = ding_list_load_elements($list);
  $interests = array();
  foreach ($elements as $element) {
    $element_id = ding_list_get_list_element_value($element);
    if (!$type || ding_list_get_list_element_state($element) == $type) {
      $interests[] = $element_id;
    }
  }
  return $interests;
}

/**
 * Implements hook_user_complete().
 */
function ding_interests_ding_user_complete() {
  $complete = FALSE;
  return array(
    'ding_interests' => array(
      'title' => t('Follow topics from the library'),
      'points' => 3,
      'completed' => $complete,
      'markup' =>
      "<div class='description'>" .
      t('You could start building a list of your interests to make your profile more complete.') .
      "</div><ul class='actions'><li>" .
      l(t("Check out the topics"), "ding/interests/overview") .
      "</li></ul>",
    ),
  );
}

/**
 * Fetch some random ding_object from user list.
 *
 * @return object
 *   The random ting_object. Or FALSE otherwise.
 */
function ding_interests_get_random_list_item() {
  $list = ding_list_get_list(DING_INTERESTS_LIST);
  if (empty($list)) {
    return FALSE;
  }

  // @TODO: add criteria to ding_list_load_elements so we dont have to load all
  // @TODO: add get random elements to ding_list
  $items = ding_list_load_elements($list);
  $buffer = array();
  foreach ($items as $item) {
    if (ding_base_get_value('ding_type', $item, 'field_state') == 'yes') {
      $buffer[] = $item;
    }
  }

  if (empty($buffer)) {
    return FALSE;
  }

  $rnd = array_rand($buffer);
  $element = $buffer[$rnd];

  $term_name = ding_base_get_value('ding_type', $element, 'field_search_title');
  $terms = taxonomy_get_term_by_name($term_name, 'ding_content_tags');

  // Missing term.
  if (count($terms) == 0) {
    return FALSE;
  }

  $access = ding_interests_get_status_tids();
  foreach ($terms as $term) {
    if ($term->field_status[LANGUAGE_NONE][0]['tid'] == $access['granted']) {
      return $term;
    }
  }

  // Return any.
  return array_values($terms)[0];
}


/**
 * Implements hook_theme().
 */
function ding_interests_theme($existing, $type, $theme, $path) {
  $theme = array(
    'ding_interests_tree' => array(
      'variables' => array('root' => 0, 'tree' => array()),
    ),
  );
  return $theme;
}

/**
 * Preprocess function for Ding interests: Overview.
 */
function template_preprocess_ding_interests_tree(&$variables) {
  $voc = taxonomy_vocabulary_machine_name_load('ding_content_tags');
  $tree = taxonomy_get_tree($voc->vid, $variables['root'], 2, TRUE);
  $actual_tree = array();

  if ($variables['root'] !== 0) {
    $root = taxonomy_term_load($variables['root']);
    $root->parents = array('0');
    $tree = array_merge(array($root), $tree);
  }

  $count = count($tree);
  if ($count == 1) {
    return;
  }

  $access = ding_interests_get_status_tids();
  for ($i = 0; $i < $count; $i++) {
    if (ding_base_get_value('taxonomy_term', $tree[$i], 'field_status', 'tid') == $access['denied']) {
      array_splice($tree, $i, 1);
      $i -= 1;
      $count -= 1;
    }
    else {
      if ($tree[$i]->parents[0] == '0') {
        $actual_tree[$tree[$i]->tid] = $tree[$i];
      }
      else {
        if (isset($actual_tree[$tree[$i]->parents[0]])) {
          $actual_tree[$tree[$i]->parents[0]]->children[$tree[$i]->tid] = $tree[$i];
        }
      }
    }
  }

  $variables['tree'] = $actual_tree;
}

/**
 * Todo: doc here.
 */
function theme_ding_interests_tree($variables) {
  $parent = 0;
  $out = '';
  $count = count($variables['tree']);
  if ($count == 0) {
    return $out;
  }

  foreach ($variables['tree'] as $item) {
    $uri = entity_uri('taxonomy_term', $item);

    $out .= '<div class="item">';
    if (arg(0) != 'taxonomy') {
      $out .= '<h2>' . l($item->name, $uri['path']) . '</h2>';
    }
    else {
      $out .= '<h2>' . t('Sub subjects for !link', array('!link' => l($item->name, $uri['path']))) . '</h2>';
    }
    if (isset($item->children)) {
      $items = array();
      foreach ($item->children as $child) {
        $uri = entity_uri('taxonomy_term', $child);
        $items[] = l($child->name, $uri['path']);
      }

      $out .= theme('item_list', array('items' => $items));
    }
    $out .= '</div>';
  }

  return $out;
}

/**
 * Todo: doc here.
 */
function ding_interests_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Get the status granted and denied tids.
 */
function ding_interests_get_status_tids() {
  return array(
    'denied' => variable_get('ding_interests_optedout_tid'),
    'granted' => variable_get('ding_interests_selected_tid')
  );
}

/**
 * To-do: doc here.
 */
function ding_interests_all_recommended_subjects() {
  return '<h1>' . t('The librarys selected subjects') . '</h1>' . theme('ding_interests_tree');
}

/**
 * Create CQL to lookup results for a term.
 * 
 * @param object $term
 *    The term to look up.
 * 
 * @return string 
 *    The CQL to lookup the term in Brønden.
 */
function ding_interest_get_term_cql($term) {
  // Check if term has a specific CQL already set.
  $value = ding_base_get_value('taxonomy_term', $term, 'field_search_string');
  
  // Fallback to dc.subject.
  if ($value === FALSE) {
    $value = 'facet.subject="' . $term->name . '"';
  }
  return $value;
}

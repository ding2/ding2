<?php

/**
 * @file
 * Messages and notifications for ding users.
 */

use DingList\DingListElement;

define('DING_MESSAGE_ACTIVE', 1);
define('DING_MESSAGE_CLOSED', 2);
define('DING_MESSAGE_IGNORE', 3);

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_message_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_menu().
 */
function ding_message_menu() {
  $items['admin/config/ding/ding_message'] = array(
    'title' => 'Ding message administation page',
    'description' => 'Ding message administation options and configurations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_message_admin_form'),
    'access arguments' => array('administer personalisation'),
    'file' => 'ding_message.admin.inc',
  );
  $items['admin/config/ding/ding_message/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/ding/ding_message/update'] = array(
    'title' => 'Ding message update user',
    'description' => 'Update messages for a specific user.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_message_update_form'),
    'access arguments' => array('administer personalisation'),
    'file' => 'ding_message.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/ding/ding_message/report-user-checks'] = array(
    'title' => 'Report: User checks',
    'description' => 'Report over users checked.',
    'page callback' => 'ding_messages_admin_user_checks',
    'access arguments' => array('administer personalisation'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_message.admin.inc',
  );
  $items['ding_message/status/change'] = array(
    'title' => 'Change message status',
    'page callback' => 'ding_message_change_status',
    'access arguments' => array('use personalisation'),
    'type' => MENU_CALLBACK,
  );
  $items['ding_message/clear_user_messages'] = array(
    'title' => 'Purge user messages',
    'page callback' => 'ding_message_clear_user_messages',
    'access arguments' => array('use personalisation'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_message.admin.inc',
  );
  $items['admin/ding_message/purge'] = array(
    'title' => 'Message test',
    'page callback' => 'ding_message_purge',
    'access arguments' => array('administer personalisation'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_message.admin.inc',
  );
  $items['admin/ding_message/test-check'] = array(
    'title' => 'Message check test',
    'page callback' => 'ding_message_get_users_to_check',
    'access arguments' => array('administer personalisation'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function ding_message_cron() {
  $accounts = ding_message_get_users_to_check();
  ding_message_update_users($accounts);

  // @todo: delete messages with orphan source relations
}

/**
 * Get a limited list of users to check for updates.
 *
 * @return array
 *   An array of uids to check for updates.
 */
function ding_message_get_users_to_check() {
  $time = time() - variable_get('ding_message_login_delay', 3600);

  $query = db_select('users', 'u');
  $query->leftJoin('ding_message_check', 'dmc', 'dmc.uid = u.uid');

  // Only check users outside delay time interval
  // This means users recently logged in gets (re)checked first
  // But only rechecked after a certain delay.
  $query->condition('u.status', 1)->distinct()
    ->fields('u', array('uid'))
    ->condition('u.login', $time, '<')
    ->condition('u.openlist_uid', '', '!=')
    ->orderBy('u.login', 'DESC')
    ->orderBy('dmc.time', 'ASC')
    ->range(0, variable_get('ding_message_batch_size', 50));
  $query->where('u.login > dmc.time OR dmc.uid IS NULL');

  $accounts = array_values($query->execute()->fetchAllKeyed(0, 0));

  // Return accounts.
  return $accounts;
}

/**
 * Update a users messages.
 *
 * @param array $accounts
 *   An array of user uids to check.
 *   This should be a limited list of users since,
 *   the message generation process could take some time.
 * @param bool $debug
 *   Show debug information while updating.
 * @param bool $reset
 *   Flag to reset messages for the user, so all messages are fetched again.
 */
function ding_message_update_users(array $accounts, $debug = FALSE, $reset = FALSE) {
  // Get lists which can be followed.
  $follow_lists = ding_list_get_list_types_by_operations(DING_LIST_OPERATION_FOLLOW);

  // Iterate accounts.
  foreach ($accounts as $uid) {
    // Load user object.
    $account = user_load($uid);
    // Get the users lists.
    $lists = ding_list_get_lists($follow_lists, $account, TRUE);

    if ($reset) {
      // Delete existing messages for the user so everything is fetched again.
      ding_message_purge_messages($uid);
    }

    if (!empty($lists)) {
      // Get lists which have not been checked
      // or with the oldest recorded check.
      $list_ids = array_keys($lists);

      // Fetch messages generated by the user to check.
      // Skip full channels = DING_MESSAGE_IGNORE.
      $mquery = new EntityFieldQuery();
      $mquery
        ->entityCondition('entity_type', 'message', '=')
        ->propertyCondition('type', 'new_content', '=')
        ->propertyCondition('uid', $uid, '=');
      $result = $mquery->execute();
      $messages = array();
      if (!empty($result)) {
        foreach (message_load_multiple(array_keys($result['message'])) as $message) {
          $wrapper = entity_metadata_wrapper('message', $message);
          $messages[$wrapper->field_list_id->value()] = $wrapper;
        }
      }

      // Check the lists for updates.
      if ($debug) {
        drupal_set_message(t('Number of lists to check: @count', array('@count' => count($lists))));
      }

      foreach ($lists as $list) {
        foreach ($list->getElements() as $element) {
          // Get the message handling this specific ID.
          $wrapper = isset($messages[$element->getId()]) ? $messages[$element->getId()] : NULL;
          if ($wrapper && $wrapper->field_state->value() == DING_MESSAGE_IGNORE) {
            continue;
          }

          ding_message_check_element($uid, $element, $wrapper, $debug);
        }
      }

      // Save the user check.
      ding_message_save_user_check($uid);
    }
  }
}

/**
 * Check the provided lists for any updates since last check.
 *
 * Creates a new message if there are new updates to a
 * list which has not previously been checked.
 * Otherwise the previously created message is updated with new values.
 *
 * @param int $uid
 *   Uid of the user being checked.
 * @param \DingList\DingListElement $element
 *   The element to check.
 * @param object $message
 *   The message object.
 * @param bool $debug
 *   Show debug information while checking.
 */
function ding_message_check_element($uid, DingListElement $element, $message = NULL, $debug = FALSE) {
  // Set default values.
  $has_updates = FALSE;
  $status = 0;

  // Load message if one was found.
  if (!is_null($message)) {
    // Get message entity wrapper.
    $wrapper = entity_metadata_wrapper('message', $message);
    // Get id values of the last and first element from last check.
    $first_element_id = $wrapper->field_first_element->value();
    $last_element_id = $wrapper->field_last_element->value();
    // Set status.
    $status = $wrapper->field_state->value();
    // Set new elements count.
    if ($status == DING_MESSAGE_ACTIVE) {
      $new_elements_count = $wrapper->field_new_count->value();
    }
    else {
      $new_elements_count = 0;
    }
  }
  else {
    // Set default values.
    $first_element_id = NULL;
    $last_element_id = NULL;
    $new_elements_count = 0;
  }

  switch ($element->getType()) {
    case 'follow_author':
    case 'search_query':
      $query = ding_message_build_query($element->getValue());
      $result = $query->withCount(50)->execute();
      if ($result->getNumCollections() > 0) {
        // Get the first element in the search result set.
        $collections = $result->getTingEntityCollections();
        if ($first_collection = current($collections)) {
          if (!empty($message)) {
            // If the first search result element
            // doesn't match the stored last id, update the message.
            if ($first_collection->getId() != $last_element_id) {
              // Get the result set ids.
              $collection_ids = array_map(function (TingCollection $collection) {
                return $collection->getId();
              }, $collections);
              // Get the amount of new elements since last check.
              // We assume the result set is consistently ranked by date.
              $count = array_search($last_element_id, $collection_ids);
              // Add the count to the new elements count.
              $new_elements_count += $count;
              if ($status != DING_MESSAGE_ACTIVE) {
                // If the messages has been seen,
                // set the last and first element ids.
                // Set all values for a new message to be created.
                $last_element_id = $first_collection->getId();
                $first_element_id = $collection_ids[$count - 1];
              }
              // Tell the function that there are updates to save.
              $has_updates = TRUE;
            }
          }
          else {
            // Set all values for a new message to be created.
            // First element is the first item of the search, which
            // is actually the last in the array, and last element
            // is therefore the first item in the array.
            $last_element_id = $first_collection->getId();
            $first_element = end($collections);
            $first_element_id = $first_element->getId();
            $new_elements_count += $result->getNumCollections();
            $has_updates = TRUE;
          }
        }
      }
      break;

    case 'ding_list':
      $list = ding_list_get_list($element->getValue());
      if ($list) {
        // Get the element its.
        // @TODO Previously the lists where order by weight ascending, now it's
        // descending, so the newest elements come first. We reverse this array
        // so the old logic (ascending) works. This should be rewritten in the
        // future, including other updates mentioned in older comments below.
        $elements = array_reverse(array_keys($list->getElements()));

        if (!empty($elements)) {
          // Fetch the last element for comparison
          // with the current stored last element.
          $current_last_element = end($elements);

          if (!empty($message)) {
            // New elements are identified relative to the previous
            // most recent element as a first order approximation.
            // This is not compatible with reordering and should be improved
            // in future updates where we want different stratergies per
            // channel.
            if (in_array($last_element_id, $elements)) {
              if ($last_element_id <> $current_last_element) {
                // Get the position of the last stored element.
                $last_element_position = array_search($last_element_id, $elements);
                $new_elements = array_slice($elements, $last_element_position + 1);
                // Add the count to the new elements count.
                $new_elements_count += count($new_elements);
                if ($status != DING_MESSAGE_ACTIVE) {
                  // If the messages has been seen,
                  // set the first element ids.
                  $first_element_id = reset($new_elements);
                }
                $last_element_id = $current_last_element;
                // Tell the function that there are updates to save.
                $has_updates = TRUE;
              }
            }
            // The element no longer exists in the list.
            else {
              $last_element_id = $current_last_element;
              $first_element_id = NULL;
              // No way of knowing how many has been deleted, so simply set
              // it to 1.
              $new_elements_count = 1;
              $has_updates = TRUE;
            }
          }
          elseif (count($elements)) {
            // Set all values for a new message to be created.
            $last_element_id = $current_last_element;
            $first_element_id = reset($elements);
            $new_elements_count += count($elements);
            $has_updates = TRUE;
          }
        }
      }
  }

  // Handle updates.
  if ($has_updates) {
    // If no message exists, create a new message entity.
    if (empty($message)) {
      $message = message_create('new_content', array('uid' => $uid));
    }
    if (!$new_elements_count) {
      $new_elements_count = count($elements);
    }

    if ($debug) {
      drupal_set_message(t('Fetched @new_elements_count new elements for list: @element. First element was: @first_element_id', array(
        '@new_elements_count' => $new_elements_count,
        '@element' => $element->getValue(),
        '@first_element_id' => $first_element_id,
      )));
    }

    // Limit maximum news per channel.
    $channel_max = variable_get('ding_message_channel_max', 10);
    if ($new_elements_count > $channel_max) {
      $new_elements_count = $channel_max . '+';
    }

    // Set message values.
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_list_id->set($element->getId());
    $wrapper->field_last_check->set(time());
    $wrapper->field_first_element->set($first_element_id);
    $wrapper->field_last_element->set($last_element_id);
    $wrapper->field_new_count->set(empty($message->is_new) ? $new_elements_count : 0);
    if ($new_elements_count >= $channel_max) {
      // When a channel has max new elements, lets not waste cpu checking
      // that channel until the user checks out that channel again.
      $wrapper->field_state->set(DING_MESSAGE_IGNORE);
    }
    else {
      $wrapper->field_state->set(DING_MESSAGE_ACTIVE);
    }
    // Save message.
    $wrapper->save();
  }
}

/**
 * Save when the given user was checked for updates.
 */
function ding_message_save_user_check($uid) {
  // Get previous record if any.
  $query = db_select('ding_message_check', 'c')->condition('c.uid', $uid)->fields('c', array('id'))->range(0, 1);
  $result = $query->execute();
  $id = $result->fetchField();
  if ($id) {
    // Update record.
    $num_updated = db_update('ding_message_check')->fields(array(
      'uid' => $uid,
      'time' => time(),
    ))->condition('id', $id, '=')->execute();
  }
  else {
    // Insert record.
    $id = db_insert('ding_message_check')->fields(array('uid', 'time'))->values(array(
      'uid' => $uid,
      'time' => time(),
    ))->execute();
  }
}

/**
 * Implements template_preprocess_ding_list_element().
 */
function ding_message_preprocess_ding_list_element(&$variables) {
  $element = $variables['element'];

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'message', '=')
    ->propertyCondition('type', 'new_content', '=')
    ->fieldCondition('field_list_id', 'value', $element->getId(), '=')
    ->fieldCondition('field_state', 'value', DING_MESSAGE_CLOSED, '!=')
    ->range(0, 1);
  $result = $query->execute();

  if ($result) {
    $message = message_load(current($result['message'])->mid);
    $message_wrapper = entity_metadata_wrapper('message', $message);

    // Alter the link.
    $link_query = array(
      'message' => $message_wrapper->field_first_element->value(),
      'midc' => $message_wrapper->getIdentifier(),
    );

    switch ($element->getType()) {
      case 'follow_author':
      case 'search_query':
        $link_query['size'] = 50;
        break;
    }

    if (isset($variables['content']['link'])) {
      if (!isset($variables['content']['link']['#options']['query'])) {
        $variables['content']['link']['#options']['query'] = array();
      }
      $variables['content']['link']['#options']['query'] += $link_query;
    }

    // Add message.
    $variables['content']['message'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('ding-message')),
      'label' => array(
        '#theme' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => array('class' => array('ding-message-label')),
        '#value' => t('New:', array(), array('context' => 'ding_message')),
      ),
      'view' => $message->view(),
    );
  }

  if (isset($_GET['message'])) {
    $variables['content']['#attached']['js'] = array(drupal_get_path('module', 'ding_message') . '/ding_message.js');
    $variables['attributes_array']['data-ting-object-id'] = $element->getId();
    $variables['classes_array'][] = 'ding-message-item';
  }
}

/**
 * Render a notification.
 */
function ding_message_get_ding_list_notification($list) {
  $output = '';

  if ($list->allowed(DING_LIST_OPERATION_FOLLOW) && !empty($list->getElements())) {

    $result = ding_message_get_update_count($list->getElements());
    // If a result was found, render a message with the total amount.
    if ($result) {
      $output = $result;
    }
  }

  return $output;
}

/**
 * Load sum of update notifications.
 *
 * @param array $items
 *   Array of lists to check for notification counts.
 *
 * @return array
 *   sum of available update notifications.
 */
function ding_message_get_update_count(array $items) {
  // Query for messages with updates.
  $query = db_select('field_data_field_new_count', 'c');
  $query->join('field_data_field_list_id', 'e', 'c.entity_id = e.entity_id');
  $query->join('field_data_field_state', 's', 'c.entity_id = s.entity_id');
  $query->condition('e.field_list_id_value', array_keys($items), 'IN');
  $query->condition('s.field_state_value', DING_MESSAGE_CLOSED, '!=');
  $query->fields('c', array('field_new_count_value'));
  $query->addExpression('SUM(c.field_new_count_value)', 'count');
  $result = $query->execute()->fetchField(1);
  return $result;
}

/**
 * Implements hook_preprocess_ting_object().
 */
function ding_message_preprocess_ting_object(&$vars) {
  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];
  $entity = $vars['elements']['#object'];
  if ($entity_type === 'ting_collection') {
    if (isset($_GET['message'])) {
      // If the user is comming from a notification link add js,
      // css and html attributes.
      drupal_add_js(drupal_get_path('module', 'ding_message') . '/ding_message.js');
      $vars['attributes_array']['data-ting-object-id'] = $entity->ding_entity_id;
      $vars['classes_array'][] = 'ting-object-collection';
    }
  }
}

/**
 * Build a ting search query.
 *
 * @param string $query_string
 *   The url query string for which to build a search query.
 *
 * @return \Ting\Search\TingSearchRequest
 *   A search query object corresponding to the search string.
 */
function ding_message_build_query($query_string) {
  $search_query = ting_start_query();
  if (strpos($query_string, '?')) {
    list($path, $query) = preg_split('/\?/', urldecode($query_string), 2);
    parse_str($query, $query_data);
  }
  else {
    $path = $query_string;
  }

  if (!empty($path)) {
    $search_query = $search_query->withFullTextQuery($path);
  }

  if (!empty($query_data['facets']) && is_array($query_data['facets'])) {
    foreach ($query_data['facets'] as $facet) {
      list($facet_name, $facet_value) = explode(':', $facet, 2);
      $search_query = $search_query->withFieldFilter($facet_name, $facet_value);
    }
  }

  // Return the new query.
  return $search_query;
}

/**
 * Menu callback for message clicks.
 *
 * When a notification link is clicked the messages state is set to closed.
 */
function ding_message_change_status($mid = NULL) {
  if (empty($mid)) {
    // Message id from post variables.
    $mid = $_POST['mid'];
  }

  // Load message.
  $message = message_load($mid);
  if (is_object($message)) {
    // Get message wrapper.
    $wrapper = entity_metadata_wrapper('message', $message);
    // Set state to closed.
    $wrapper->field_state->set(DING_MESSAGE_CLOSED);
    // Save new state.
    $wrapper->save();

    // Clear cache (to update the header) if ding_notifications is enabled.
    if (module_exists('ding_notifications')) {
      ding_notifications_clear_cache();
    }
  }
}

/**
 * Implements hook_init().
 */
function ding_message_init() {
  if (!empty($_GET['midc'])) {
    ding_message_change_status($_GET['midc']);
  }
}

/**
 * This function is for testing purposes.
 *
 * Deletes all messages for a specific uid.
 */
function ding_message_purge_messages($uid = NULL) {
  // Base query for both purging methods.
  $base_query = new EntityFieldQuery();
  $base_query->entityCondition('entity_type', 'message', '=')->propertyCondition('type', 'new_content', '=');
  if ($uid !== NULL) {
    $base_query->propertyCondition('uid', $uid);
  }
  $result = $base_query->execute();

  if (!empty($result)) {
    $purge_messages = $result['message'];
    if (!empty($purge_messages)) {
      message_delete_multiple(array_keys($purge_messages));
    }
  }
}

/**
 * Function get count.
 */
function ding_message_get_message_count($uid = NULL) {
  if ($uid === NULL) {
    global $user;
    $uid = $user->uid;
  }

  $query = db_select('field_data_field_new_count', 'c');
  $query->join('field_data_field_state', 's', 'c.entity_id = s.entity_id');
  $query->join('message', 'm', 'c.entity_id = m.mid');
  $query->condition('m.uid', $uid, '=');
  $query->condition('s.field_state_value', array(DING_MESSAGE_CLOSED), 'NOT IN');
  $query->fields('c', array('field_new_count_value'));
  $query->addExpression('SUM(c.field_new_count_value)', 'count');
  $result = $query->execute()->fetchField(1);

  return $result;
}

<?php

/**
 * @file
 * Ding interest suggestions based on loan history
 */

include_once 'ding_interests_by_history.features.inc';
// Define the maximum items to extract from the users loan history.
define('DING_INTERESTS_BY_HISTORY_MAX_AMOUNT', 20);

/**
 * Admin form.
 */
function ding_interests_by_history_interaction_form($form, &$form_state) {
  $form['ding_interests_by_history_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Count'),
    '#description' => t('Enter the amount of items to display in the ding interaction streamer.'),
    '#default_value' => variable_get('ding_interests_by_history_count', 3),
  );
  return system_settings_form($form);
}

/**
 * Get terms selected by the library staff.
 *
 * Retrieve a list of taxonomy terms (tags),
 * which have been selected as a possible interest.
 *
 * @return array
 *   An array of term names.
 */
function ding_interests_by_history_get_selected_terms() {
  // Get the "Selected" term.
  // "Udvalgt" term is created in ding_interests module and is assigned to
  // each subject.
  $selected_term = variable_get('ding_interests_selected_tid');
  $selected_term_id = array_keys($selected_term);

  // Get tags vocabulary.
  $tags_vocabulary = taxonomy_vocabulary_machine_name_load('ding_content_tags');
  // Get selected terms.
  $node_query = new EntityFieldQuery();
  $node_query->entityCondition('entity_type', 'taxonomy_term')->propertyCondition('vid', $tags_vocabulary->vid)->fieldCondition('field_status', 'tid', $selected_term_id[0]);
  $result = $node_query->execute();

  $terms = array();
  if ($result) {
    $terms = array_keys($result['taxonomy_term']);
  }
  // Get users interests.
  $list = ding_list_get_list(DING_INTERESTS_LIST);
  $elements = ding_list_load_elements($list);
  $interests = array();
  foreach ($elements as $element) {
    $term = taxonomy_get_term_by_name($element->field_search_title['und'][0]['value']);
    $tid = key($term);
    $interests[] = $tid;
  }

  // Remove the terms already selected by the user from the available terms.
  $terms = array_diff($terms, $interests);

  // Load terms to get their names for a comparison with the subjects,
  // genres and types of the ting objects.
  $terms = taxonomy_term_load_multiple($terms);
  // List terms by tid.
  $term_names = array();
  foreach ($terms as $tid => $term) {
    $term_names[$tid] = strtolower($term->name);
  }

  return $term_names;
}

/**
 * Get terms which the user might be interested in based on their loan history.
 *
 * @return array
 *   The returned array contains a list of ding_content_tags,
 *   which correspond to loans previous made by the user.
 *   These elements are keyed by their tid and their value is the term name.
 */
function ding_interests_by_history_suggested_terms() {
  if (!ding_user_consent_has_consent('loan_history_store')) {
    return array();
  }
  // Get available terms. Return empty if none are recommended.
  $term_names = ding_interests_by_history_get_selected_terms();
  if (empty($term_names)) {
    return array();
  }

  // Reverse the list to get the most recent first.
  $object_ids = array_reverse(ding_interests_by_history_get_loan_entities());
  
  $object_ids = array_slice($object_ids, 0, DING_INTERESTS_BY_HISTORY_MAX_AMOUNT);
  // Load ting objects to access their data.
  $ting_objects = ding_entity_load_multiple($object_ids);

  // Merge subjects, genres and types into array for comparison with tag list.
  $historical_terms = array();
  foreach ($ting_objects as $tojb) {
    $subject = $tojb->getSubjects();
    $historical_terms = array_merge($historical_terms, $subject);

    // $type = $tojb->getType();
    // $historical_terms = array_merge($historical_terms, array($type));
    $record = $tojb->getRecord();
    if (isset($record['dc:subject']['dkdcplus:genre'])) {
      $genre = $record['dc:subject']['dkdcplus:genre'];
      $historical_terms = array_merge($historical_terms, $genre);
    }
  }

  // Get only unique elements.
  $unique_terms = array_count_values($historical_terms);

  return $unique_terms;
}

/**
 * Get the users loan history entities.
 *
 * @return array
 *   An array of TingObject ids.
 */
function ding_interests_by_history_get_loan_entities() {
  $object_ids = array();
  // Get user loan history.
  $user_history_list = ding_list_get_lists(DING_LIST_TYPE_LOAN_HISTORY);
  if (ding_user_consent_has_consent('loan_history_store') && !empty($user_history_list)) {
    $history_list = current($user_history_list);

    // @TODO: Limit this list
    $list_elements = ding_list_load_elements($history_list);
    // Extract all ting object ids from the loan history.
    foreach ($list_elements as $element) {
      $element_id = ding_list_get_list_element_value($element);
      // @TODO: Remove once proper agency is secured.
      $conv_id = ding_list_convert_cql($element_id);
      $object_ids[] = $conv_id;
    }
  }
  return $object_ids;
}

/**
 * Sort terms by frequency in the loan terms.
 *
 * @param array $terms
 *   An array of term names, keyed by their tid.
 * @param array $loan_terms
 *   An array of TingObject subjects, genres and types.
 *
 * @return array
 *   The ordered array of terms.
 */
function ding_interests_by_history_sort_terms(array $terms, array $loan_terms) {
  $result = array();
  foreach ($terms as $tid => $term) {
    if (isset($loan_terms[$term])) {
      $result[$tid] = array(
        'name' => $term,
        'count' => $loan_terms[$term],
      );
    }
    else {
      $result[$tid] = array(
        'name' => $term,
        'count' => 1,
      );
    }
  }
  return $result;
}

/**
 * Define site permissions in code.
 *
 * Create a secure_permissions_data module directory and place this function
 * in secure_permissions_data.module.
 *
 * @param string $role
 *   The role for which the permissions are being requested.
 *
 * @return array
 *   An array defining all the permissions for the site.
 */
function ding_interests_by_history_secure_permissions($role) {
  $permissions = array();
  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_ding_interaction_view().
 *
 * Look up terms from previous loan history.
 * Map Brønd terms to local taxonomy terms.
 * Recommend terms not already presented as interests to the user.
 */
function ding_interests_by_history_ding_interaction_view() {
  if (ding_user_consent_has_consent('loan_history_store')) {
  
    // Terms suggested by the library are required.
    $loan_terms = ding_interests_by_history_suggested_terms();
    if (empty($loan_terms)) {
      return '';
    }

    // Fetch the list of current interest. Both likes and dislikes.
    $interests_list = ding_list_get_list(DING_INTERESTS_LIST);

    // Using db_query here, so we can nest joins.
    $result = db_query('SELECT
  td.name, td.tid
FROM
  taxonomy_term_data td
  LEFT JOIN
  (field_data_field_value fv
  JOIN field_data_field_list_objects flo ON (fv.entity_id = flo.field_list_objects_target_id AND flo.entity_id = :list_id)) ON (td.tid = fv.field_value_value)
WHERE
  td.vid = 2
  AND td.name IN (:names)
  AND fv.field_value_value IS NULL
', array(':list_id' => $interests_list->id, ':names' => array_keys($loan_terms)));

    $loan_terms = array_fill_keys(array_keys($loan_terms), 0);

    // Merge the tid onto the loan_terms.
    $buffer = array();
    foreach ($loan_terms as $key => $loan_term) {
      $buffer[strtoupper($key)] = array($key, $loan_term);
    }
    foreach ($tids as $key => $loan_term) {
      $buffer[strtoupper($key)] = array($key, $loan_term);
    }

    $loan_terms = array();
    
    // Now pick two terms.
    $buffer = array_slice($buffer, 0, 2);
    foreach ($buffer as $val) {
      $loan_terms[$val[0]] = $val[1];
    }

    // We have taken the terms from Brønden.
    // Create missing local terms so we can link to their landing pages.
    $vocab = taxonomy_vocabulary_machine_name_load('ding_content_tags');
    foreach ($loan_terms as $name => & $tid) {
      if ($tid === 0) {
        $term = (object) array(
          'name' => $name,
          'vid' => $vocab->vid,
        );
        taxonomy_term_save($term);
        $tid = $term->tid;
      }
    }

    // Create a render array of the two terms.
    $terms = taxonomy_term_load_multiple($loan_terms);
    $items = taxonomy_term_view_multiple($terms, 'teaser');
    $items = $items['taxonomy_terms'];
    
    // By default a term will not be displayed if it's not featured by the
    // library.
    // This way we can force it to display anyway.
    foreach ($items as $key => &$item) {
      if (is_numeric($key)) {
        $item['show_anyway'] = TRUE;
      }
    }

    // Wrap the array and print the interaction content.
    $view = '<div class="terms terms-interaction"><div class="term">' . render($items) . '</div></div>';
    return '<div class="ding-interests-by-history">' . $view . '</div>';
  }
  return '';
}

/**
 * Implements hook_ding_interaction_info().
 */
function ding_interests_by_history_ding_interaction_info() {
  $active = (user_is_logged_in() && ding_user_consent_has_consent('loan_history_store'));
  return array(
    'title' => t('Based on your loan history we suggest subjects'),
    'active' => $active,
    'settings' => 'ding_interests_by_history_interaction_form',
    'more_title' => t('Read more about library topics'),
    'more_url' => "ding/interests/overview",
  );
}

/**
 * Compare count of a and b.
 */
function ding_interests_by_history_compare_order($a, $b) {
  return $a['count'] < $b['count'];
}

<?php
/**
 * @file
 * Ding user profile completion.
 *
 * Ding user complete was a stand alone module to display how many percent
 * of available features a user had explored. Like LinkedIn presents how many
 * percent the user profile is complete.
 *
 * This was for many reasons discarded and transformed into Ding Interaction
 * plugins that presents the users for all sorts of suggestions based on
 * features that are not yet used by the user.
 *
 * Example:
 *   The user has not yet rated any materials.
 *   The "Rate materials and get better suggestions" plugin is activated
 *   and is presented in rotation with other Ding Interaction content
 */

/**
 * Implements hook_menu().
 */
function ding_user_complete_menu() {
  $items = array();

  $items['admin/config/ding/user-complete'] = array(
    'title' => 'Ding user complete settings',
    'description' => 'Get an overview of the activated elements implementing user completeness points',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_complete_admin_overview'),
    'access arguments' => array('administer personalisation'),
    'file' => 'ding_user_complete.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_user_complete_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function ding_user_complete_theme($existing, $type, $theme, $path) {
  return array(
    'user_complete_barometer' => array(
      'variables' => array(
        'procent' => NULL,
        'markup' => NULL,
        'barometer' => FALSE,
      ),
      'path' => $path . '/theme',
      'template' => 'user-complete-barometer',
    ),
  );
}

/**
 * Defines a hook that allow other modules to create user completeness points.
 */
function ding_user_complete_hook() {
  // Get all point statuses provided by hook_user_complete_points()
  $modules = module_invoke_all('ding_user_complete');

  if (empty($modules)) {
    // Default implementation, will tell the system that the hook is
    // not implemented.
    $modules = array(
      'not_set' => array(
        'title' => 'ding_user_complete_not_set',
        'points' => 1,
        'completed' => FALSE,
      ),
    );
  }

  return $modules;
}

/**
 * Gather completeness from all plugins.
 */
function ding_user_complete_get_content() {
  $status = ding_user_complete_hook();
  $points = variable_get('ding_user_complete_weights');
  $active = variable_get('ding_user_complete_callbacks');

  // Set parameters for use in the template.
  $vars = array(
    'total' => 0,
    'completed' => 0,
    'markup' => array(),
  );

  foreach ($status as $id => $value) {
    if ($active[$id]) {
      $vars['total'] += $points[$id];
      if ($value['completed']) {
        $vars['completed'] += $points[$id];
      }
      else {
        // Add markup to show randomly if not completed.
        $vars['markup'][$id] = array(
          'title' => $value['title'],
          'markup' => $value['markup'],
        );
      }
    }
  }

  return $vars;
}

/**
 * Implements hook_ding_interaction_view().
 */
function ding_user_complete_ding_interaction_view() {
  if (user_is_logged_in()) {
    $data = ding_user_complete_get_content();
    if (empty($data['markup'])) {
      return '';
    }
    // Show random interaction:
    $markup = $data['markup'][array_rand($data['markup'], 1)];
    if (!$markup['markup']) {
      return '';
    }

    return array(
      'title' => $markup['title'],
      'data' => theme('user_complete_barometer', array('markup' => $markup['markup'])),
    );
  }
  return '';
}

/**
 * Implements hook_ding_interaction_info().
 */
function ding_user_complete_ding_interaction_info() {
  $active = user_is_logged_in();
  return array(
    'title' => t('Did you know?'),
    'css_class' => 'complete-info',
    'active' => $active,
  );
}

<?php
/**
 * @file
 * Ting token implements tokens for inline rendering of ting_objects
 */

/**
 * Implements hook_preprocess_page().
 */
function ting_token_preprocess_page(&$variables) {
  // TODO Is adding all these libraries to all pages really necessary?
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'drupal.form');
  drupal_add_library('system', 'jquery.form');
  // TODO Typo?
  drupal_add_library('system', 'druapl.progress');
  drupal_add_library('system', 'drupal.textarea');
  drupal_add_js(
    array(
      'ting_token' => array(
        'viewMode' => variable_get('ting_token_view_mode', 'teaser'),
      ),
    ),
    'setting'
  );
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function ting_token_wysiwyg_include_directory($type) {
  return $type;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ting_token_form_ting_admin_ting_settings_alter(&$form, &$form_state, $form_id) {
  $form['ting_token'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ting token settings'),
    '#tree' => FALSE,
  );
  $tingobj = entity_get_info('ting_object');
  $options = array();
  foreach ($tingobj['view modes'] as $key => $value) {
    $options[$key] = $value['label'];
  }
  $form['ting_token']['ting_token_view_mode'] = array(
    '#type' => 'select',
    '#title' => t('Ting token view mode'),
    '#description' => t('Select the view mode tokens should display with.'),
    '#options' => $options,
    '#default_value' => variable_get('ting_token_view_mode', 'teaser'),
  );
}

/**
 * Implements hook_menu().
 */
function ting_token_menu() {
  $items = array();
  $items['ting_token/insert/nojs'] = array(
    'page callback' => 'ting_token_get_insert_form',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ting_token/insert/ajax'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['ting_token/insert/nojs'];

  $items['ting_token/insert/nojs/%'] = array(
    'page callback' => 'ting_token_get_insert_form',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ting_token/insert/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['ting_token/insert/nojs/%'];
  return $items;
}

/**
 * Retrive the insert form.
 */
function ting_token_get_insert_form($ajax, $ids = '') {
  $is_ajax = $ajax === 'ajax';
  $form = drupal_get_form('ting_token_insert_form', $ids);
  if ($is_ajax) {
    $form = drupal_render($form);
    // Generate the settings:
    // TODO Could this not be solved through drupal_get_js()?
    $settings = '';
    $javascript = drupal_add_js();
    if (isset($javascript['settings'], $javascript['settings']['data'])) {
      $settings = '<script type="text/javascript">jQuery.extend(Drupal.settings, ';
      $settings .= drupal_json_encode(call_user_func_array('array_merge_recursive', $javascript['settings']['data']));
      $settings .= ');</script>';
    }
    // TODO Why is calling die here necessary? We have the ajax_deliver()
    // callback set in hook_menu().
    die($form . $settings);
  }
  else {
    return $form;
  }
}

/**
 * Insert token form.
 */
function ting_token_insert_form($form, &$form_state) {
  drupal_add_library('system', 'ui.dialog');
  $form['#tree'] = TRUE;
  if (empty($form_state['num_objects'])) {
    $form_state['num_objects'] = 1;
  }
  $ids = NULL;
  $args = $form_state['build_info']['args'];
  if (isset($args[0])) {
    $ids = explode(',', $args[0]);
    if ($form_state['num_objects'] == 1) {
      $form_state['num_objects'] = count($ids);
    }
  }
  $form['objects'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ting objects'),
    '#prefix' => '<div id="ting-token-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  for ($i = 0; $i < $form_state['num_objects']; $i++) {
    $form['objects'][$i]['ting_object'] = array(
      '#type' => 'textfield',
      '#title' => t('Ting id'),
      // TODO This seems odd. I could not find any declaration of col1 in the
      // codebase?
      '#prefix' => '<div class="col1">',
      '#suffix' => '</div>',
      '#default_value' => isset($form_state['values'][$i]) ? $form_state['values'][$i]['ting_object'] : '',
    );
    if (isset($ids[$i])) {
      $form['objects'][$i]['ting_object']['#default_value'] = $ids[$i];
    }
  }

  $form['objects']['add_item'] = array(
    '#type' => 'submit',
    '#value' => t('Add another'),
    '#submit' => array('ting_token_add_more_add_one'),
    // See the examples in ajax_example.module for more details on the
    // properties of #ajax.
    '#ajax' => array(
      'callback' => 'ting_token_add_more_callback',
      'wrapper' => 'ting-token-fieldset-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  if ($form_state['num_objects'] > 1) {
    $form['objects']['remove_item'] = array(
      '#type' => 'submit',
      '#value' => t('Remove one'),
      '#submit' => array('ting_token_add_more_remove_one'),
      '#ajax' => array(
        'callback' => 'ting_token_add_more_callback',
        'wrapper' => 'ting-token-fieldset-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array(
      'class' => array('form-save-ids'),
    ),
  );

  return $form;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function ting_token_add_more_callback($form, $form_state) {
  return $form['objects'];
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function ting_token_add_more_add_one($form, &$form_state) {
  $form_state['num_objects']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function ting_token_add_more_remove_one($form, &$form_state) {
  if ($form_state['num_objects'] > 1) {
    $form_state['num_objects']--;
  }
  $form_state['rebuild'] = TRUE;
}

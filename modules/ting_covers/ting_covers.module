<?php
/**
 * @file
 * Get covers for ting objects.
 *
 * This module provide functionality and page callbacks for retrieving covers
 * for Ting objects and collections
 */

// Default cache lifetime for covers (24 timer).
define('TING_COVERS_DEFAULT_CACHE_LIFETIME', 86400);
define('TING_COVERS_MAX_SIZE', 1200);

// Load field module hooks.
module_load_include('inc', 'ting_covers', 'ting_covers.field');

/**
 * Implements hook_menu().
 */
function ting_covers_menu() {
  $items = array();

  $items['ting/covers'] = array(
    'title' => 'Retreives cover for Ting objects',
    'page callback' => 'ting_covers_objects',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'ting_covers.pages.inc',
  );

  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  $items[$directory_path . '/styles/%image_style/public/ting/covers'] = array(
    'title' => 'Generate image style',
    'page callback' => 'ting_cover_deliver',
    'page arguments' => array(count(explode('/', $directory_path)) + 1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ting_covers.pages.inc',
  );

  $items['admin/config/ting/covers'] = array(
    'title' => 'Covers',
    'description' => 'Configure how covers are handled.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_covers_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_covers.admin.inc',
  );

  $items['admin/config/ting/covers/setttings'] = array(
    'title' => 'Settings',
    'description' => 'Configure how covers are handled.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ting_covers_theme() {
  return array(
    'ting_object_cover' => array(
      'render element' => 'elements',
      'file' => 'ting_covers.theme.inc',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function ting_covers_cron() {
  _ting_covers_delete_old_files($_SERVER['REQUEST_TIME'] - variable_get('ting_covers_cache_lifetime', TING_COVERS_DEFAULT_CACHE_LIFETIME));
}

/**
 * Template preprocessor.
 */
function ting_covers_preprocess_ting_object(&$variables) {
  /*
   * Add the image style as a class, allowing templates to react on the size.
   */
  if (isset($variables['elements']['ting_cover'][0])) {
    $variables['classes_array'][] = drupal_html_class('imagestyle-' . $variables['elements']['ting_cover'][0]['#image_style']);
  }
}

/**
 * Delete ting covers files.
 *
 * @param int $time
 *   Timestamp where older files will be deleted. Omit or set to NULL to delete
 *   all files.
 */
function _ting_covers_delete_old_files($time = NULL) {
  // Collect potential locations of cover folders.
  $files_dir = file_default_scheme() . '://';
  $image_dirs = array($files_dir);

  $styles_dir = $files_dir . 'styles';
  foreach (scandir($styles_dir) as $style_dir) {
    $style_dir = $styles_dir . DIRECTORY_SEPARATOR . $style_dir . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR;
    if (is_dir($style_dir)) {
      $image_dirs[] = $style_dir;
    }
  }

  // Collect cover files.
  $cover_files = array();
  foreach ($image_dirs as $uri) {
    $ting_covers_dir = $uri . 'ting' . DIRECTORY_SEPARATOR . 'covers';
    if (is_dir($ting_covers_dir)) {
      $cover_files = array_merge($cover_files, file_scan_directory($ting_covers_dir, "/./"));
    }
  }

  // Delete obsolete files.
  foreach ($cover_files as $file) {
    if (!$time || (filemtime($file->uri) < $time)) {
      file_unmanaged_delete($file->uri);
      // Delete image cache derivatives.
      image_path_flush($file->uri);
    }
  }
}

/**
 * Return the path to the cover of the object.
 *
 * The filename is the ID base64 encoded, so we can reverse it later.
 */
function ting_covers_object_path($object_id) {
  return file_default_scheme() . '://ting' . DIRECTORY_SEPARATOR . 'covers' . DIRECTORY_SEPARATOR . base64_encode($object_id) . '.jpg';
}

/**
 * Get covers for an array of ids.
 *
 * @param array $requested_covers
 *   Ids of entities to return covers for.
 *
 * @return array
 *   Array of id => file path for found covers.
 */
function ting_covers_get(array $requested_covers) {
  $entities = array();
  $covers = array();

  // Create array of loaded entities for passing to hooks.
  foreach ($requested_covers as $id) {
    // Ensure that the id at least seems valid.
    if (!mb_check_encoding($id, "UTF-8")) {
      continue;
    }

    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $id, FALSE)) {
      continue;
    }

    // If we we already have a valid cover image, use it.
    $path = ting_covers_object_path($id);
    if (file_exists($path)) {
      $covers[$id] = $path;
      continue;
    }

    // Queue for fetching by hook.
    $entities[$id] = ding_entity_load($id);
  }

  // Fetch covers by calling hook.
  foreach (module_implements('ting_covers') as $module) {
    foreach (module_invoke($module, 'ting_covers', $entities) as $id => $uri) {
      if ($uri && $path = _ting_covers_get_file($id, $uri)) {
        $covers[$id] = $path;
      }
      // Remove elements where a cover has been found, or suppressed.
      unset($entities[$id]);
    }
  }

  // Mark all remaining as not found in cache.
  foreach ($entities as $id => $entity) {
    cache_set('ting_covers:' . $id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
  }

  return $covers;
}

/**
 * Moves/downloads an URI into the cover cache.
 *
 * @param string $id
 *   Ting entity id.
 * @param string $uri
 *   URI of file or local path.
 */
function _ting_covers_get_file($id, $uri) {
  if (!($url = parse_url($uri))) {
    // Seriously malformed, ignore it.
    return FALSE;
  }

  // Flat paths don't get a scheme.
  if (!isset($url['scheme']) && file_exists($uri)) {
    $url['scheme'] = 'file';
  }

  $path = ting_covers_object_path($id);

  switch ($url['scheme']) {
    case 'http':
    case 'https':
      if (ting_covers_fetch_image($path, $uri)) {
        return $path;
      }
      break;

    case 'public':
    case 'private':
    case 'file':
      if (file_unmanaged_mv($uri, $path)) {
        return $path;
      }
  }

  return FALSE;
}


/**
 * Helper function to fetch and save a cover image file.
 *
 * Cover fetching modules should use this if fetching the cover is a simple GET
 * request.
 *
 * @param string $filename
 *   File name, including its path within Drupal's file folder.
 * @param string $image_url
 *   URL for the source image file.
 *
 * @return mixed
 *   A file object or FALSE on error.
 *
 * @see image_style_create_derivative()
 */
function ting_covers_fetch_image($filename, $image_url) {
  $result = drupal_http_request($image_url);

  // Bail if the HTTP request failed.
  if ($result->code != 200) {
    return FALSE;
  }

  // Get the folder for the final location of this preset.
  $directory = dirname($filename);

  // Build the destination folder tree if it doesn't already exist.
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('ting_covers', 'Failed to create directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
    return FALSE;
  }

  $file = file_unmanaged_save_data($result->data, $filename, FILE_EXISTS_REPLACE);
  // Sometimes we get images in print quality, which makes imagecache run out
  // of memory in the attempt to resize it. So we check the image size and
  // scale it down to a more manageable size using the Imagemagick shell
  // command which gets around the memory limit.
  if ($file) {
    $realpath = drupal_realpath($filename);
    $size = getimagesize($realpath);
    if ($size[0] > TING_COVERS_MAX_SIZE || $size[1] > TING_COVERS_MAX_SIZE) {
      exec('convert ' . $realpath . ' -resize ' . TING_COVERS_MAX_SIZE . 'x ' .
           $realpath . '.tmp', $output, $rc);
      // If successful, replace original image with scaled version.
      if ($rc == 0) {
        rename($realpath . '.tmp', $realpath);
      }
    }

    return $file;
  }

  return FALSE;
}

/**
 * Return cover information relatively information given in parameter.
 *
 * @param array $cover_data
 *   Info about cover.
 *
 * @return array
 *   With covers local id, url and style.
 */
function ting_covers_prepare_covers(array $cover_data) {
  $covers = array();
  $image_styles = array();
  $missing_images_local_ids = array();

  foreach ($cover_data as $cover_info) {
    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $cover_info['local_id'], FALSE)) {
      break;
    }

    $path = ting_covers_object_path($cover_info['local_id']);
    if (file_exists($path)) {
      // If we we already have a valid cover image w/o style then just use it.
      $covers[] = array(
        'local_id' => $cover_info['local_id'],
        'image_style' => $cover_info['image_style'],
        'url' => image_style_url($cover_info['image_style'], $path),
      );
    }
    else {
      // Mark the image for retrieval.
      $missing_images_local_ids[] = (object) array(
        'localIdentifier' => $cover_info['local_id'],
        'libraryCode' => $cover_info['owner_id'],
      );

      // Image style to match later one.
      $image_styles[$cover_info['local_id']] = $cover_info['image_style'];
    }
  }

  // Try to download the missing images.
  try {
    $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));

    // Local ids = Faust numbers. Library object identifiers can be confusing.
    $additional_informations = $service->getByLocalIdentifier($missing_images_local_ids);
    foreach ($missing_images_local_ids as $local_id) {
      // Try to extract the image url from the result.
      $source_url = FALSE;
      if (isset($additional_informations[$local_id->localIdentifier]) && $ai = $additional_informations[$local_id->localIdentifier]) {
        if ($ai->detailUrl) {
          $source_url = $ai->detailUrl;
        }
        elseif ($ai->thumbnailUrl) {
          $source_url = $ai->thumbnailUrl;
        }
      }

      // No cover image found? Cache this for future reference to avoid
      // unnecessary requests.
      if (!$source_url) {
        cache_set('ting_covers:' . $local_id->localIdentifier, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
        continue;
      }

      // Try to download the image locally.
      if ($file = _ting_covers_pages_fetch_image(ting_covers_object_path($local_id->localIdentifier), $source_url)) {
        // Generate a path corresponding to the downloaded image, styled.
        $covers[] = array(
          'local_id' => $local_id->localIdentifier,
          'image_style' => $image_styles[$cover_info['local_id']],
          'url' => image_style_url($image_styles[$cover_info['local_id']], $file),
        );
      }
    }
  }
  catch (Exception $e) {
    watchdog('ting_covers', 'Unable to retrieve covers from ADDI: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
  }

  return $covers;
}

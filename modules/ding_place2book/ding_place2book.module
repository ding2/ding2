<?php
/**
 * @file
 * Represents hooks implementations and definitions.
 */

use P2b\P2b;

include_once 'ding_place2book.features.inc';
require_once 'ding_place2book.fields.inc';
require_once "lib/p2b/P2b.php";

/**
 * Implements hook_image_default_styles().
 */
function ding_place2book_image_default_styles() {
  $styles = array();

  $styles['ding_place2book_kultunaut_square'] = array(
    'name' => 'ding_place2book_kultunaut_square',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 120,
          'height' => 120,
        ),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_libraries_info().
 */
function ding_place2book_libraries_info() {
  return array(
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promises' => array(
      'name' => 'Guzzle promises library',
      'vendor url' => 'https://github.com/guzzle/promises',
      'download url' => 'https://github.com/guzzle/promises',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr7' => array(
      'name' => 'PSR-7 message implementation',
      'vendor url' => 'https://github.com/guzzle/psr7',
      'download url' => 'https://github.com/guzzle/psr7',
      'version' => '1.3',
      'xautoload' => function ($adapter) {
      $adapter->composerJson('composer.json');
      },
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ding_place2book_permission() {
  return array(
    'administer place2book settings' => array(
      'title' => t('Administer place2book settings'),
      'description' => t('Perform administration tasks for ding_place2book.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ding_place2book_menu() {
  $items = array();

  $items['admin/config/ding/place2book'] = array(
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_service_admin_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['admin/config/ding/place2book/settings'] = array(
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_admin_settings_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['admin/config/ding/place2book/defaults'] = array(
    'title' => 'Defaults',
    'description' => 'Configuration form for P2b default values',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_defaults_admin_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['admin/config/ding/place2book/mappings'] = array(
    'title' => 'Mappings',
    'description' => 'Mappings for P2b service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_mappings_admin_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['ding/p2b/event_maker/%/event/%'] = array(
    'page callback' => 'ding_place2book_get_event_state',
    'page arguments' => array(3, 5),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_place2book_theme($existing, $type, $theme, $path) {
  return array(
    'ding_p2b_prices_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_node_view_alter().
 */
function ding_place2book_node_view_alter(&$build) {
  if ($build['#entity_type'] == 'node' && $build['#bundle'] == 'ding_event') {
    if (!empty($build['field_place2book'])) {
      $place2book = field_get_items('node', $build['field_place2book']['#object'], 'field_place2book');
      list($event_id, $event_maker_id) = array_values($place2book[0]);
      try {
        $p2b = ding_place2book_instance();
        $prices = $p2b->getPrices($event_maker_id, $event_id);
        $output = '';
        foreach ($prices as $price) {
          $currency = variable_get('ding_event_currency_type', 'Kr');
          $value = $price->value ? "{$price->value} {$currency}" : t('Free');
          $output .= "<p><i class='icon-tag'></i>{$price->name} {$value}</p>";
        }
        $build['place2book_event_prices'] = $output;
      }
      catch (Exception $ex) {
        watchdog_exception('ding_place2book', $ex);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ding_place2book_node_delete($node) {
  if ($node->type == 'ding_event') {
    $field_place2book = field_get_items('node', $node, 'field_place2book');
    if (!empty($field_place2book)) {
      list($event_id, $event_maker_id) = array_values($field_place2book[0]);
      try {
        $p2b = ding_place2book_instance();
        $prices = $p2b->getPrices($event_maker_id, $event_id);
        foreach ($prices as $price) {
          $p2b->deletePrice($event_maker_id, $event_id, $price->id);
        }
      }
      catch (Exception $ex) {
        watchdog_exception('ding_place2book', $ex, t('Error appeared on deleting node: nid - :nid, title - :title.', array(
          ':nid' => $node->nid,
          ':title' => $node->title,
        )));
      }
      $p2b->deleteEvent($event_maker_id, $event_id);
    }
  }
}

/**
 * Creates and initializes instance of P2b class.
 *
 * @return object
 *   Instance of P2b class.
 */
function ding_place2book_instance() {
  $p2b = drupal_static(__FUNCTION__, NULL);
  if (empty($settings)) {
    $settings = variable_get('ding_place2book_settings', array());
    $p2b = P2b::getInstance($settings);
  }

  return $p2b;
}

/**
 * Collects all needed information for request from node.
 *
 * @param object $node
 *   Node object.
 * @param array $additional
 *   Additional settings.
 *
 * @return array
 *   Array with need for request data.
 */
function ding_p2b_format_options($node, array $additional) {
  $options = array(
    "name" => array('title'),
    "description_short" => array(
      'field_ding_event_lead',
      LANGUAGE_NONE,
      0,
      'value',
    ),
    "description_long" => array(
      'field_ding_event_body',
      LANGUAGE_NONE,
      0,
      'value',
    ),
    "begin_at" => array('field_ding_event_date', LANGUAGE_NONE, 0, 'value'),
    "end_at" => array('field_ding_event_date', LANGUAGE_NONE, 0, 'value2'),
  );
  $data = (array) $node;
  foreach ($options as $name => $option) {

    if (in_array($name, array(
      'begin_at',
      'end_at',
      'sale_open_at',
      'sale_close_at',
    ))) {
      $date = (string) drupal_array_get_nested_value($data, $option);
      array_pop($option);
      $option[] = 'timezone_db';
      $timezone = $options[$name] = (string) drupal_array_get_nested_value($data, $option);
      $options[$name] = format_date(strtotime($date), 'custom', 'Y-m-d\TH:i:sO', $timezone);
    }
    else {
      $options[$name] = (string) drupal_array_get_nested_value($data, $option);
    }
  }
  $options['address'] = _ding_p2b_get_address_data($node);
  if ($additional['kultunaut_export']) {
    $field = field_get_items('node', $node, 'field_ding_event_category');
    if ($field) {
      $additional['kultunaut_export_category'] = _ding_place2book_get_export_category($field[0]['tid']);
    }

    $field = field_get_items('node', $node, 'field_ding_event_target');
    if ($field) {
      $additional['kultunaut_age_group'] = _ding_place2book_get_age_group($field[0]['tid']);
    }
  }
  $additional['capacity'] = $additional['capacity'] === '0' ? 'âˆž' : $additional['capacity'];
  $options += $additional;
  return $options;
}

/**
 * Collects address data from referenced library or current node.
 *
 * @param object $node
 *   Object of node.
 *
 * @return array
 *   Array with addresses.
 */
function _ding_p2b_get_address_data($node) {
  $field = field_get_items('node', $node, 'og_group_ref');
  $node = (array) $node;
  $lib = FALSE;
  if ($field) {
    $lib = (array) node_load($field[0]['target_id']);
  }
  $options = array(
    "address1" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'thoroughfare',
    ),
    "address2" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'premise',
    ),
    "postal_code" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'postal_code',
    ),
    "city" => array('field_ding_event_location', LANGUAGE_NONE, 0, 'locality'),
    "country" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'country',
    ),
    "phone" => array(
      'field_ding_library_phone_number',
      LANGUAGE_NONE,
      0,
      'value',
    ),
    "name" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'name_line',
    ),
  );

  $data = array();
  foreach ($options as $name => $option) {
    $result = NULL;
    $data[$name] = drupal_array_get_nested_value($node, $option, $result);
    if (($result === FALSE || empty($data[$name])) && $lib) {
      if ($name == 'name') {
        $option = array('title');
      }
      else {
        $option[0] = 'field_ding_library_addresse';
      }
      $data[$name] = drupal_array_get_nested_value($lib, $option);
    }
  }
  $data['phone'] = empty($data['phone']) ? t('None') : $data['phone'];
  $data['address2'] = '';

  return $data;
}

/**
 * Gets library id from node and returns associated eventMaker or default.
 *
 * @param object $node
 *    Object of node for which  we tries to get eventMaker.
 *
 * @return string
 *   Id of eventMaker.
 */
function _ding_place2book_get_event_maker($node) {
  $default = variable_get('ding_p2b_default_event_maker', FALSE);
  $field = field_get_items('node', $node, 'og_group_ref');
  if ($field) {
    $event_makers = variable_get('ding_p2b_library_event_makers', array());
    $event_maker_id = isset($event_makers[$field[0]['target_id']]) ? $event_makers[$field[0]['target_id']] : $default;
  }
  else {
    $event_maker_id = $default;
  }

  return $event_maker_id;
}

/**
 * Get associated export category by tid.
 *
 * @param string $tid
 *   Tid of event category.
 *
 * @return string
 *   Export category or empty.
 *
 * @see ding_p2b_format_options()
 */
function _ding_place2book_get_export_category($tid) {
  $mappings = variable_get('ding_p2b_kultunaut_export_category', array());
  return isset($mappings[$tid]) ? $mappings[$tid] : '';
}

/**
 * Get associated  category by tid.
 *
 * @param string $tid
 *   Tid of event age group.
 *
 * @return string
 *   Export category or empty.
 *
 * @see ding_p2b_format_options()
 */
function _ding_place2book_get_age_group($tid) {
  $mappings = variable_get('ding_p2b_kultunaut_age_group', array());
  return isset($mappings[$tid]) ? $mappings[$tid] : '';
}

/**
 * Custom theme handler for rendering prices as table.
 */
function theme_ding_p2b_prices_table($variables) {
  $form = $variables['form'];
  $rows = array();
  foreach (element_children($form['prices']) as $id) {
    $rows[] = array(
      'name' => drupal_render($form['prices'][$id]['name']),
      'value' => drupal_render($form['prices'][$id]['value']),
      'sale_begin' => drupal_render($form['prices'][$id]['sale_begin_at']),
      'sale_end' => drupal_render($form['prices'][$id]['sale_end_at']),
      'remove' => drupal_render($form['prices'][$id]['remove']),
    );
  }

  $header = array(
    t('Name'),
    t('Price'),
    t('Sale start'),
    t('Sale end'),
    t('Remove'),
  );

  $output = theme('table', array(
    'rows' => $rows,
    'header' => $header,
    'empty' => t('Click to add more for adding a row.'),
    'attributes' => array('id' => 'p2b-prices-table'),
  ));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Ajax callback for fetching event state from P2b.
 *
 * @param string $event_maker_id
 *   EventMaker id on remote service.
 * @param string $event_id
 *   Event id of remote service.
 */
function ding_place2book_get_event_state($event_maker_id, $event_id) {
  try {
    $p2b = ding_place2book_instance();
    $event = $p2b->getEvent($event_maker_id, $event_id);
    $meta_data = $event->meta_data;
    $start = strtotime($event->begin_at);

    if (time() < $start) {
      // Go through the event state.
      switch ($meta_data->event_state) {
        case 'published':
          // Go through the sales status.
          switch ($meta_data->sales_status) {
            case 'open':
              // Check if there is any available tickets for sale.
              if ($meta_data->available_tickets > 0 || strval($meta_data->available_tickets) == 'âˆž') {
                $status = 'open';
              }
              else {
                $status = 'sold-out';
              }
              break;

            default:
              $status = 'closed';
              break;
          }
          break;

        case 'pause':
          // Go through the sales status.
          switch ($meta_data->sales_status) {
            case 'upcoming':
              $status = 'upcoming';
              break;

            default:
              $status = 'closed';
              break;
          }
          break;

        default:
          $status = 'closed';
          break;
      }
    }
    else {
      $status = 'event-over';
      $class = 'info';

    }

    switch ($status) {
      case 'open':
        $data = l(t('Book a ticket'), $event->links->sales_location, array('attributes' => array('_target' => 'blank')));
        $class = 'order';
        break;

      case 'closed':
        $data = t('The event is closed for admission');
        $class = 'info';
        break;

      case 'sold-out':
        $data = t('Sold out');
        $class = 'info';
        break;

      case 'upcoming':
        $data = t('Ticket sale has not yet started for this event');
        $class = 'info';
        break;

      case 'event-over':
        $data = t('The event has already taken place');
        $class = 'info';
        break;
    }

    $output = "<div class='place2book {$class}'>{$data}</div>";
  }
  catch (Exception $ex) {
    watchdog_exception('ding_place2book', $ex);
  }
  print ajax_render($output);
  exit();
}

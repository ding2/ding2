<?php
/**
 * @file
 * Represents hooks implementations and definitions.
 */

use P2b\P2b;

include_once 'ding_place2book.features.inc';
require_once 'ding_place2book.fields.inc';
require_once "lib/p2b/P2b.php";

/**
 * Implements hook_menu().
 */
function ding_place2book_menu() {
  $items = array();

  $items['admin/config/ding/place2book'] = array(
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_service_admin_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['admin/config/ding/place2book/settings'] = array(
    'title' => 'Place2book settings',
    'description' => 'Settings and defaults for Place2book integration',
    'weight' => -20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_admin_settings_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['admin/config/ding/place2book/mappings'] = array(
    'title' => 'Mappings',
    'description' => 'Mappings for P2b service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_mappings_admin_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['admin/config/ding/place2book/defaults'] = array(
    'title' => 'Defaults',
    'description' => 'Configuration form for P2b default values',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_defaults_admin_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book.admin.inc',
  );

  $items['ding/p2b/event_maker/%/event/%'] = array(
    'page callback' => 'ding_place2book_get_event_state',
    'page arguments' => array(3, 5),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ding_place2book_theme($existing, $type, $theme, $path) {
  return array(
    'ding_p2b_prices_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function ding_place2book_libraries_info() {
  return array(
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promises' => array(
      'name' => 'Guzzle promises library',
      'vendor url' => 'https://github.com/guzzle/promises',
      'download url' => 'https://github.com/guzzle/promises',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr7' => array(
      'name' => 'PSR-7 message implementation',
      'vendor url' => 'https://github.com/guzzle/psr7',
      'download url' => 'https://github.com/guzzle/psr7',
      'version' => '1.3',
      'xautoload' => function ($adapter) {
      $adapter->composerJson('composer.json');
      },
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ding_place2book_permission() {
  return array(
    'administer place2book settings' => array(
      'title' => t('Administer place2book settings'),
      'description' => t('Perform administration tasks for ding_place2book.'),
    ),
  );
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function ding_place2book_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($vbo->view->name == 'admin_views_node' && $form_state['step'] == 'views_bulk_operations_confirm_form') {
    // Ensure that this is the node delete action.
    if ($form_state['operation']->operationId != 'action::views_bulk_operations_delete_item') {
      return;
    }

    $selection = $form_state['selection'];
    $p2b_nodes = [];

    foreach (node_load_multiple(array_values($selection)) as $node) {
      if (ding_place2book_is_ding_event_node_synchronized($node)) {
        $p2b_nodes[] = $node;
      }
    }

    if (empty($p2b_nodes)) {
      return;
    }

    $warning_message = format_plural(
      count($p2b_nodes),
      "One of the nodes marked for deletion is synchronized with place2book. Deleting it will also delete the corresponding event on place2book or destroy the link if the event can't be deleted",
      "@count of the nodes marked for deletion is synchronized with place2book. Deleting those will also delete the corresponding events on place2book or destroy the links for events that can't be deleted"
    );

    _ding_place2book_attach_node_deletion_warning($form, $warning_message);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_place2book_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (!$field_place2book = ding_place2book_is_ding_event_node_synchronized($form['#node'])) {
    return;
  }

  // This event is synchronized with p2b. Deleting it might have unexpected
  // consequences. Since this is a single node deletion we can afford to fetch
  // the p2b event and display a more detailed warning message.
  list($event_id, $event_maker_id) = array_values($field_place2book);

  // The default behavior is to try to delete the p2b event, but it might not be
  // possible which is reflected in deletable paramater on the p2b-event.
  $warning_message = t('This event is synchronized with place2book and deleting it will also delete the corresponding event at place2book.');

  try {
    $p2b = ding_place2book_instance();
    $event = $p2b->getEvent($event_maker_id, $event_id);

    if (empty($event->meta_data->deletable)) {
      $warning_message = t("This event can't be deleted from place2book. Proceeding with deletion will therefore destroy the link to the place2book event and it's not possible to re-establish it again via the administrative UI. The reason for this might be that it has sold ticket and/or the event is already completed.");
    }
  }
  catch (Exception $ex) {
    watchdog_exception('ding_place2book', $ex, t('Error appeared on getting data from p2b.'));
    $warning_message = t("This event is synchronized with place2book, but something went wrong fetching event data from place2book. Deleting this event could possibly destroy the link or remove the event completely from place2book.");
  }

  _ding_place2book_attach_node_deletion_warning($form, $warning_message);
}

/**
 * Helper function to attach warning to a node deletion confirm form.
 */
function _ding_place2book_attach_node_deletion_warning(&$form, $warning_message) {
  // We could use drupal_set_message(), but we want to make sure that the
  // warning is seen and that it's not getting buried in other drupal messages
  // or overloooked.
  $markup = '<p><strong>';
  $markup .= t('WARNING') . ': ';
  $markup .= $warning_message;
  $markup .= '</strong></p>';
  $form['ding_place2book_warning']['#markup'] = $markup;
}

/**
 * Implements hook_process_node().
 *
 * For the p2b-field added to ding_event nodes by this module, we do not use our
 * field formatter. Instead we use a hidden formatter and hook into the existing
 * book button in this hook.
 *
 * @see ding_place2book_node_presave()
 */
function ding_place2book_process_node(&$variables) {
  // Return early if this is not a ding_event or there's no book button.
  if ($variables['type'] != 'ding_event' || !isset($variables['book_button'])) {
    return;
  }

  $node = node_load($variables['nid']);
  if (!$field_place2book = ding_place2book_is_ding_event_node_synchronized($node)) {
    return;
  }

  // This ding_event node is synchronized with p2b, so we replace the existing
  // book button to one that can show the correct p2b-status.
  $variables['book_button'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => '',
    '#attributes' => [
      'class' => 'place2book',
      'data-event-id' => $field_place2book['event_id'],
      'data-event-maker-id' => $field_place2book['event_maker_id'],
    ],
    '#attached' => [
      'css' => [
        drupal_get_path('module', 'ding_place2book') . '/css/ding_place2book.css',
      ],
      'js' => [
        drupal_get_path('module', 'ding_place2book') . '/js/ding_place2book.js',
      ]
    ],
  ];
}

/**
 * Implements hook_node_presave().
 *
 * For nodes of ding_event type synchronized wiht p2b we ensure that the ticket
 * link field is kept updated with the sales location URL from p2b everytime
 * a node is saved. This ensures better compatibility with the rest of the
 * system.
 *
 * @see ding_place2book_process_node()
 */
function ding_place2book_node_presave($node) {
  if ($node->type != 'ding_event') {
    return;
  }

  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Get the URL from the ticket link field now. The field_get_items check is
  // used to avoid having to deal with the "Parent Data Structure Not Set"
  // exception thrown by the wrapper, when field data is not available.
  // See: https://www.drupal.org/project/entity/issues/1596594
  $ticket_url = '';
  if (field_get_items('node', $node, 'field_ding_event_ticket_link')) {
    $ticket_url = $node_wrapper->field_ding_event_ticket_link->url->value();
  }

  if (!$field_place2book = ding_place2book_is_ding_event_node_synchronized($node)) {
    // If this is an existing event and the p2b-sync has been removed, ensure
    // that the p2b-URL is removed from the ticket link field if it still
    // contains an p2b-URL.
    if (!$node->is_new && ding_place2book_is_ding_event_node_synchronized($node->original)) {
      if (strpos($ticket_url, 'https://www.place2book.com') === 0) {
        $node_wrapper->field_ding_event_ticket_link->set(NULL);
      }
    }
    return;
  }

  // This could be invoked from a batch operation saving multiple nodes, so try
  // to keep the request against p2b API to a minimum. So if the node already
  // has a p2b ticket URL, we avoid making the request. Ideally we should only
  // make request when event is created or if p2b-sync is added to an existing
  // event. For existing p2b-synced events, we disable the ticket link field on
  // the widget form to prevent it from being removed/changed.
  if (strpos($ticket_url, 'https://www.place2book.com') === 0) {
    // The event already has p2b-URL. Nothing to do.
    return;
  }

  // The event is p2b-synced but does not a p2b ticket URL. Fetch the event from
  // p2b API and update it.
  list($event_id, $event_maker_id) = array_values($field_place2book);
  try {
    $p2b = ding_place2book_instance();
    $event = $p2b->getEvent($event_maker_id, $event_id);
    if (!$event->passive) {
      $node_wrapper
        ->field_ding_event_ticket_link
        ->url
        ->set($event->links->sales_location);
    }
  }
  catch (Exception $ex) {
    watchdog_exception('ding_place2book', $ex, t('Error appeared on getting data from p2b.'));
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ding_place2book_field_widget_form_alter(&$element, &$form_state, $context) {
  if (empty($context['form']['#node'])) {
    return;
  }

  $node = $context['form']['#node'];
  $field_name = $context['field']['field_name'];

  if ($node->type != 'ding_event' || $field_name != 'field_ding_event_ticket_link') {
    return;
  }

  if (!ding_place2book_is_ding_event_node_synchronized($node)) {
    return;
  }

  // Disable the formatter element for the ticket link field if this ding_event
  // node synchronizes with p2b.
  $element['#disabled'] = TRUE;
  $element['#description'] = t('This field is currently controlled by place2book and is therefore disabled. Disable place2book synchronization to enable it and use a custom external ticket link.');
}

/**
 * Implements hook_clone_node_alter().
 */
function ding_place2book_clone_node_alter(&$node, $context) {
  if (!$field_place2book = ding_place2book_is_ding_event_node_synchronized($node)) {
    return;
  }

  // Reset p2b event ID, so that the cloned ding_event doesn't point to the same
  // event in p2b as the original.
  $original_event_id = $field_place2book['event_id'];
  $field_place2book['event_id'] = NULL;

  // For ding_event nodes clear the ticket link, so that our node_presave
  // implementation will fetch a new sales URL.
  if ($node->type = 'ding_event') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $node_wrapper->field_ding_event_ticket_link->set(NULL);
  }

  // Fetch the p2b-event and prices associated with the original node. We need
  // the data to replicate p2b-event on the cloned node.
  try {
    $p2b = ding_place2book_instance();
    $event = $p2b->getEvent($field_place2book['event_maker_id'], $original_event_id);

    $prices = [];
    // Only fetch prices for non-passive events.
    if (!$event->passive) {
      $prices = $p2b->getPrices($field_place2book['event_maker_id'], $original_event_id);
    }
  }
  catch (Exception $ex) {
    watchdog_exception('ding_place2book', $ex, t('Error appeared on getting data from p2b.'));
    // If can't get the data from p2b API we can't setup the clone perfectly. At
    // least we removed the event_id, so just return now.
    $node->field_place2book[LANGUAGE_NONE][0] = $field_place2book;
    return;
  }

  // In prepopulate the node form is populated without saving cloned node first,
  // so we need to clone the p2b event and prices and pass them along to the
  // widget form.
  if ($context['method'] == 'prepopulate') {
    $event_clone = clone $event;
    $event_clone->id = NULL;
    $field_place2book['event_clone'] = $event_clone;
    $field_place2book['prices_clone'] = array_map(function($price) {
      $price_clone = clone $price;
      $price_clone->id = NULL;
      return $price_clone;
    }, $prices);
    // Signal to the widget that a clone should be performed.
    $field_place2book['do_clone'] = TRUE;
  }
  // Otherwise save-edit or action method is used and we need to simulate the
  // items array passed to our field presave implementation.
  else {
    $field_place2book['capacity'] = $event->capacity;
    $field_place2book['kultunaut_export'] = $event->kultunaut_export;
    $field_place2book['passive'] = $event->passive;

    $field_place2book['prices_wrapper']['prices'] = array_map(function($price) {
      return [
        'name' => $price->name,
        'value' => $price->value,
        'sale_begin_at' => date('Y-m-d H:i:s', strtotime($price->sale_begin_at)),
        'sale_end_at' => date('Y-m-d H:i:s', strtotime($price->sale_end_at)),
      ];
    }, $prices);

    // Need to set this otherwise event will not be sync'ed by our presave
    // implementation. The widget form takes care of setting it also, but in
    // this clone method we skip the form and save the node immediatly, so we
    // need to set it here.
    $field_place2book['do_sync'] = TRUE;
  }

  $node->field_place2book[LANGUAGE_NONE][0] = $field_place2book;
}

/**
 * Creates and initializes instance of P2b class.
 *
 * @return object
 *   Instance of P2b class.
 */
function ding_place2book_instance() {
  $p2b = drupal_static(__FUNCTION__, NULL);
  if (empty($p2b)) {
    $settings = variable_get('ding_place2book_settings', array());
    $p2b = P2b::getInstance($settings);
  }

  return $p2b;
}

/**
 * Determines whether a given (ding_event) node is synchronized with p2b.
 *
 * Note that this function only works on ding_event nodes with the p2b field
 * named field_place2book that this module provides out of the box, and is
 * therefore name accordingly.
 *
 * @param object $node
 *   A node of ding_event type.
 *
 * @return mixed|bool|array
 *   Returns FALSE if $node is not synchronized with p2b.
 *   Returns array with p2b-data for the node's corresponding p2b-event, if
 *   $node was synchronized with p2b.
 */
function ding_place2book_is_ding_event_node_synchronized($node) {
  if (!$field_place2book = field_get_items('node', $node, 'field_place2book')) {
    return FALSE;
  }

  $field_place2book = $field_place2book[0];
  if (empty($field_place2book['synchronize'])) {
    return FALSE;
  }
  // The event is synchronized and this is just a safety check to ensure these
  // important values is present and non-empty.
  $missing = [];
  if (empty($field_place2book['event_id'])) {
    $missing[] = 'event_id';
  }
  if (empty($field_place2book['event_maker_id'])) {
    $missing[] = 'event_maker_id';
  }
  if (!empty($missing)) {
    // If for some reason one of these is not set, we'll log it in watchdog to
    // ease debugging.
    watchdog('ding_place2book', "Event %title is synchronized with place2book but is missing !missing", [
      '%title' => $node->title,
      '!missing' => implode(', ', $missing),
    ], WATCHDOG_WARNING, l(t('Edit event'), 'node/' . $node->nid . '/edit'));
    return FALSE;
  }

  return $field_place2book;
}

/**
 * Collects all needed information for request from node.
 *
 * @param object $node
 *   Node object.
 * @param array $additional
 *   Additional settings.
 *
 * @return array
 *   Array with need for request data.
 */
function ding_p2b_format_options($node, array $additional) {
  $options = array(
    "name" => array('title'),
    "description_short" => array(
      'field_ding_event_lead',
      LANGUAGE_NONE,
      0,
      'value',
    ),
    "description_long" => array(
      'field_ding_event_body',
      LANGUAGE_NONE,
      0,
      'value',
    ),
    "begin_at" => array('field_ding_event_date', LANGUAGE_NONE, 0, 'value'),
    "end_at" => array('field_ding_event_date', LANGUAGE_NONE, 0, 'value2'),
  );
  $data = (array) $node;
  foreach ($options as $name => $option) {

    if (in_array($name, array(
      'begin_at',
      'end_at',
      'sale_open_at',
      'sale_close_at',
    ))) {
      $date = (string) drupal_array_get_nested_value($data, $option);
      array_pop($option);
      $option[] = 'timezone_db';
      $timezone = $options[$name] = (string) drupal_array_get_nested_value($data, $option);
      $options[$name] = format_date(strtotime($date . ' ' . $timezone), 'custom', 'Y-m-d\TH:i:sO');
    }
    else {
      $options[$name] = (string) drupal_array_get_nested_value($data, $option);
    }
  }
  $options['address'] = _ding_p2b_get_address_data($node);
  if ($additional['kultunaut_export']) {
    $field = field_get_items('node', $node, 'field_ding_event_category');
    if ($field) {
      $additional['kultunaut_export_category'] = _ding_place2book_get_export_category($field[0]['tid']);
    }

    $field = field_get_items('node', $node, 'field_ding_event_target');
    if ($field) {
      $additional['kultunaut_age_group'] = _ding_place2book_get_age_group($field[0]['tid']);
    }

    $field = field_get_items('node', $node, 'field_ding_event_list_image');
    if ($field) {
      $list_image = file_load($field[0]['fid']);
      if (!empty($list_image->uri)) {
        $additional['kultunaut_picture_uri'] = image_style_url('ding_place2book_kultunaut', $list_image->uri);
      }
    }
  }
  $additional['capacity'] = $additional['capacity'] === '0' ? '∞' : $additional['capacity'];
  $options += $additional;
  return $options;
}

/**
 * Collects address data from referenced library or current node.
 *
 * @param object $node
 *   Object of node.
 *
 * @return array
 *   Array with addresses.
 */
function _ding_p2b_get_address_data($node) {
  $field = field_get_items('node', $node, 'og_group_ref');
  $node = (array) $node;
  $lib = FALSE;
  if ($field) {
    $lib = (array) node_load($field[0]['target_id']);
  }
  $options = array(
    "address1" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'thoroughfare',
    ),
    "address2" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'premise',
    ),
    "postal_code" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'postal_code',
    ),
    "city" => array('field_ding_event_location', LANGUAGE_NONE, 0, 'locality'),
    "country" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'country',
    ),
    "phone" => array(
      'field_ding_library_phone_number',
      LANGUAGE_NONE,
      0,
      'value',
    ),
    "name" => array(
      'field_ding_event_location',
      LANGUAGE_NONE,
      0,
      'name_line',
    ),
  );

  $data = array();
  foreach ($options as $name => $option) {
    $result = NULL;
    $data[$name] = drupal_array_get_nested_value($node, $option, $result);
    if (($result === FALSE || empty($data[$name])) && $lib) {
      if ($name == 'name') {
        $option = array('title');
      }
      else {
        $option[0] = 'field_ding_library_addresse';
      }
      $data[$name] = drupal_array_get_nested_value($lib, $option);
    }
  }
  $data['phone'] = empty($data['phone']) ? t('None') : $data['phone'];
  $data['address2'] = '';

  return $data;
}

/**
 * Gets library id from node and returns associated eventMaker or default.
 *
 * @param object $node
 *    Object of node for which  we tries to get eventMaker.
 *
 * @return string
 *   Id of eventMaker.
 */
function _ding_place2book_get_event_maker($node) {
  $default = variable_get('ding_p2b_default_event_maker', FALSE);
  $field = field_get_items('node', $node, 'og_group_ref');
  if ($field) {
    $event_makers = variable_get('ding_p2b_library_event_makers', array());
    $event_maker_id = isset($event_makers[$field[0]['target_id']]) ? $event_makers[$field[0]['target_id']] : $default;
  }
  else {
    $event_maker_id = $default;
  }

  return $event_maker_id;
}

/**
 * Get associated export category by tid.
 *
 * @param string $tid
 *   Tid of event category.
 *
 * @return string
 *   Export category or empty.
 *
 * @see ding_p2b_format_options()
 */
function _ding_place2book_get_export_category($tid) {
  $mappings = variable_get('ding_p2b_kultunaut_export_category', array());
  return isset($mappings[$tid]) ? $mappings[$tid] : '';
}

/**
 * Get associated  category by tid.
 *
 * @param string $tid
 *   Tid of event age group.
 *
 * @return string
 *   Export category or empty.
 *
 * @see ding_p2b_format_options()
 */
function _ding_place2book_get_age_group($tid) {
  $mappings = variable_get('ding_p2b_kultunaut_age_group', array());
  return isset($mappings[$tid]) ? $mappings[$tid] : '';
}

/**
 * Custom theme handler for rendering prices as table.
 */
function theme_ding_p2b_prices_table($variables) {
  $form = $variables['form'];
  $rows = array();
  foreach (element_children($form['prices']) as $id) {
    $rows[] = array(
      'name' => drupal_render($form['prices'][$id]['name']),
      'value' => drupal_render($form['prices'][$id]['value']),
      'sale_begin' => drupal_render($form['prices'][$id]['sale_begin_at']),
      'sale_end' => drupal_render($form['prices'][$id]['sale_end_at']),
      'remove' => drupal_render($form['prices'][$id]['remove']),
    );
  }

  $header = array(
    t('Name'),
    t('Price'),
    t('Sale start'),
    t('Sale end'),
    t('Remove'),
  );

  $output = theme('table', array(
    'rows' => $rows,
    'header' => $header,
    'empty' => t('Click to add more for adding a row.'),
    'attributes' => array('id' => 'p2b-prices-table'),
  ));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Ajax callback for fetching event state from P2b.
 *
 * @param string $event_maker_id
 *   EventMaker id on remote service.
 * @param string $event_id
 *   Event id of remote service.
 */
function ding_place2book_get_event_state($event_maker_id, $event_id) {
  try {
    $p2b = ding_place2book_instance();
    $event = $p2b->getEvent($event_maker_id, $event_id);
    $meta_data = $event->meta_data;
    $state = $event->state;
    $available_tickets = $meta_data->available_tickets;
    $data = '';
    $class = '';
    $type = '';
    $min_period = [];

    // Try to derive a status for the ticket link in frontend by looking at the
    // p2b event's state, ticket types and sale periods.
    // See: http://developer.place2book.com/v1/events/
    $ticket_link_status = '';
    if (in_array($state, ['held', 'completed'])) {
      $ticket_link_status = 'event-over';
    }
    elseif (!$event->active) {
      $ticket_link_status = 'closed';
    }
    elseif ($state === 'published') {
      // If event is published we first check to see if there's any available
      // tickets at all. If not the event is sold out and we can avoid fetching
      // ticket types and sale periods. There might be a waiting-list so we
      // check for that first before setting sold out.
      if (empty($available_tickets)) {
        if (!empty($event->waiting_list)) {
          $ticket_link_status = 'waiting-list';
        }
        else {
          $ticket_link_status = 'sold-out';
        }
      }
      else {
        // Else we have no other options than to fetch the tickets and look
        // for open or upcoming sale periods.
        $sale_periods = [];
        foreach ($p2b->getPrices($event_maker_id, $event_id) as $price) {
          $sale_periods[] = [
            'begin' => strtotime($price->sale_begin_at),
            'end' => strtotime($price->sale_end_at),
          ];
        }

        // Some events, for example those migrated from the old API, will have
        // sales period on the event and not on the individual tickets.
        if (isset($event->sale_open_at) && isset($event->sale_close_at)) {
          $sale_periods[] = [
            'begin' => strtotime($event->sale_open_at),
            'end' => strtotime($event->sale_close_at),
          ];
        }

        $now = time();

        // Filter out periods which are already over.
        $sale_periods = array_filter($sale_periods, function ($p) use ($now) {
          return $p['end'] >= $now;
        });

        // Check if we still have any active sale periods. If such are - go on!
        if (!empty($sale_periods)) {
          // Find the closest sale period.
          $begin_values = array_column($sale_periods, 'begin');
          // Get the closest sale period. In case when event has upcoming sales,
          // its start value will be used in button label.
          $min_period_begin = min($begin_values);
          $min_period = array_filter($sale_periods, function ($sale_period) use ($min_period_begin) {
            return ($sale_period['begin']) == $min_period_begin;
          });
          $min_period = array_shift($min_period);

          // We have found an open sales period.
          $ticket_link_status = 'open';

          // Check for 'upcoming' sale.
          if ($now < $min_period['begin']) {
            // We haven't found any open sales period yet, but at least there's
            // an upcoming, so set that status for now.
            $ticket_link_status = 'upcoming';
          }
        }

        // If no upcoming or open sales period was found for the published event
        // we consider the sales status to be closed.
        if (empty($ticket_link_status)) {
          $ticket_link_status = 'closed';
        }

      }
    }

    if (!empty($ticket_link_status)) {
      switch ($ticket_link_status) {
        case 'open':
          $class = 'ticket-available';
          $data = l(t('Book a ticket'), $event->links->sales_location, array(
            'attributes' => array(
              'target' => '_blank',
              'class' => array('button', $class),
            ),
          ));
          $type = 'link';
          break;

        case 'closed':
          $class = 'ticket-notice';
          $data = t('Not open for ticket sale');
          $type = 'markup';
          break;

        case 'sold-out':
          $class = 'ticket-warning';
          $data = t('Sold out');
          $type = 'markup';
          break;

        case 'upcoming':
          $sale_start = $min_period['begin'];
          $date = format_date($sale_start, 'ding_date_only');
          $time = format_date($sale_start, 'ding_time_only');
          $class = 'ticket-notice';
          $data = t("Ticket sale starts @date at @time", array(
            '@date' => $date,
            '@time' => $time,
          ));
          $type = 'markup';
          break;

        case 'waiting-list':
          $class = 'ticket-notice';
          $data = l(t('Waiting list open'), $event->links->sales_location, array(
            'attributes' => array(
              'target' => '_blank',
              'class' => array('button', $class),
            ),
          ));
          $type = 'link';
          break;

        case 'event-over':
          $data = t('The event has already taken place');
          $type = 'markup';
          break;
      }

      if ($type == 'link') {
        $output = $data;
      }
      elseif ($type == 'markup') {
        $output = "<div class='place2book button {$class}'>{$data}</div>";
      }
      print ajax_render($output);
    }
  }
  catch (Exception $ex) {
    watchdog_exception('ding_place2book', $ex);
  }
  exit();
}

/**
 * Implements hook_field_group_info_alter().
 */
function ding_place2book_field_group_info_alter(&$groups) {
  if (!empty($groups['group_left|node|ding_event|default'])) {
    $groups['group_left|node|ding_event|default']->data['children'][] = 'field_place2book';
  }
}

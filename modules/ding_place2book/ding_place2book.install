<?php

/**
 * @file
 * Installation file for ding_place2book module.
 */

/**
 * Implementation of hook_schema().
 */
function ding_place2book_schema() {
  return array(
    'ding_place2book' => array(
      'description' => 'Table to hold information about Place2Book tickets.',
      'fields' => array(
        'nid' => array(
          'description' => 'The foreign key to {node}.nid',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'place2book_id' => array(
          'description' => 'An ID-reference to the corresponding event on the ticket booking service',
          'type' => 'int',
          'unsigned' => FALSE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'capacity' => array(
          'description' => 'The maximum capacity on the Place2Book event. 0 is interpreted as unlimited capacity on the event (default)',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'maintain_copy' => array(
          'description' => 'Event is created and updated on Place2Book',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 1,
        ),
        'kultunaut_export' => array(
          'description' => 'Place2Book forwards the event to kultunaut',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'passive' => array(
          'description' => 'Event on Place2Book is flagged as passive',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'ticket_type' => array(
          'description' => 'Ticket type',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'ticket_status' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Ticket status',
        )
      ),
      'primary key' => array('nid'),
    ),
  );
}

/**
 * Implements hook_install().
 */
function ding_place2book_install() {
  // Set 'Maintain copy on Place2Book' as default.
  variable_set('ding_place2book_event_nodes', array('defaults' => array('maintain_copy' => 'maintain_copy')));
  // Update module weight to make it heavier then CCK field groups.
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'ding_place2book';");
}

/**
 * Implementation of hook_uninstall().
 */
function ding_place2book_uninstall() {
  variable_del('ding_place2book');
  variable_del('ding_place2book_libraries');
  variable_del('ding_place2book_event_nodes');
}

/**
 * Implements hook_enable().
 */
function ding_place2book_enable() {
  /*
   * Create a field on the Event node type as a placeholder for the
   * order-button/info-area.
   */
  // Check if our field is not already created.
  // @todo: The relationship between node, field, settings and output is very
  // convoluted to me. I see the current situation:
  // - field_place2book_tickets is added to event nodes. It is only used for
  //   outputting a placeholder containing the node id.
  // - A form_alter is used on the node edit form to add node settings.
  // - A panel pane is used for outputting a placeholder where the content is
  //   loaded asynchronously.
  //
  // One suggested approach:
  // - Use a form alter to add settings.
  // - Add a virtual field which renders a placeholder. Panels will
  //   automatically provide a panel pane for rendering the field.
  if (!field_info_field('field_place2book_tickets')) {
    $field = array(
      'field_name' => 'field_place2book_tickets',
      'type' => 'text',
    );
    field_create_field($field);

    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'field_place2book_tickets',
      'entity_type' => 'node',
      'label' => 'Place2book Tickets',
      'bundle' => 'ding_event',
      'required' => TRUE,
      'default_value' => array(array('value' => 'placeholder')),
      'description' => 'Placeholder for Place2book ticket information and/or order link',
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'settings' => array(),
          'weight' => 10,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_disable().
 */
function ding_place2book_disable() {
  field_delete_field('field_place2book_tickets');
  // Field module prevents disabling modules
  // when field types they provided are used in a field until it is fully
  // purged. In the case that a field has minimal or no content, a single call
  // to field_purge_batch() will remove it from the system. This will avoid
  // admins having to wait for cron run before removing instances.
  // @see field_ui_field_delete_form_submit().
  field_purge_batch(10);
}

/**
 * Add column for storing ticket type.
 */
function ding_place2book_update_7000() {
  db_add_field('ding_place2book', 'ticket_type', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
    'description' => 'Ticket type',
  ));
}

/**
 * Update ticket_type in all existing place2book-settings to 'Adgang'.
 */
function ding_place2book_update_7001() {
  db_update('ding_place2book')
    ->fields(array('ticket_type' => 'Adgang'))
    ->execute();
}

/**
 * Add ticket type column.
 */
function ding_place2book_update_7002() {
  db_add_field('ding_place2book', 'ticket_status', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
    'description' => 'Ticket status',
  ));
}

/**
 * Update events p2b data to be stored in new field.
 */
function ding_place2book_update_7003(&$sandbox) {
  if (!isset($sandbox['processed'])) {
    $sandbox['total'] = db_query("select count(nid) as count
      from {ding_place2book} p2b
      where p2b.place2book_id <> :no_p2b_id", array(
        ':no_p2b_id' => DING_PLACE2BOOK_NO_ID,
      )
    )->fetchField();

    $sandbox['processed'] = 0;
  }

  if ($sandbox['total']) {
    $events = db_query("select nid, place2book_id
      from {ding_place2book} p2b
      where p2b.place2book_id <> :no_p2b_id LIMIT {$sandbox['processed']}, 20", array(
        ':no_p2b_id' => DING_PLACE2BOOK_NO_ID,
      )
    )->fetchAll();

    foreach ($events as $event) {
      $event_node = node_load($event->nid);
      if ($event_node) {
        ding_place2book_get_ticket_link($event_node, $event->place2book_id);
      }
      $sandbox['processed']++;
    }

    $sandbox['finished'] = $sandbox['processed'] / $sandbox['total'];
  }
}

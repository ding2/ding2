<?php
/**
 * @file
 * Syndication logic here.
 */

include_once drupal_get_path('module', 'bpi') . '/bpi.images.inc';

/**
 * BPI http push form, used in save and push on node/edit page.
 *
 * @param int $nid
 *   Node id.
 *
 * @return array
 *   Form structure.
 *
 * @ingroup forms
 */
function bpi_http_push_action_form($nid) {
  $form = array();
  $form['#tree'] = FALSE;
  $form['bpi_push_nid'] = array(
    '#type' => 'hidden',
    '#value' => isset($nid) ? $nid : 0,
  );

  // Get BPI vocabularies (category and audience).
  $vocabularies = bpi_get_bpi_dictionaries();

  $form['vocabularies'] = array(
    '#type' => 'fieldset',
    '#title' => t('BPI vocabularies'),
    '#description' => t('BPI vocabularies is used to categories the pushed content, so searching for content later is easier and related content can be found.'),
  );

  $categories = array_values($vocabularies['category']);
  $form['vocabularies']['bpi_push_category'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#options' => array_merge(array('' => t('- choose -')), array_combine($categories, $categories)),
  );

  $audiences = array_values($vocabularies['audience']);
  $form['vocabularies']['bpi_push_audience'] = array(
    '#type' => 'select',
    '#title' => t('Audience'),
    '#options' => array_merge(array('' => t('- choose -')), array_combine($audiences, $audiences)),
  );

  $form['configurations'] = array(
    '#type' => 'fieldset',
    '#title' => t('BPI options'),
  );

  $form['configurations']['bpi_push_images'] = array(
    '#type' => 'select',
    '#title' => t('Push with image'),
    '#options' => array(
      BPI_WITHOUT_IMAGES => t('Not approved for sharing'),
      BPI_WITH_IMAGES => t('Approved for sharing'),
    ),
    '#description' => t('You should have permission to publish the images before selecting this option.'),
    '#empty_option' => t('- choose -'),
  );

  $form['configurations']['bpi_push_refs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Push with references'),
    '#description' => t('If checked the content will be pushed with material reference to the data well. Note that posts with the katalog keyword will not be pushed.'),
    '#default_value' => TRUE,
  );

  $form['configurations']['bpi_push_editable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Editable'),
    '#description' => t('If checked the content will be marked as not editable (It is not enforced but only recommanded that the content is not changed after syndication).'),
    '#default_value' => '1',
  );

  if ($nid) {
    $bpi_node = bpi_get_bpi_nodes($nid);

    if (!empty($bpi_node[$nid])) {
      $data = unserialize($bpi_node[$nid]->data);
      $form['vocabularies']['bpi_push_category']['#default_value'] = $data['category'];
      $form['vocabularies']['bpi_push_audience']['#default_value'] = $data['audience'];
      $form['configurations']['bpi_push_images']['#default_value'] = $data['with_images'];
      $form['configurations']['bpi_push_refs']['#default_value'] = $data['with_refs'];
      $form['configurations']['bpi_push_editable']['#default_value'] = $data['editable'];
    }
  }

  return $form;
}

/**
 * Convert node object to array structure, suitable for pushing to the well.
 *
 * @param stdClass $node
 *   Node object being processed.
 * @param string $category
 *   Selected category at the BPI side.
 * @param string $audience
 *   Selected audience at the BPI side.
 * @param bool $with_images
 *   Include images or not.
 * @param bool $authorship
 *   Include author name or not.
 * @param int $editable
 *   1 - to mark as editable, 0 - not editable.
 * @param bool $with_refs
 *   If TRUE ting material reference are extracted.
 *
 * @return array
 *   An array of node values, used by the BPI web service.
 *
 * @todo Add a hook allowing changing the values before they are sent to BPI.
 * @todo Split this function into smaller parts (ex: images, texts).
 */
function bpi_convert_to_bpi($node, $category, $audience, $with_images = FALSE, $authorship = FALSE, $editable = 1, $with_refs = FALSE, array $mapping = array()) {
  $bpi_content = array();

  $bpi_content['agency_id'] = variable_get('bpi_agency_id', '');
  $bpi_content['local_id'] = $node->nid;
  $bpi_content['bpi_id'] = isset($node->bpi_id) ? $node->bpi_id : NULL;
  $bpi_content['url'] = url('node/' . $node->nid, array('absolute' => TRUE, 'alias' => TRUE));
  $bpi_content['data'] = '';

  $user = user_load($node->uid);
  $bpi_content['firstname'] = $user->name;
  $bpi_content['lastname'] = '';

  $bpi_content['title'] = $node->title;

	$field_mapping = $mapping['field_mapping'];
  $teaser_field = isset($field_mapping['teaser']) ? field_view_field('node', $node, $field_mapping['teaser']) : NULL;
  $body_field = isset($field_mapping['body']) ? field_view_field('node', $node, $field_mapping['body']) : NULL;
  $teaser = bpi_get_field_value($teaser_field);
  $body = bpi_get_field_value($body_field);

  // Find the references to the ting date well.
  $materials_drupal = array();
  if ($with_refs) {
    if (isset($field_mapping['materials'])) {
      // Function field_get_items returns data with 2 different structure, depending from stage when it was called.
			$items = field_get_items('node', $node, $field_mapping['materials']);
			foreach ((array) $items as $item) {
				// First case, we have completly saved node, when it returns ding_object_id.
				if (!empty($item['ting_object_id'])) {
					$id = $item['ting_object_id'];
					// Filter out id's with "katalog" PID, as they only makes sens on
					// current site.
					if (!preg_match('/katalog/', $id)) {
						$materials_drupal[] = $id;
					}
				}
				// Second case, we used "Save and push" button and node wasn't completly saved
				// In this case, we have object of class Relation.
				elseif (isset($item['value']->endpoints)) {
					$endpoints = $item['value']->endpoints;
					$data = array_filter($endpoints[LANGUAGE_NONE], function ($i) {
						return $i['entity_type'] == 'ting_object';
					});
					if (!empty($data)) {
						$ting_data = current($data);
						$ting_object = entity_load_single('ting_object', $ting_data['entity_id']);
						if ($ting_object) {
							if (!preg_match('/katalog/', $ting_object->ding_entity_id)) {
								$materials_drupal[] = $ting_object->ding_entity_id;
							}
						}
					}
				}
			}
		}
	}

  // Empty the teaser, if body and teaser are mapped to same fields
  // and the values are identical.
  if ($teaser === $body) {
    $teaser = '';
  }

  $bpi_content['body'] = html_entity_decode($body);
  $bpi_content['teaser'] = html_entity_decode($teaser);
  $dt = new DateTime();
  $dt->setTimestamp($node->changed);
  $bpi_content['creation'] = $dt->format(DateTime::W3C);
  $bpi_content['type'] = $mapping['bpi_node_type'];
  $bpi_content['category'] = $category;
  $bpi_content['audience'] = $audience;
  $bpi_content['related_materials'] = $materials_drupal;
  $bpi_content['editable'] = (int) $editable;
  $bpi_content['authorship'] = !$authorship;
  $bpi_content['assets'] = array();

  if ($with_images) {
    $image_fields = bpi_fetch_image_fields($node->type);

    if (!empty($image_fields)) {
      foreach ($image_fields as $field_name) {
        $image_type = bpi_get_image_type($field_name, $node);
        if (!empty($image_type)) {
          $field_items = field_get_items('node', $node, $field_name);
          if (is_array($field_items)) {
            foreach ($field_items as $item) {
              if (isset($item['fid'])) {
                $file = file_load($item['fid']);
                if (is_object($file)) {
                  $bpi_content['assets'][] = array(
                    'path' => file_create_url($file->uri),
                    'alt' => $file->alt ?: $file->filename,
                    'title' => $file->title ?: $file->filename,
                    'type' => $image_type,
                    'name' => $file->filename,
                    'extension' => pathinfo($file->uri, PATHINFO_EXTENSION),
                  );
                }
              }
            }
          }
        }
      }
    }
  }
  else {
    $bpi_content['body'] = preg_replace(
      '~(<p>)?<img.+?/>(</p>)?~is',
      '',
      $bpi_content['body']
    );
  }

  $tags = array();
  if (isset($field_mapping['tags'])) {
    $tags_field_name = $field_mapping['tags'];
    if (!empty($tags_field_name)) {
      // We use field_view_field (rather than field_get_items, say) to get the
      // actual taxonomy term names which we need to push to bpi.
      $tags_field = field_view_field('node', $node, $tags_field_name);
      if ($tags_field && isset($tags_field['#items'])) {
        foreach ($tags_field['#items'] as $item) {
          if (isset($item['taxonomy_term'])) {
            $tags[] = $item['taxonomy_term']->name;
          }
        }
      }
    }
  }
  $bpi_content['tags'] = implode(',', $tags);

  drupal_alter('bpi_convert_to_bpi', $bpi_content, $node, $mapping);

  if (is_array($bpi_content['data'])) {
    $bpi_content['data'] = json_encode($bpi_content['data']);
  }

  return $bpi_content;
}

/**
 * Get string value from a content type field.
 *
 * @param array|NULL $field
 *   The field.
 *
 * @return string
 *   The field value.
 */
function bpi_get_field_value(array $field = NULL) {
  $value = '';

  if (!empty($field)) {
    if (isset($field['#items'][0]['safe_summary'])) {
      $value = $field['#items'][0]['safe_summary'];
    }
    elseif (isset($field['#items'][0]['safe_value'])) {
      $value = $field['#items'][0]['safe_value'];
    }
    elseif (isset($field['#items'][0]['value'])) {
      $value = $field['#items'][0]['value'];
    }
    elseif (isset($field[0]['#markup'])) {
      $value = $field[0]['#markup'];
    }
  }

  return $value;
}


/**
 * Fetch image field types.
 *
 * @param string $bundle
 *   Node type.
 *
 * @return array
 *   Array of field names which are actually image fields.
 */
function bpi_fetch_image_fields($bundle) {
  $potential_image_fields = array('image_image', 'media_generic');
  $field_instances = field_info_instances('node', (string) $bundle);

  $image_fields = array();

  if (is_array($field_instances)) {
    foreach ($field_instances as $key => $instance) {
      if (in_array($instance['widget']['type'], $potential_image_fields)) {
        $image_fields[] = $key;
      }
    }
  }

  return $image_fields;
}

/**
 * Fetch dictionaries from BPI ws.
 *
 * @return array
 *   Nested array of dictionaries, keyed by dictionary
 *   type.
 */
function bpi_get_bpi_dictionaries() {
  $dictionaries = array('category' => array(), 'audience' => array());

  try {
    $bpi = bpi_client_instance();
    $dictionaries = $bpi->getDictionaries();
  }
  catch (Exception $e) {
    watchdog_exception('bpi', $e);
  }

  return $dictionaries;
}

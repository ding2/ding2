<?php

/**
 * @file
 * Availability information for ding objects.
 */

// Load Field module hooks.
module_load_include('inc', 'ding_availability', 'ding_availability.field');

/**
 * Implements hook_menu().
 */
function ding_availability_menu() {
  $items = array();

  $items['ding_availability/items'] = array(
    'title' => 'Availability status',
    'page callback' => 'ding_availability_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ding_availability/holdings'] = array(
    'title' => 'Availability and holding status',
    'page callback' => 'ding_availability_holdings_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Ajax link reservation callback (with local_id, volume and issue).
  // TODO: Everything related to periodical reservation would probably be better
  // placed in ding_reservation module, but for now we just migrate everything
  // we need from ding_periodical to ding_availability.
  $items['ting/object/%ting_object/reserve/%/%/%'] = array(
    'page callback' => 'ding_availability_periodical_reserve_ajax',
    'page arguments' => array(2, 4, 5, 6),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_availability_ding_provider_user() {
  return array(
    'availability' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ding_availability_theme($existing, $type, $theme, $path) {
  return array(
    'ding_holdings' => array(
      'template' => 'ding-holdings',
      'variables' => array(
        'holdings' => NULL,
        'total_count' => NULL,
        'reserved_count' => NULL,
        'total_plus_ordered_count' => NULL,
        'reserved_text' => NULL,
        'acquisition_text' => NULL,
        'total_text' => NULL,
      ),
      'path' => $path . '/templates',
    ),
    'ding_holdings_periodical' => array(
      'variables' => array(
        'entity' => NULL,
        'issues' => array(),
        'availability' => array(),
      ),
    ),
    'ding_availability_types' => array(
      'template' => 'ding-availability-types',
      'variables' => array(
        'types' => array(),
      ),
      'path' => $path . '/templates',
    ),
    'ding_availability_type' => array(
      'template' => 'ding-availability-type',
      'variables' => array(
        'class' => NULL,
        'label' => NULL,
        'links' => array(),
      ),
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Ajax periodical reservation callback.
 *
 * @param TingEntity $entity
 *   Ting entity for the periodical.
 * @param string $local_id
 *   Local library id (faust) for the issue (base64 encoded).
 * @param string $volume
 *   Volume number (for year books the year, base64 encoded).
 * @param string $issue
 *   The issue in the volume to reserve (base64_encoded).
 *
 * @return array
 *   Render array with Ajax commands.
 */
function ding_availability_periodical_reserve_ajax(TingEntity $entity, $local_id, $volume, $issue) {
  $reservable = new DingAvailabilityPeriodicalReservable(base64_decode($local_id), base64_decode($volume), base64_decode($issue), $entity);

  // Use ding reservation logic to create the reservation and ajax commands.
  return ding_reservation_reserve_ajax($entity, $reservable);
}

/**
 * Output the availability information as json.
 *
 * @param string $provider_ids
 *   Providers ID's to fetch availability information for.
 */
function ding_availability_js($provider_ids) {
  drupal_json_output(ding_availability_items(explode(',', $provider_ids)));
}

/**
 * Output holdings information as json.
 *
 * @param string $provider_ids
 *   Providers ID's to fetch holdings information for.
 */
function ding_availability_holdings_js($provider_ids) {
  drupal_json_output(ding_availability_holdings(explode(',', $provider_ids)));
}

/**
 * Get availability from the provider.
 *
 * @param array $provider_ids
 *   ID's to fetch data for.
 *
 * @return array
 *   Availability information.
 */
function ding_availability_items(array $provider_ids) {
  if (ding_provider_implements('availability', 'items')) {
    $items = ding_provider_invoke('availability', 'items', $provider_ids);
    if (!$items) {
      return array();
    }
    foreach ($items as &$item) {
      $item += array(
        'reservable' => FALSE,
        'available' => FALSE,
      );

      // Marks internet resources as available.
      if (isset($item['is_internet']) && $item['is_internet']) {
        $item['available'] = TRUE;
      }

      _ding_availability_text($item);
    }
  }
  else {
    $items = ding_availability_holdings($provider_ids);
  }

  return $items;
}

/**
 * Get holdings from the provider.
 *
 * @param array $provider_ids
 *   ID's to fetch data for.
 *
 * @return array
 *   Render array with rendered holdings information.
 */
function ding_availability_holdings(array $provider_ids) {
  $items = ding_provider_invoke('availability', 'holdings', $provider_ids);
  if (!$items) {
    return array();
  }
  foreach ($items as $provider_id => &$item) {
    $item += array(
      'reservable' => FALSE,
      'available' => FALSE,
      'holdings' => array(),
      'ordered_count' => 0,
    );

    if (empty($item['holdings'])) {
      $item['html'] = '<p>' . t('We have 0 copies.') . '</p>';
      continue;
    }

    if (empty($item['is_periodical'])) {
      // Marks internet resources as available.
      if (!empty($item['is_internet'])) {
        $item['available'] = TRUE;
      }

      _ding_availability_text($item);

      // Support for creating the html here instead of in the provider.
      // The provider contains a location array, total_count, available_count,
      // reserved_count, reservable_count, ordered_count.
      // We assume that the provider supports this, if it didn't deliver html.
      if (!isset($item['html'])) {
        $header = array(
          'placement' => t('Placement'),
          'available' => t('At home'),
        );

        $attributes = array(
          'class' => array('availability-holdings-table'),
        );

        // Check if there are items in acquisition.
        foreach ($item['holdings'] as $holding) {
          $item['ordered_count'] += (isset($holding['ordered_count'])) ? (int) $holding['ordered_count'] : 0;
        }
        // If yes, add a column.
        if ($item['ordered_count']) {
          $header['ordered_count'] = t('In acquisition');
        }

        $rows = array();
        $copies = 0;
        $closest_loan = NULL;
        foreach ($item['holdings'] as $holding) {
          // This item is considered to be waited for.
          // Next, the number of holdings is compared to reserved ones.
          // Also keep the next loan date.
          if (empty($item['available']) && !empty($holding['available_from'])) {
            $next_loan_time = strtotime($holding['available_from']);
            $copies++;
            if (empty($closest_loan) || $closest_loan < $next_loan_time) {
              $closest_loan = $next_loan_time;
            }
          }
          $rows[] = ding_availability_holdings_row($holding, array_keys($header));
        }

        $total_count = (int) $item['total_count'];
        $reserved_count = (int) $item['reserved_count'];
        $ordered_count = (int) $item['ordered_count'];
        $total_and_ordered_count = $total_count + $ordered_count;
        $variables = array(
          'holdings' => array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
            '#attributes' => $attributes,
          ),
          'total_count' => $total_count,
          'reserved_count' => $reserved_count,
          'closest_loan' => (count($item['holdings']) == $copies) ? ding_availability_holding_format_time($closest_loan) : NULL,
          'ordered_count' => $ordered_count,
          'total_plus_ordered_count' => $total_and_ordered_count,
          'reserved_text' => t('Cannot be reserved.'),
          'acquisition_text' => '',
          'total_text' => format_plural($total_and_ordered_count,
            'We have 1 copy.',
            'We have @count copies.',
            array('@count' => $total_and_ordered_count)),
        );

        if ($ordered_count) {
          $variables['acquisition_text'] = format_plural($ordered_count,
            '1 copy in acquisition.',
            '@count copies are in acquisition.',
            array('@count' => $ordered_count));
        }

        if ($item['reservable']) {
          $variables['reserved_text'] = format_plural($reserved_count,
            'There is 1 user in queue to loan the material.',
            'There are @count users in queue to loan the material.');
        }

        // Theme the output.
        $item['html'] = theme('ding_holdings', $variables);
      }
    }
    elseif (!empty($item['issues'])) {
      $issues = $item['issues'];
      krsort($issues);

      // Try to load the entity, so we can make reserve buttons if the
      // periodical issues is reservable.
      $entity = NULL;
      // It's unfortunate that we need to make this call, but it will only be
      // for holdings with periodical information.
      $datawell_pid = ding_provider_build_entity_id([$provider_id]);
      if (isset($datawell_pid[$provider_id])) {
        // This call should not be an issue, since the entity was just shown and
        // will most likely be in cache.
        $entity = ding_entity_load($datawell_pid[$provider_id]);
      }

      $variables = [
        'entity' => $entity,
        'issues' => $issues,
        'availability' => $items,
      ];

      $item['html'] = theme('ding_holdings_periodical', $variables);
    }

  }

  return $items;
}

/**
 * Generate a human-readable amount of wait time.
 *
 * @param int $date
 *   Loan date timestamp.
 *
 * @return string
 *   Sane display of time to wait (months/weeks/days).
 */
function ding_availability_holding_format_time($date) {
  $now = date_create(date('Y-m-d'));
  $till = date_create(date('Y-m-d', $date));
  $wait = format_interval($till->getTimestamp() - $now->getTimestamp(), 2);

  $text = t('The waiting time is currently: <strong>@wait</strong>.', array('@wait' => $wait));

  return $text;
}

/**
 * Create a row for the holdings table.
 *
 * @param array $holding
 *   Holding from provider.
 * @param array $fields
 *   Fields to add.
 *
 * @return array
 *   Row suitable for theme_table.
 */
function ding_availability_holdings_row(array $holding, array $fields) {
  $row = array();

  foreach ($fields as $field) {
    switch ($field) {
      case 'placement':
        // Create placement string.
        $row['placement'] = implode(' > ', $holding['placement']);
        break;

      case 'copies':
        // Library copies.
        $row['copies'] = isset($holding['total_count']) ? (int) $holding['total_count'] : 0;
        if (in_array('ordered_count', $fields)) {
          $ordered_count = isset($holding['ordered_count']) ? (int) $holding['ordered_count'] : 0;
          $row['copies'] += $ordered_count;
        }
        break;

      case 'available':
        // Calculate copies home.
        $row['available'] = isset($holding['available_count']) ? (int) $holding['available_count'] : 0;
        $row['available'] += isset($holding['reference_count']) ? (int) $holding['reference_count'] : 0;
        break;

      case 'ordered_count':
        // Copies in acquisition.
        $row['ordered_count'] = $ordered_count;
        break;
    }
  }

  return $row;
}

/**
 * Adds the human readable status text of an item.
 */
function _ding_availability_text(&$item) {
  if ($item['available'] || (isset($item['is_internet']) && $item['is_internet'])) {
    $item['status'] = t('available');
  }
  elseif (!$item['available'] && $item['reservable']) {
    $item['status'] = t('on loan');
  }
  elseif ($item['available'] && !$item['reservable']) {
    $item['status'] = t('not reservable');
  }
  elseif (!$item['available'] && !$item['reservable']) {
    $item['status'] = t('unavailable');
  }
}

/**
 * Returns HTML for the ding_holdings_periodical theme hook.
 *
 * Create list of periodical issues order by year.
 */
function theme_ding_holdings_periodical($variables) {
  $items = array();

  // Remember if this periodical was reservable in any of the issues.
  $reservable = FALSE;

  foreach ($variables['issues'] as $volume => $issues) {
    $iss = array();
    $i = 0;

    foreach ($issues as $key => $availability) {
      $issue = $key;
      $issue_id = $availability['local_id'];

      $normalized_id = md5($issue_id);

      // Build table with holding information for the current volume.
      $holding_data = ding_availability_periodical_holdings_build_table($availability);

      // Check if the volume is reservable and add reservation button.
      if (!empty($issue_id) && ding_availability_periodical_is_reservable($issues[$key])) {
        $reservable = TRUE;
        $item_id = array($issue_id, $volume, $key);
        $item_id = array_map('base64_encode', $item_id);

        $button = array(
          array(
            '#theme' => 'link',
            '#text' => t('Reserve'),
            '#path' => 'ting/object/' . $variables['entity']->id . '/reserve/' . implode('/', $item_id),
            '#options' => array(
              'attributes' => array(
                'class' => array(
                  'action-button',
                  'reserve-button',
                  'reservable',
                  'available',
                  'use-ajax',
                ),
              ),
              'html' => FALSE,
            ),
          ),
        );

        // @todo This should first be render in the template layer.
        $holding_data .= drupal_render($button);
      }

      $holdings = array(
        array(
          'data' => '<div class="periodical-holdings">' . $holding_data . '</div>',
        ),
      );

      // Normal behavior - periodicals, dc.type=tidsskrift.
      $iss[$i] = array(
        'data' => '<span class="ding-periodical-fold ding-reservable-periodical">' . $issue . '</span>',
        'class' => array(
          drupal_html_class('ding-periodical-container'),
        ),
      );

      // Suppose we have dc.type=årbog, where keys for those periodicals are
      // empty or 0. Move the layout out.
      if (empty($issue)) {
        $iss[$i]['data'] = $holdings[0]['data'];
        $iss[$i]['class'][] = drupal_html_class('ding-periodical-no-issues');
        $iss[$i]['class'][] = drupal_html_class('ding-reservable-periodical');
      }
      else {
        // Set children with holding information for periodicals.
        $iss[$i]['children'] = $holdings;
      }

      $i++;
    }

    $vol = array(
      'data' => '<div class="' . drupal_html_class('ding_periodical_fold') . '">' . $volume . '</div>',
      'children' => $iss,
      'class' => array(drupal_html_class('ding_periodical_foldable')),
    );

    $items[] = $vol;
  }

  // Add a prefix with a caption and some basic information.
  // TODO: We could include info about reservation status here like with normal
  // holdings.
  $prefix = '<h3>' . t('Issues') . '</h3>';

  // If any issues was reservable; insert a helpful text.
  if ($reservable) {
    $prefix .= '<p>' . t('To make a reservation you need to find an issue below and click a reservation button.') . '</p>';
  }

  return $prefix . theme('item_list', array('items' => $items, 'attributes' => array('class' => 'ding-periodical-issues')));
}

/**
 * Build a markup for the availability table.
 *
 * @param array $availability
 *   Issue array, with keys:
 *   - local_id: Periodical identifier.
 *   - provider: Provider identifier, 'alma' here.
 *   - placement: Item placement info.
 *     - location: Actual location string.
 *     - ordered_count.
 *     - checked_out_count.
 *     - reference_count.
 *     - total_count.
 *     - available_count.
 *     - reservable.
 *
 * @return string
 *   HTML markup for the availability table.
 */
function ding_availability_periodical_holdings_build_table(array $availability) {
  $header = array(
    'placement' => t('Placement'),
    'copies' => t('Copies'),
    'home' => t('At home'),
  );

  $rows = array();

  $i = 0;
  foreach ($availability['placement'] as $data) {
    $home = isset($data['available_count']) ? (int) $data['available_count'] : 0;
    $home += isset($data['reference_count']) ? (int) $data['reference_count'] : 0;

    $rows[$i] = array(
      $data['location'],
      $data['total_count'],
      $home,
    );

    $i++;
  }

  // Note: If stikcy header is TRUE, it will keep adding the js in FF until the
  // browser goes down.
  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
  ));
}

/**
 * Check if a given issue of a periodical have any copies on the libraries.
 *
 * @param array $issue
 *   An periodical issue form the provider.
 *
 * @return bool
 *   If a copy exists it return TRUE else FALSE.
 */
function ding_availability_periodical_is_reservable(array $issue) {
  foreach ($issue['placement'] as $placement) {
    if ($placement['reservable']) {
      // Found on placement that had a reservable copy.
      return TRUE;
    }
  }

  // No placements found with reservable copy.
  return FALSE;
}

/**
 * Implements hook_block_info().
 *
 * Define availability legend block.
 */
function ding_availability_block_info() {
  return array(
    'legend' => array(
      'info' => t('Ding availability legend'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Define availability legend block.
 */
function ding_availability_block_view($delta) {
  $block = array();
  $block['subject'] = t('Ding availability legend');
  $block['content'] = ding_availability_render_legend();
  return $block;
}

/**
 * Return rendered legend block for availability types.
 */
function ding_availability_render_legend() {

  drupal_add_css(drupal_get_path('module', 'ding_availability') . '/css/ding_availability_legend.css');

  // Construct the image's path (.gif stored in a module subdir).
  $image_path = drupal_get_path('module', 'ding_availability') . '/images/blank.gif';

  // Make some text, image's alt & title tags (SEO, accessibility).
  $availability_legend['available'] = t('Available');
  $availability_legend['on-loan'] = t('On loan');
  $availability_legend['unavailable'] = t('Unavailable');
  $availability_legend['unreservable'] = t('Not reservable');

  // Render image html using theme_image (returns NULL if file doesn't exist).
  foreach ($availability_legend as $key => $val) {
    $format_label = '<span class="availability-label">' . $val . '</span>';
    $image = array('path' => $image_path, 'alt' => $val, 'title' => $val);
    $format_image = theme('image', $image);
    $format_items[] = '<div class="availability-legend-item ' . $key . '">' . $format_image . $format_label . '</div>';
  };
  $format_items[] = '<div class="clearfix"></div>';

  return '<div class="availability-legend">' . implode($format_items) . '</div>';
}

/**
 * Implements hook_preprocessor_ting_object_entities().
 */
function ding_availability_preprocess_ting_object_entities(&$variables) {
  if (!empty($variables['content']) && function_exists('ding_availability_render_legend')) {
    $variables['content']['availability_legend'] = array(
      '#markup' => ding_availability_render_legend(),
      '#weight' => -10,
    );
  }
}

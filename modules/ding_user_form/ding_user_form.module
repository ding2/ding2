<?php

/**
 * @file
 * Handle user login form changes.
 */

/**
 * Implements hook_menu().
 */
function ding_user_form_menu() {
  $items = array();

  $items['admin/config/ding/user'] = array(
    'title' => 'Ding user settings',
    'description' => 'Administer user settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_form_admin_setting_form'),
    'access arguments' => array('administer user settings'),
    'file' => 'includes/ding_user_form.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Modify user login form to use our backend and changes the form fields types
 * to password.
 */
function ding_user_form_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $form['#attributes']['class'][] = 'user-login-form';

      // Add js to handle user login form open/close.
      $form['#attached']['js'][] = drupal_get_path('module', 'ding_user_form') . '/js/ding_user_form.js';

      // Change input type on name field to password as the user may enter CPR.
      $form['name']['#type'] = 'password';

      // Make the name and password not required to by-pass error handling in
      // default validation function. To prevent the "request new password"
      // message.
      $form['name']['#required'] = FALSE;
      $form['pass']['#required'] = FALSE;

      // Hide titles, and add display as placeholders.
      $form['name']['#attributes']['placeholder'] = t('Loan/social security number (without dash)');
      $form['name']['#title_display'] = 'invisible';
      $form['pass']['#attributes']['placeholder'] = t('Pincode (@length digits)',
        ['@length' => ding_user_get_pincode_length()]);
      $form['pass']['#title_display'] = 'invisible';

      // Add our own validation handler, after the default Drupal login
      // validator.
      $pos = array_search('user_login_authenticate_validate', $form['#validate']);
      if ($pos === FALSE) {
        // Not found, insert as next to last.
        $pos = count($form['#validate']) - 1;
      }
      else {
        // After, not before.
        $pos += 1;
      }
      array_splice($form['#validate'], $pos, 0, 'ding_user_form_user_login_validate');

      // Add introduction text to the form.
      $form['intro_text'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('intro-text')),
        'lead' => array(
          '#type' => 'container',
          '#attributes' => array('class' => array('lead')),
          array('#markup' => t('If you want to see what you have borrowed, reserve books or edit your user profile, you must be logged in.')),
        ),
        'text' => array(
          '#type' => 'container',
          '#attributes' => array('class' => array('text')),
        ),
      );

      $user_signup_link = variable_get('ding_user_signup_link', '');
      if (!empty($user_signup_link)) {
        $form['intro_text']['text'] = array(
          '#markup' => t('If you are not a registered user, you can register !link, or you can sign up in person at your local library.', array(
            '!link' => l(t('here'), $user_signup_link, array('external' => TRUE)),
          )),
        );
      }
      else {
        $form['intro_text']['text'] = array(
          '#markup' => t('If you are not a registered user, you can sign up in person at your local library.'),
        );
      }

      // The container holds the form elements and actions.
      $form['user_login_container'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('user-login-container')),
      );

      // Only add a close button to the block form.
      if ($form_id === 'user_login_block') {
        $form['user_login_container']['close']['#markup'] = '<div class="close-user-login"></div>';
      }

      $form['user_login_container']['name'] = $form['name'];
      $form['user_login_container']['pass'] = $form['pass'];

      if (!empty($user_signup_link)) {
        $form['user_login_container']['sign_up_link'] = array(
          '#markup' => l(t('Register as a user'), $user_signup_link, array('external' => TRUE)),
          '#weight' => 9999,
          '#prefix' => '<div class="sign-up-link">',
          '#suffix' => '</div>',
        );
      }

      // Wrap the submit button so it can get an icon.
      $form['actions']['submit']['#prefix'] = '<div class="submit-button-with-icon"><div class="color-and-icon"></div>';
      $form['actions']['submit']['#suffix'] = '</div>';

      $form['user_login_container']['actions'] = $form['actions'];

      // Remove links and all the elements that are now in the elements
      // container.
      unset($form['links'], $form['name'], $form['pass'], $form['actions']);

      // Ensure that ajax requests are continued after the login process and
      // not redirect to the users page.
      $form['user_login_container']['actions']['submit']['#ajax'] = array(
        'callback' => 'ding_user_form_authenticate_ajax_callback',
        'wrapper' => drupal_html_id($form_id),
        'event' => 'click',
      );

      // Allow user provider to alter the login form.
      $function = ding_provider_function('user', 'form_alter', TRUE);
      if ($function) {
        $function($form, $form_state);
      }
      break;
  }
}

/**
 * Custom validator for the login form.
 *
 * Handles authentication with provider, and setting up a profile2 for the
 * user/provider.
 */
function ding_user_form_user_login_validate($form, &$form_state) {
  // If $form_state['uid'] is set and has a true value, Drupal already found a
  // user, so we don't bother. Also, we require name and pass.
  if (isset($form_state['uid']) && $form_state['uid']) {
    // Normal Drupal user have been logged in.
    return;
  }
  try {
    // Trying to login the user using the provider.
    $user_info = array(
      'name' => $form_state['values']['name'],
      'pass' => $form_state['values']['pass'],
      'extra' => $form_state['values'],
    );
    $account = ding_user_authenticate($user_info);

    if ($account !== FALSE) {
      // Log user in.
      $form_state['uid'] = $account->uid;
      // We're not calling user_login_submit like user_external_login_register
      // does, it's already the submit handler.
    }
  }
  catch (DingProviderUserAuthFailure $e) {
    // Check if name and pass where filled out. These fields are not required
    // in the form to prevent the default form validation from displaying the
    // reset password link, which would not make sens for provider users.
    foreach (array('name', 'pass') as $field) {
      if (empty($form_state['values'][$field])) {
        form_set_error($field, t('!name field is required.', array('!name' => $form[$field]['#title'])));
      }
    }

    // If we reach this code the login have failed and we always want to
    // display this message.
    form_set_error('name', t('Sorry, unrecognized username or password. Please contact your local library to request a new password. Contact information can be found on the <a href="@url">library</a> page.', array('@url' => url('biblioteker'))));

    // Obfuscate the user name. We just set the form value to the obfuscated
    // version as user.module will log the failure with the name from the
    // form. If the provider defines its own authnames, this won't match the
    // username that the user would have, but we can't expect the provider
    // to supply it for an invalid login attempt.
    form_set_value($form['user_login_container']['name'], ding_user_default_authname($form_state['values']['name']), $form_state);
  }
  catch (Exception $e) {
    // Exception thrown, log error and carry on.
    watchdog_exception('ding_user_form', $e);
  }
}

/**
 * Ajax callback.
 *
 * Used to ensure that the ajax process is continued after the login has been
 * preformed.
 */
function ding_user_form_authenticate_ajax_callback($form, &$form_state) {
  switch ($form['form_id']['#value']) {
    case 'user_login':
    case 'user_login_block':
      $success = !empty($form_state['uid']);
      break;

    default:
      $success = FALSE;
  }

  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  if ($success) {
    // Close the login form popup.
    $response['#commands'][] = ajax_command_ding_popup_close('ding_user');
    // Open a new popup for instant feedback, so the user knows they're being
    // logged in.
    $response['#commands'][] = ajax_command_ding_popup('ding_user', t('Authenticated'), t('Authenticated, refreshing page.'));
    // When using the refresh option with the popup_close command it will not
    // close the popup, but simply start refreshing, leaving the previously
    // opened feedback popup open.
    $response['#commands'][] = ajax_command_ding_popup_close('ding_user', TRUE);
  }
  else {
    // Else redisplay form and messages.
    // The ding_popup automatically adds a close button, so remove the close
    // button on the user_login_block.
    unset($form['user_login_container']['close']);
    $html = theme('status_messages') . drupal_render($form);
    $response['#commands'][] = ajax_command_ding_popup('ding_user', t('Authenticate'), $html);
  }

  return $response;
}

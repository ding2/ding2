<?php
/**
 * @file
 * Enables listing the newest materials .
 */

use Ting\Search\TingSearchRequest;
use Ting\Search\TingSearchResultInterface;

include_once 'ting_new_materials.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_new_materials_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme().
 */
function ting_new_materials_theme($existing, $type, $theme, $path) {
  return array(
    'ting_new_materials' => array(
      'variables' => array(
        'title' => NULL,
        'legend' => NULL,
        'availability_legend' => NULL,
        'results' => NULL,
      ),
      'template' => 'ting-new-materials',
      'path' => $path . '/templates',
    ),
    'covers_search_results' => array(
      'variables' => array('results' => NULL),
      'template' => 'covers-search-result',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_node_validate().
 *
 * Check that the search query entered on the New materials node yield any
 * results.
 */
function ting_new_materials_node_validate($node, $form, &$form_state) {
  if ($node->type == 'new_materials') {
    // Search the data well with the query from the node.
    $query = ting_new_materials_build_search_query($node, TRUE);
    $results = ting_new_materials_do_search($query);

    if ($results->getNumTotalObjects() == 0) {
      // There may not be any results with in the limit (time period). So try a
      // search without the limit.
      $query = ting_new_materials_build_search_query($node, FALSE);
      $results = ting_new_materials_do_search($query);
      if ($results->getNumTotalObjects() == 0) {
        form_set_error('field_ting_new_materials_search', t('The query did not yield any results.'));
      }
      else {
        // @todo: If we can get any results how about checking the acquisitions
        // date for them and including it in the user. "The latest acquisition
        // is from YYYYMM".
        form_set_error('field_ting_new_materials_limit', t('The query did not yield any results with in the limit given.'));
      }
    }
  }
}

/**
 * Implements hook_node_update().
 *
 * Clear cache of search results (used in the panels plugin) for the node being
 * updated.
 */
function ting_new_materials_node_update($node) {
  if ($node->type == 'new_materials') {
    cache_clear_all('ting_new_materials_' . $node->nid, 'cache', TRUE);
  }
}

/**
 * Builds a search query string against the Data Well.
 *
 * @param Entity $entity
 *   A new materials entity content type.
 * @param bool $limit_query
 *   If TRUE the search query will be limited to the number of months given in
 *   the entity. Default TRUE.
 *
 * @return string
 *   Ting data well search string.
 */
function ting_new_materials_build_search_query($entity, $limit_query = TRUE) {
  // Get search query from the entity by using a metadata wrapper to access the
  // data.
  $wrapper = entity_metadata_wrapper('node', $entity);
  $query = $wrapper->field_ting_new_materials_search->value();

  // Check if limit expression should be added.
  if ($limit_query) {
    // Get the limit (number of months 1 to 12).
    $limit = $wrapper->field_ting_new_materials_limit->value();

    // Add the limit to the query.
    $query .= ting_new_materials_make_limit_query($limit);
  }
  $query = '(' . $query . ')';

  return $query;
}

/**
 * Limit a search query expression to a specified number of days.
 *
 * @param int $limit
 *   The number of days to limit.  Min 1 and max 365 month. 0
 *   means unlimited.
 *
 * @return string
 *   The search query expression limited by days.
 */
function ting_new_materials_make_limit_query($limit = 0) {
  $query = "";

  if ($limit > 0) {
    // Get current date (defaults to now).
    $current_year = date('Y');
    $last_year = date("Y",strtotime("-1 year"));
    $date = new DateTime();
    $limit_period = 'P' . $limit . 'D';
    $date->sub(new DateInterval($limit_period));
    $query = ' AND term.acquisitionDate>=' . $date->format('Ymd') . ' AND (år=' . $current_year . ' OR år=' . $last_year . ')';
  }

  return $query;
}

/**
 * Performs a query against the Data Well and returns the objects.
 *
 * @param string $query
 *   The query string.
 * @param int $page
 *   The current page number.
 * @param int $num_per_page
 *   The page number.
 *
 * @return \Ting\Search\TingSearchResultInterface
 *   The search result.
 */
function ting_new_materials_do_search($query, $page = 0, $num_per_page = 10) {
  // Build search options and ensure that they are sorted correctly.
  $query = ting_start_query()
    ->withRawQuery($query)
    ->withCollectionType(TingSearchRequest::COLLECTION_TYPE_SINGLE_OBJECT)
    ->withSort('date_descending')
    ->withPage($page + 1)
    ->withCount($num_per_page);
  return $query->execute();
}

/**
 * Extract ids from the search results.
 *
 * @param TingSearchResultInterface[] $search_results
 *   The search result.
 *
 * @return NewMaterialsCoverObject[]
 *   A map of cover objects keyed by local id.
 */
function ting_new_materials_process_search_results(array $search_results) {
  $collections = array_map(function(TingSearchResultInterface $result) {
    return $result->getTingEntityCollections();
  }, $search_results);
  $collections = array_merge(...$collections);

  $cover_objects = array_map(function(TingCollection $collection) {
    $cover_object = NULL;

    $object = $collection->getPrimary_object();
    if (!empty($object)) {
      $cover_object = new NewMaterialsCoverObject();

      $cover_object->title = $object->getTitle();
      $cover_object->creators = $object->getCreators();
      $cover_object->id = $object->getId();
      $cover_object->localId = $object->getLocalId();
      $cover_object->ownerId = $object->getOwnerId();
      $cover_object->collectionTitle = $collection->getTitle();

      // Get link to link the result back to the collection.
      $uri = entity_uri('ting_collection', $collection);
      $cover_object->uri = $uri['path'];
    }

    return $cover_object;
  }, $collections);

  // Remove empty values - if a collection has no primary object.
  $cover_objects = array_filter($cover_objects);

  // We must return a map of cover objects keyed by local ids.
  $ids = array_map(function(NewMaterialsCoverObject $cover_object) {
    return $cover_object->localId;
  }, $cover_objects);
  return array_combine($ids, $cover_objects);
}

/**
 * Renders a inspiration list.
 *
 * @param array $cached_results
 *   A array of lightweight of objects with the data needed to show a material on a inspiration list page..
 * @param node $node
 *  The inspiration list page.
 * @return array
 *  A render array containg the inspiration list.
 */
function ting_new_materials_render_cover($cached_results, $title) {
  $results = array();
  foreach ($cached_results as $object) {
    // Add the result to an array for the "ting_search_results" theme
    // function.
    $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ting_new_materials_cover')));
    $options = array(
      'html' => TRUE,
      'attributes' => array('title' => $object->collectionTitle),
    );
    $results[] = array(
      'snippet' => l($image, $object->uri, $options)
    );
  }
    // Set default page result.
  $content = array(
    '#theme' => 'ting_new_materials',
    '#title' => $title,
  );

  // If any search result have been found add them to the array.
  if (!empty($results)) {
    $content['#results'] = array(
      '#theme' => 'covers_search_results',
      '#results' => $results,
    );
  }
  return $content;
}

/**
 * Builds a list of materials which have a covers.
 *
 * @param TingClientSearchResult $search_result
 *  Search result containg 2x the number og objects needed. This is because not every material has a cover.
 * @param int $number_of_objects
 *  The number of objects
 * @return array $cached_results
 *   A array of lightweight of objects with the data needed to show a material on a inspiration list page.
 */
function ting_new_materials_build_search_result($search_objects, $number_of_objects ) {
  $cached_results = NULL;

  module_load_include('covers.inc', 'ting_new_materials');
  $search_objects = ting_new_materials_check_covers($search_objects, $number_of_objects);
  $number_found = 0;
  foreach ($search_objects as $object) {
    // If there is a image
    if ($object->hasImage) {
      $cached_results[] = $object;
      $number_found++;
      if ($number_found >= $number_of_objects) {
        break;
      }
    }
  }
  return $cached_results;
}

/**
 * Gets the objects from the well.
 *
 * @param string $query
 *  The query to be performed
 * @param int $number_of_objects
 *  The number of objects to get. A higher number gives better result but costs performancewise.
 *
 * @return \Ting\Search\TingSearchResultInterface[]
 *   A array of TingSearchResultInterface objects.
 */
function ting_new_materials_perform_search($query, $number_of_objects = 50) {
  $results = array();
  $objects_per_request = 50;
  $i = 0;
  $number_of_objects_retrieved = 0;
  do {
    $search_result = ting_new_materials_do_search($query, $i, $objects_per_request);
    if ($search_result->getNumTotalObjects() > 0) {
      array_push($results, $search_result);
      $i++;
      $number_of_objects_retrieved += $objects_per_request;
    } else {
      break; //Search results was false.
    }
  } while ($search_result->hasMoreResults() && $number_of_objects_retrieved < $number_of_objects);
  return $results;
}

/**
 * Implement hook node_presave
 * Clear cached new materials when updateing the node.
 *
 */
function ting_new_materials_node_presave ($node) {
  if ($node->type == 'ting_new_materials') {
    cache_clear_all('ting_new_materials_' . $node->nid, 'cache');
  }
}

/**
 * Lightweight object representing a material in a inspiration list.
 */
class NewMaterialsCoverObject {

  public $title;
  public $creators;
  public $id;
  public $localId;
  public $ownerId;
  public $collectionTitle;
  public $uri;
  public $hasImage;

}

<?php

/**
 * @file
 * Enables option to upload covers to cover service.
 */

define('DDB_COVER_UPLOAD_CONDITIONS', 0);
define('DDB_COVER_UPLOAD_SEARCH', 1);
define('DDB_COVER_UPLOAD_IMAGE_EDITOR', 2);
define('DDB_COVER_UPLOAD_METADATA', 3);
define('DDB_COVER_UPLOAD_UPLOAD', 4);
define('DDB_COVER_UPLOAD_FILE_PATH', 'ddb_cover_upload_uploaded');

use CoverServiceUpload\Configuration;
use GuzzleHttp\Client;


/**
 * Implements hook_init().
 */
function ddb_cover_upload_init() {
  drupal_add_css(drupal_get_path('module', 'ddb_cover_upload') . '/css/ddb_cover_upload.css');
}

/**
 * Implements hook_menu().
 */
function ddb_cover_upload_menu() {
  $path = drupal_get_path('module', 'ddb_cover_upload') . '/includes';

  $items['admin/config/ting/ddb_cover_upload/ajax'] = array(
    'title' => 'Upload image',
    'description' => 'Upload base64 encoded image.',
    'page callback' => 'ddb_cover_upload_image_upload_ajax',
    'access arguments' => array('upload cover'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/ting/ddb_cover_upload'] = array(
    'title' => 'Upload cover to cover service',
    'description' => 'Upload an image to cover service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddb_cover_upload_form'),
    'access arguments' => array('upload cover'),
    'file' => 'ddb_cover_upload.admin.inc',
    'file path' => $path,
  );

  $items['admin/config/ting/ddb_cover_upload/submitted'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Communicating with cover service',
    'description' => 'Communicating with cover service.',
    'page callback' => 'ddb_cover_upload_submitted',
    'access arguments' => array('upload cover'),
    'file' => 'ddb_cover_upload.submitted.inc',
    'file path' => $path,
  );

  $items['admin/config/ting/ddb_cover_upload/submitted/check-submission'] = array(
    'page callback' => '_cover_upload_check_submission',
    'access arguments' => array('upload cover'),
    'type' => MENU_CALLBACK,
    'file' => 'ddb_cover_upload.submitted.inc',
    'file path' => $path,
  );

  $items['admin/config/ting/ddb_cover_upload/new'] = array(
    'title' => 'Upload cover to cover service',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/ting/ddb_cover_upload/list'] = array(
    'title' => 'List uploaded covers',
    'page callback' => 'ddb_cover_upload_list',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'access arguments' => array('upload cover'),
    'file' => 'ddb_cover_upload.uploaded_list.inc',
    'file path' => $path,
  );

  $items['admin/config/ting/ddb_cover_upload/list/delete/%'] = array(
    'title' => 'Delete cover',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddb_cover_upload_delete', 6),
    'type' => MENU_CALLBACK,
    'access arguments' => array('upload cover'),
    'file' => 'ddb_cover_upload.uploaded_list.inc',
    'file path' => $path,
  );

  $items['admin/config/ting/ddb_cover_upload/settings'] = array(
    'title' => 'Cover upload settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddb_cover_upload_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'access arguments' => array('administer site configuration'),
    'file' => 'ddb_cover_upload.settings.inc',
    'file path' => $path,
  );

  $items['admin/config/ting/ddb_cover_upload/autocomplete/%'] = array(
    'page callback' => '_cover_upload_search_autocomplete',
    'page arguments' => array(5),
    'access arguments' => array('upload cover'),
    'type' => MENU_CALLBACK,
    'file' => 'ddb_cover_upload.autocomplete.inc',
    'file path' => $path,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ddb_cover_upload_permission() {
  return array(
    'upload cover' => array(
      'title' => t('Upload cover to cover service'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ddb_cover_upload_theme($existing, $type, $theme, $path) {
  return array(
    'ddb_cover_upload_conditions' => array(
      'variables' => array(
        'uri' => NULL,
      ),
      'template' => 'ddb-cover-upload-conditions',
      'path' => $path . '/templates/',
    ),
    'ddb_cover_upload_image_editor' => array(
      'template' => 'ddb-cover-upload-image-editor',
      'path' => $path . '/templates/',
    ),
    'ddb_cover_upload_search_preview' => array(
      'variables' => array(
        'content' => FALSE,
      ),
      'template' => 'ddb-cover-upload-search-preview',
      'path' => $path . '/templates/',
    ),
    'ddb_cover_upload_best_result' => array(
      'variables' => array(
        'path' => drupal_get_path('module', 'ddb_cover_upload'),
      ),
      'template' => 'ddb-cover-upload-best-result',
      'path' => $path . '/templates/',
    ),
    'ddb_cover_upload_meta_data' => array(
      'variables' => array(
        'entity' => NULL,
        'material' => NULL,
        'meta_data' => NULL,
        'image_url' => NULL,
      ),
      'template' => 'ddb-cover-upload-meta-data',
      'path' => $path . '/templates/',
    ),
    'ddb_cover_upload_meta_copyright' => array(
      'variables' => array(
        'uri' => NULL,
      ),
      'template' => 'ddb-cover-upload-meta-copyright',
      'path' => $path . '/templates/',
    ),
    'ddb_cover_upload_submitted' => array(
      'variables' => array(
        'data' => NULL,
        'image' => NULL,
        'path' => drupal_get_path('module', 'ddb_cover_upload'),
      ),
      'template' => 'ddb-cover-upload-submitted',
      'path' => $path . '/templates/',
    ),
  );
}

/**
 * Implements hook_ding_provider_user().
 */
function ddb_cover_upload_ding_provider_user() {
  return array(
    'openplatform_token' => array(
      'required' => TRUE,
    ),
  );
}

/**
 * Ajax upload base64 encoded image data.
 *
 * Store posted base64 encoded image as file and return json array with url.
 */
function ddb_cover_upload_image_upload_ajax() {
  $error = NULL;
  $file = NULL;

  if (isset($_POST['is']) && isset($_POST['base64data'])) {
    $is = $_POST['is'];
    $data = $_POST['base64data'];

    if (preg_match('/^data:image\/(\w+);base64,/', $data, $type)) {
      $data = substr($data, strpos($data, ',') + 1);
      $type = strtolower($type[1]);

      if (!in_array($type, array('jpg', 'jpeg', 'png'))) {
        $error = t('Invalid image type uploaded.');
      }

      $data = base64_decode($data);
      if ($data === false) {
        $error = t('The uploaded data is not base64 encoded.');
      }
    }
    else {
      $error = t('The uploaded image did not match data URI with image data.');
    }

    // Extract fid from filename.
    $filename = $is . '.' . $type;
    $uri = 'public://' . DDB_COVER_UPLOAD_FILE_PATH;

    file_prepare_directory($uri, FILE_CREATE_DIRECTORY);

    $file = file_unmanaged_save_data($data, $uri . '/' . $filename, FILE_EXISTS_REPLACE);
    if ($file === FALSE) {
      $error = t('Failed to save file to the server.');
    }
  }
  else {
    $error = t('No post data found in image upload. Please contact you system administrator.');
  }

  drupal_json_output(array(
    'error' => $error,
    'uri' => $file,
    'url' => $file ? file_create_url($file) . '?' . REQUEST_TIME : '',
  ));
  drupal_exit();
}

/**
 * Implements hook_ding_entity_buttons().
 *
 * Add entity button to allow for faster upload of covers directly from a ting
 * object view.
 */
function ddb_cover_upload_ding_entity_buttons($type, $entity, $view_mode, $widget = 'default') {
  if (user_access('upload cover') && $type == 'ding_entity') {
    return array(
      array(
        '#theme' => 'link',
        '#text' => t('Upload cover'),
        '#path' => 'admin/config/ting/ddb_cover_upload',
        '#options' => array(
          'query' => array(
            'pid' => $entity->id,
          ),
          'attributes' => array(
            'class' => array(
              'action-button cover-upload-button',
            ),
            'data-local-id' => $entity->localId,
          ),
          'html' => FALSE,
        ),
        '#weight' => 10,
      ),
    );
  }

  return '';
}

/**
 * Helper to get configuration for the upload API.
 *
 * @return \CoverServiceUpload\Configuration
 *   API configuration.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function ddb_cover_upload_client_config() {
  $config = Configuration::getDefaultConfiguration();

  // Get access token for the library.
  $token = ding_provider_invoke('openplatform_token', 'for_agency');;
  $config->setAccessToken($token);

  $config->setHost(variable_get('ddb_cover_upload_host', 'https://upload.cover.dandigbib.org'));

  return $config;
}

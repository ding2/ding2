<?php

/**
 * @file
 * Module for interlibrary loans.
 */

/**
 * Implements hook_menu().
 *
 * Used to invoke ding_popup to tell if the order was successful or not.
 */
function ding_ill_menu() {
  $items = array();

  $items['ting/ill/order/%'] = array(
    'title' => 'Order a library material',
    'page callback' => array('ding_ill_popup_order'),
    'page arguments' => array(3),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('perform reservation'),
  );

  $items['admin/config/ding/ill'] = array(
    'title' => 'Ding Ill settings',
    'description' => 'Administer interlibrary loan settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_ill_admin_setting_form'),
    'access arguments' => array('administer ill settings'),
    'file' => 'ding_ill.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Ensure ding_ill's implmentation of opensearch_pre_execute runs after the
 * providers.
 */
function ding_ill_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'opensearch_pre_execute') {
    return;
  }
  $ding_ill_implementation = $implementations['ding_ill'];
  unset($implementations['ding_ill']);
  $implementations['ding_ill'] = $ding_ill_implementation;
}

/**
 * Implements hook_permission().
 */
function ding_ill_permission() {
  return array(
    'administer ill settings' => array(
      'title' => t('Administer interlibrary loan settings'),
    ),
  );
}

/**
 * The form for the interlibrary loan.
 */
function ding_ill_order_form($form, &$form_state, $ting_object, $preferred_branch_set) {
  if (ding_provider_implements('reservation', 'options') && $preferred_branch_set === FALSE) {
    global $user;
    $provider_form = ding_provider_invoke('reservation', 'options', $user);
    // We only want to be able to select provider options, not any descriptions.
    $form['provider_options'] = reset($provider_form);
    $form['description'] = array(
      '#markup' => '<p>' . t(
        'You have to select the default pickup location to order "@title".',
        array('@title' => $ting_object->getTitle())
      ) . '</p>',
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Place order'),
      '#ajax' => array(
        'callback' => 'ding_ill_order',
      ),
    );
  }

  $form['#args'] = array('ting_object' => $ting_object);

  return $form;
}

/**
 * Checks if preferred branch is selected and creates the order.
 *
 * @var DingIllResponse $ill_response
 */
function ding_ill_order($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  // Redisplay form if any errors in submission.
  if (form_get_errors()) {
    $html = drupal_render($form);
  }
  else {
    /** @var \Ting\TingObject $ting_object */
    $ting_object = $form['#args']['ting_object'];

    // Try to make the ILL request.
    $client = ding_ill_client();

    $request = new DingIllRequest();
    $request->setMaterials(array($ting_object->getId()));
    // Remove 'DK-' from the branch ID.
    // OpenPlatform expects the branch ID without the 'DK-' prefix.
    $branch_id = str_replace('DK-', '', $form['provider_options']['#value']);
    $request->setPickupBranch($branch_id);

    $ill_response = $client->request('GET', 'order', $request);

    if ($ill_response->getStatusCode() === 200) {
      $html = '<p>' . t(
        'You have ordered "@title" from a library outside the municipality, and
        therefore it is not possible to estimate the waiting time.
        It can also take up to an hour before your order can be viewed at your
        borrower\'s status.',
        array('@title' => $ting_object->getTitle())
      ) . '</p>';
      $html .= '<p>' . t('Your order id: @order_id', array(
        '@order_id' => $ill_response->getOrderId(),
      )) . '</p>';
    }
    else {
      $html = t('An error occurred when trying to place order: @error', array(
        '@error' => $ill_response->getError(),
      ));
    }
  }

  $response['#commands'][] = ajax_command_ding_popup(
    'ding_ill', t('Inter Library Loan'), $html
  );

  return $response;
}

/**
 * Success/failure popup message for interlibrary loan.
 *
 * @param string $pid
 *   PID for the material we try to order from another library.
 *
 * @return array
 *   The form triggering the AJAX popup.
 */
function ding_ill_popup_order($pid) {
  // The ting object we try to order.
  $ting_object = ding_entity_load($pid);
  // Load the global user in order to get the patrons preferred branch.
  global $user;

  // Check if user have preferred branch and interest period, if so
  // submit the reservation form. If not display another form for with
  // the options to select branch and period.
  $defaults = ding_provider_invoke('reservation', 'default_options', $user);
  $matches = preg_grep("/preferred_branch$/", array_keys($defaults));
  $preferred_branch_set = !empty($defaults[array_shift($matches)]) ? TRUE : FALSE;

  $form = ding_provider_get_form(
    'ding_ill_order_form',
    /** @var \Ting\TingObject $ting_object */
    $ting_object,
    $preferred_branch_set
  );

  $commands[] = ajax_command_ding_popup(
    'ding_ill',
    t('Interlibrary loan'),
    render($form)
  );

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_ill_ding_entity_buttons($type, $entity) {
  /** @var \OpenSearch\OpenSearchTingObject $entity */
  $build = array();
  $options = array(
    'attributes' => array(
      'class' => 'action-button button-black use-ajax',
    ),
  );

  $build[] = array(
    '#type' => 'markup',
    '#ajax' => array(
      'callback' => 'ding_ill_popup',
    ),
    '#markup' => l(
      t('Order from another library'),
      '/ting/ill/order/' . $entity->getId(),
      $options
    ),
  );

  return $build;
}

/**
 * Returns an instance of the ding ill client.
 *
 * @return DingIllClient
 *   The ding_ill client.
 */
function ding_ill_client() {
  return new DingIllClient(
    variable_get('ding_ill_api_url'),
    variable_get('ding_ill_token')
  );
}

/**
 * Implements hook_opensearch_pre_execute().
 *
 * When interlibrary loans are enabled, don't filter for local holdings.
 */
function ding_ill_opensearch_pre_execute($request) {
  if ($request instanceof TingClientSearchRequest && variable_get('ding_ill_enabled')) {
    $request->setFilterLocalHoldings(FALSE);
  }
}

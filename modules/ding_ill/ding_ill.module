<?php

/**
 * @file
 * Module for interlibrary loans.
 */

/**
 * Implements hook_menu().
 *
 * Used to invoke ding_popup to tell if the order was successful or not.
 */
function ding_ill_menu() {
  $items = array();

  $items['ting/ill/order/%'] = array(
    'title' => 'Order a library material',
    'page callback' => array('ding_ill_popup_order'),
    'page arguments' => array(3),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('perform reservation'),
  );

  $items['admin/config/ding/ill'] = array(
    'title' => 'Ding Ill settings',
    'description' => 'Administer interlibrary loan settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_ill_admin_setting_form'),
    'access arguments' => array('administer ill settings'),
    'file' => 'ding_ill.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Ensure ding_ill's implmentation of opensearch_pre_execute runs after the
 * providers.
 */
function ding_ill_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'opensearch_pre_execute') {
    return;
  }
  $ding_ill_implementation = $implementations['ding_ill'];
  unset($implementations['ding_ill']);
  $implementations['ding_ill'] = $ding_ill_implementation;
}

/**
 * Implements hook_permission().
 */
function ding_ill_permission() {
  return array(
    'administer ill settings' => array(
      'title' => t('Administer interlibrary loan settings'),
    ),
  );
}

/**
 * The form for the interlibrary loan.
 */
function ding_ill_order_form($form, &$form_state, $ting_object) {
  if (ding_provider_implements('reservation', 'options')) {
    global $user;
    $provider_form = ding_provider_invoke('reservation', 'options', $user);
    // We only want to be able to select provider options, not any descriptions.
    $form['description'] = array(
      '#markup' => '<p>' . t(
        'You have to enter pin, select the default pickup and interest period location to order "@title".',
        array('@title' => $ting_object->getTitle())
      ) . '</p>',
    );

    $form['pin'] = [
      '#type' => 'password',
      '#title' => t('Pin code'),
      '#required' => TRUE,
    ];
    $form['provider_options'] = $provider_form;
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Place order'),
      '#ajax' => array(
        'callback' => 'ding_ill_order',
      ),
    );
  }

  $form['#args'] = array('ting_object' => $ting_object);

  return $form;
}

/**
 * Checks if preferred branch is selected and creates the order.
 *
 * @var DingIllResponse $ill_response
 */
function ding_ill_order($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );

  // Redisplay form if any errors in submission.
  if (form_get_errors()) {
    $html = drupal_render($form);
  }
  else {
    /** @var \Ting\TingObject $ting_object */
    $ting_object = $form['#args']['ting_object'];

    // Try to make the ILL request.
    $client = ding_ill_client();

    $request = new DingIllRequest();
    $request->setMaterials(array($ting_object->getId()));
    // Remove 'DK-' from the branch ID.
    // OpenPlatform expects the branch ID without the 'DK-' prefix.
    $branch_id = str_replace('DK-', '', $form['provider_options']['fbs_preferred_branch']['#value']);
    $request->setPickupBranch($branch_id);
    $request->setPin($form['pin']['#value']);

    $ill_response = $client->request('GET', 'order', $request);

    if ($ill_response->getStatusCode() === 200) {
      $html = '<p>' . t(
        '@title has been ordered from another library for pickup at @branch. The order will appear on your loan status soon.',
        array('@title' => $ting_object->getTitle(), '@branch' => $form['provider_options']['fbs_preferred_branch']['#options'][$request->getPickUpBranch()])
      ) . '</p>';
      $html .= '<p>' . t('Your order id: @order_id', array(
        '@order_id' => $ill_response->getOrderId(),
      )) . '</p>';
    }
    else {
      $html = t('An error occurred when trying to place order: @error', array(
        '@error' => $ill_response->getError(),
      ));
    }
  }

  $response['#commands'][] = ajax_command_ding_popup(
    'ding_ill', t('Inter Library Loan'), $html
  );

  return $response;
}

/**
 * Success/failure popup message for interlibrary loan.
 *
 * @param string $pid
 *   PID for the material we try to order from another library.
 *
 * @return array
 *   The form triggering the AJAX popup.
 */
function ding_ill_popup_order($pid) {
  // Check if the logged in user is a library user.
  global $user;
  if (!user_is_logged_in()) {
    // Trigger log-in (the reservation link will be triggered on success).
    $commands[] = ajax_command_ding_user_authenticate('');
  }
  else {
    // The ting object we try to order.
    $ting_object = ding_entity_load($pid);

    $form[] = ding_provider_get_form(
      'ding_ill_order_form',
      /** @var \Ting\TingObject $ting_object */
      $ting_object
    );

    $commands[] = ajax_command_ding_popup(
      'ding_ill',
      t('Interlibrary loan'),
      render($form)
    );
  }

  // Return the ajax commands as an render array.
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_ding_entity_buttons().
 */
function ding_ill_ding_entity_buttons($type, $entity) {
  /** @var \TingEntity $entity */
  $build = array();

  $ting_object = $entity->getTingObject();
  $local_id = $entity->getLocalId();
  $holdings = ding_availability_holdings([$local_id]);

  $available = $holdings[$local_id]['total_count'] > 0 ? TRUE : FALSE;

  if ($ting_object->isOnline() || $available) {
    return $build;
  }

  $options = array(
    'attributes' => array(
      'class' => 'action-button button-order use-ajax',
    ),
  );

  $build[] = array(
    '#type' => 'markup',
    '#ajax' => array(
      'callback' => 'ding_ill_popup',
    ),
    '#markup' => l(
      t('Order from another library'),
      '/ting/ill/order/' . $entity->getId(),
      $options
    ),
  );

  return $build;
}

/**
 * Returns an instance of the ding ill client.
 *
 * @return DingIllClient
 *   The ding_ill client.
 */
function ding_ill_client() {
  $creds = ding_user_get_creds();
  return new DingIllClient(
    variable_get('ding_ill_api_url'),
    variable_get('ding_ill_token_url'),
    variable_get('ding_ill_client_id'),
    variable_get('ding_ill_client_secret'),
    $creds['library_card_number'],
    variable_get('ting_agency', FALSE)
  );
}

/**
 * Implements hook_opensearch_pre_execute().
 *
 * When interlibrary loans are enabled, don't filter for local holdings.
 */
function ding_ill_opensearch_pre_execute($request) {
  if ($request instanceof TingClientSearchRequest && variable_get('ding_ill_enabled')) {
    $request->setFilterLocalHoldings(FALSE);
  }
}

/**
 * Implements hook_init().
 *
 * Add JS variable to determine if the ding_ill module is enabled.
 */
function ding_ill_init() {
  drupal_add_js(array('ding_ill' => array('enabled' => TRUE)), 'setting');
}

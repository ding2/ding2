<?php
/**
 * @file
 * Code for the Ding event feature.
 */

include_once 'ding_event.features.inc';


/**
 * Implements hook_menu
 * Setting to administer currency shown on events
 */
function ding_event_menu() {
  $items['admin/config/ding_event'] = array(
    'title' => 'Event',
    'description' => 'Manage event settings.',
    'position' => 'right',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/ding_event/settings'] = array(
    'title' => 'Ding event settings',
    'description' => 'Administer event settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_event_admin_setting_form'),
    'access arguments' => array('administer event settings'),
    'file' => 'ding_event.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function ding_event_field_formatter_info() {
  return array(
    'date_time_seperate_lines' => array(
      'label' => t('Date and time on seperate lines'),
      'field types' => array('datetime'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ding_event_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $formatter = $display['type'];
  $vars = array('timezone' => NULL, 'dates' => NULL, 'attributes' => array());

  switch ($formatter) {
    case 'date_time_seperate_lines':
      foreach ($items as $delta => $item) {
        $vars['dates'] = date_formatter_process($formatter, $entity_type, $entity, $field, $instance, $langcode, $item, $display);
        $element[$delta] = array('#markup' => theme('date_time_seperate_lines', $vars));
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function ding_event_theme() {
  return array(
    'date_time_seperate_lines' => array(
      'variables' => array(
        'variables' => array(
          'timezone' => NULL,
          'dates' => NULL,
          'attributes' => NULL,
        ),
      ),
    ),
  );
}

/**
 * Default theme implementation of date_time_seperate_lines.
 *
 * Theme function which shows to lines with date and time.
 * Used on ding_events.
 */
function theme_date_time_seperate_lines($vars) {
  if (isset($vars['dates'])) {
    $dates = $vars['dates'];
    $time = $dates['value']['formatted_time'];
    $date = format_date(strtotime($dates['value']['formatted_iso']), 'ding_date_only');

    return '<div class="time field-label-inline clearfix"><div class="field-label">' . t('Time:') . '</div>' .
      '<div class="field-items">' . $time . '</div></div>' .
      '<div class="date field-label-inline clearfix"><div class="field-label">' . t('Date:') . '</div>' .
      '<div class="field-items">' . $date . '</div></div>';
  }

  return FALSE;
}

/**
 * Implements hook_post_features_revert().
 */
function ding_event_post_features_revert() {
  ding_event_install_menu_position('revert');
}

/**
 * Implements hook_post_features_disable_feature().
 */
function ding_event_post_features_disable_feature() {
  ding_event_install_menu_position('delete');
}

/**
 * Implements hook_post_features_enable_feature().
 */
function ding_event_post_features_enable_feature() {
  ding_event_install_menu_position('install');
}

/**
 * Helper function to install menu position rule.
 *
 * Menu position rules do not have features support, so we use this function
 * to install theme when the feature (this module) is enable, disable or
 * reverted.
 */
function ding_event_install_menu_position($op = 'install') {
  module_load_include('inc', 'menu_position', 'menu_position.admin');

  // Check if rule exists.
  $exists = db_select('menu_position_rules', 'mpr')
    ->fields('mpr', array('rid'))
    ->condition('admin_title', 'Events')
    ->execute()
    ->fetchField();

  if ($exists && $op == 'revert') {
    // The rule exists, so we delete it.
    menu_position_delete_rule($exists);

    // Activate installation of the rule.
    $exists = FALSE;
    $op = 'install';
  }

  if (!$exists && ($op == 'install' || $op == 'revert')) {
    // Define conditions.
    $conditions = array(
      'content_type' => array(
        'content_type' => array(
          'ding_group' => 'ding_event',
        ),
      ),
    );

    // Find the parent element.
    $plid = db_select('menu_links', 'ml')
      ->fields('ml', array('mlid'))
      ->condition('link_path', 'arrangementer', '=')
      ->execute()->fetchField();

    // Add the rule.
    if ($plid) {
      menu_position_add_rule(array(
        'admin_title' => 'Events',
        'conditions'  => $conditions,
        'menu_name'   => 'main-menu',
        'plid'        => $plid,
      ));
    }
    else {
      watchdog('ding_event', 'Unable to create menu position rule for ding event', array(), WATCHDOG_WARNING);
    }
  }

  if ($exists && $op == 'delete') {
    // The rule exists, so we delete it.
    menu_position_delete_rule($exists);
  }
}

/**
 * Implements hook_views_pre_execute().
 *
 * Ensure that events tha are connected to more than one OG group or tag is only
 * displayed once in related events on event page.
 */
function ding_event_views_pre_execute(&$view) {
  if ($view->name == 'ding_event' && in_array($view->current_display, array('ding_event_list'))) {
    $view->build_info['query']->groupBy('node.nid');
    $view->build_info['count_query']->groupBy('node.nid');
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function ding_event_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  // Add a custom view more link for the event list for a group.
  // The standard read more link points to standard event list and it does not
  // seem to be possible to provide a custom url in another way.
  // Adding a link in a footer text field means that the text will not be
  // translatable and the url will not be processed using path alias.
  if ($view->name = 'ding_event' &&
    $view->current_display == 'ding_event_groups_list'
  ) {
    if (!empty($view->result[0]->og_membership_node_gid)) {
      $vars['more'] = theme(
        'views_more',
        array(
          'more_url' => url(
            'temaer/' . $view->result[0]->og_membership_node_gid . '/arrangementer'
          ),
          'link_text' => t('See all events'),
        )
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function ding_event_permission() {
  return array(
    'administer event settings' => array(
      'title' => t('Administer event settings'),
    ),
  );
}

/**
 * Implements hook_views_pre_build().
 */
function ding_event_views_pre_build(&$view) {
  switch ($view->name . ' ' . $view->current_display) {
    case 'ding_event ding_event_list_frontpage':
      if (variable_get('ding_event_frontpage_promoted', TRUE) == FALSE) {
        unset($view->filter['promote']);
      }

      $view->items_per_page = variable_get('ding_event_frontpage_items_per_page', 6);
      break;

    case 'ding_event ding_event_list':
      $view->items_per_page = variable_get('ding_event_list_items_per_page', 10);

      if (variable_get('ding_event_list_group_by_date', FALSE)) {
        $view->field['field_ding_event_date_1']->options['settings']['format_type'] = 'ding_date_only_version2';
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_event_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form_state['view']->name == 'ding_event' && $form_state['view']->current_display == 'ding_event_list') {

    // Add placeholder to title field.
    if (!empty($form['title'])) {
      $form['title']['#attributes']['placeholder'] = t('Search for an event');
    }

    // Hide reset button if there's nothing to reset.
    foreach ($form_state['view']->exposed_input as $exposed_input) {
      $input = $exposed_input;
    }
    if (empty($input)) {
      $form['reset']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook date_popup_process_alter().
 */
function ding_event_date_popup_process_alter(&$element, &$form_state, $context) {
  // Add placeholder in event view.
  if (isset($form_state['view']) && $form_state['view']->name == 'ding_event' && $form_state['view']->current_display == 'ding_event_list') {
    $element['date']['#attributes']['placeholder'] = t('Select a date');
  }
}

function ding_event_metatag_metatags_view_alter(&$output, $instance, $options) {
  if ($instance == 'panels:ding_event_node_view') {
    $node = menu_get_object();
    $node_view = node_view($node);
    $metatag = '';

    // Metatag elements.
    $lead_out = $node->title;
    $location_out = '';
    $date_out = '';
    $price_out = ', ' . t('free', array(), array('context' => 'Price'));

    // Lead.
    $lead = field_get_items('node', $node, 'field_ding_event_lead');
    if (!empty($lead)) {
      $lead_out = $lead[0]['value'];
    }

    // Location.
    $library_gid = field_get_items('node', $node, 'og_group_ref', 'target_id');
    $location = field_get_items('node', $node, 'field_ding_event_location');
    if (isset($library_gid) && empty($location[0]['name_line'])) {
      $library_node = node_load($library_gid[0]['target_id']);
      $location_out = ', ' . $library_node->title;
    }

    if (!empty($location[0]['name_line'])) {
      $location_out = ', ' . $location[0]['name_line'];
    }

    // Date.
    $date = field_get_items('node', $node, 'field_ding_event_date');
    $date_out = ', ' . format_date(strtotime($date[0]['value']), 'ding_date_and_time');

    // Price.
    $price = field_get_items('node', $node, 'field_ding_event_price', 'value');
    if (!empty($price)) {
      $price_out = ', ' . $price[0]['value'] . ' ' . variable_get('ding_event_currency_type', 'Kr');
    }

    $output['description']['#attached']['drupal_add_html_head'][0][0]['#value'] = $lead_out . $location_out . $date_out . $price_out;
  }
}

<?php
/**
 * @file
 * Code for the Ding Item List feature.
 */

include_once 'ding_item_list.features.inc';
/**
 * @file
 * Module core file.
 */

// Item list cache validity period (seconds).
// When changing use default simple cache intervals only.
define('DING_ITEM_LIST_CACHE_TLL', 28800);
define('DING_ITEM_LIST_ITEMS_LIMIT', 200);

/**
 * Implements hook_menu().
 */
function ding_item_list_menu() {
  $items = array();
  $items['ding_item_list'] = array(
    'title' => 'Get items for list',
    'page callback' => 'get_item_list_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_item_list_ctools_plugin_directory($module, $plugin) {
  // We'll be nice and limit scandir() calls.
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function ding_item_list_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['ding_item_list_list'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item-list',
    'path' => $path . '/templates',
  );

  return $hooks;
}

/**
 * Pass ajax loaded items to the list wrapper.
 */
function get_item_list_ajax() {
  $output = array();
  if (!empty($_GET['content']) && count($_GET['content']) > 2) {
    list($item_query, $item_count, $item_sort) = array_values($_GET['content']);
    $output = ding_item_list_get_content($item_query, $item_count, $item_sort);
  }
  else {
    watchdog('ding_item_list', 'Wrong parameters are passed from the query');
  }
  $content = theme('ding_item_list_list', array('items' => $output));

  drupal_json_output($content);
}

/**
 * Get list of ting objects.
 *
 * @param string $query
 *   Search query string.
 * @param int $count
 *   Number of objects to search.
 * @param bool $no_cover
 *   Do not request cover.
 * @param string $sort
 *   Type of the sort, there are multiple possibilities.
 *
 * @return array
 *   Array of ting object items.
 */
function ding_item_list_get_objects($query = '', $count = 0, $no_cover = FALSE, $sort = '') {
  $objects = array();
  // Not to spam the addi service it was decided to limit by source and results.
  // Most of the covers exists for term.acSource="bibliotekskatalog".
  // So, it was decided to limit based on the source.
  $request = '(' . $query . ' AND term.acSource="bibliotekskatalog")';
  $page = 1;
  if (!empty($query) && !empty($count)) {
    module_load_include('client.inc', 'ting');
    // In case of a "too general" request there is a limit of results.
    $result = ding_item_list_search_ting($request, $page, DING_ITEM_LIST_ITEMS_LIMIT, $sort);
    foreach ($result->collections as $collection) {
      // Whether we reached our item limit per query.
      if (count($objects) >= $count) {
        // Stop fetching anything from Ting.
        break;
      }

      foreach ($collection->reply->objects as $search_item) {
        // Check if covers service is alive and get cover details.
        if (!$no_cover) {
          if (!isset($covers_service_na)) {
            try {
              $cover_exists = ding_item_list_check_cover($search_item->id);
            }
            catch (AdditionalInformationServiceException $e) {
              // Service unavailable, do not ask for covers any more.
              $covers_service_na = TRUE;
            }

            // We can try to fetch next items and break here ONLY if cover
            // service is ok but returned no cover for current item.
            // Otherwise we will end up with eternal cycle.
            if (!$cover_exists) {
              break;
            }
          }
        }

        $item = new stdClass();
        $item->primary_object = $collection->primary_object;
        $item->id = $search_item->id;
        $item->isbn = isset($search_item->record['dc:identifier']['dkdcplus:ISBN']) ?
          _ding_item_list_format_isbn($search_item->record['dc:identifier']['dkdcplus:ISBN']) : NULL;
        $item->ac_source = isset($search_item->record['ac:source'][''][0]) ?
          $search_item->record['ac:source'][''][0] : NULL;
        $item->dc_source = isset($search_item->record['dc:source'][''][0]) ?
          $search_item->record['dc:source'][''][0] : NULL;
        $item->title = $search_item->record['dc:title'][''][0];

        if (isset($search_item->record['dc:creator'])) {
          if (isset($search_item->record['dc:creator']['oss:aut'][0])) {
            $item->creator = $search_item->record['dc:creator']['oss:aut'][0];
          }
          elseif (isset($search_item->record['dc:creator']['oss:mus'][0])) {
            $item->creator = $search_item->record['dc:creator']['oss:mus'][0];
          }
          elseif (isset($search_item->record['dc:creator']['oss:sort'][0])) {
            $item->creator = $search_item->record['dc:creator']['oss:sort'][0];
          }
          else {
            $item->creator = NULL;
          }
        }
        else {
          $item->creator = NULL;
        }

        if (isset($search_item->record['dc:subject']['dkdcplus:DK5-Text'][0])) {
          $item->subject = $search_item->record['dc:subject']['dkdcplus:DK5-Text'][0];
        }
        elseif (isset($search_item->record['dc:subject']['oss:genre'][0])) {
          $item->subject = $search_item->record['dc:subject']['oss:genre'][0];
        }
        elseif (isset($search_item->record['dc:subject'][''][0])) {
          $item->subject = $search_item->record['dc:subject'][''][0];
        }
        else {
          $item->subject = NULL;
        }

        // Set image filepath.
        // Image existence will be checked further.
        $item->image = ting_covers_object_path($search_item->id);

        if (isset($search_item->record['dc:description'][''][0])) {
          $item->description = $search_item->record['dc:description'][''][0];
        }
        elseif (isset($search_item->record['dcterms:abstract'][''][0])) {
          $item->description = $search_item->record['dcterms:abstract'][''][0];
        }
        else {
          $item->description = '';
        }

        $item->year = isset($search_item->record['dc:date'][''][0]) ?
          $search_item->record['dc:date'][''][0] : NULL;

        // Default values.
        $item->rating = 0;
        $item->rating_count = 0;
        $item->comment_count = 0;
        $item->has_rating = FALSE;

        $objects[$search_item->localId] = $item;
        break;
      }
    }

    // Make an array of local id's, fetchable by voxb.
    // Take only items with ISBN code.
    if (module_exists('ding_voxb')) {
      $local_ids = array();
      foreach ($objects as $local_id => $v) {
        if (!empty($v->isbn)) {
          $local_ids[$local_id] = $v->isbn[0];
        }
      }

      // Fetch details from voxb.
      $voxb_details = new VoxbItems();
      $voxb_details->addReviewHandler('review', new VoxbReviews());
      $response = $voxb_details->fetchByISBN($local_ids);

      // Assign voxb details to items.
      if ($response && $voxb_details->getCount() > 0) {
        foreach ($local_ids as $local_id => $isbn) {
          $detail = $voxb_details->getItem($isbn);
          if ($detail) {
            $objects[$local_id]->rating = (int) round($detail->getRating() / 20);
            $objects[$local_id]->rating_count = $detail->getRatingCount();
            $objects[$local_id]->comment_count = $detail->getReviews('review')->getCount();
            $objects[$local_id]->has_rating = TRUE;
          }
        }
      }
    }
  }

  return $objects;
}

/**
 * Perform ting search.
 *
 * @param string $query
 *   Searched query string.
 * @param int $page
 *   Requested results page.
 * @param int $records
 *   Number of records to fetch.
 *
 * @return object
 *   Ting search result object.
 */
function ding_item_list_search_ting($query = '', $page = 1, $records = 10, $sort = '') {
  if (!empty($query)) {
    $options = array(
      'allObjects' => FALSE,
      'enrich' => TRUE,
      'sort' => $sort,
    );

    $query = '(' . _ting_search_quote($query) . ')';
    $search_result = ting_do_search($query, $page, $records, $options);

    return $search_result;
  }

  return FALSE;
}

/**
 * Check for cover existence.
 *
 * @param string $id
 *   Ting item id.
 *
 * @return bool
 *   TRUE if item has a cover, FALSE otherwise.
 */
function ding_item_list_check_cover($id) {
  $covers = ting_covers_get(array($id));

  return !empty($covers);
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param string $keyword
 *   A generic keyword.
 *
 * @return string
 *   Hash string, meaning a certain cache id.
 */
function ding_item_list_generate_cache_id($keyword) {
  return 'ding_item_list-' . md5($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_list_ding_item_cache() {
  return array(
    'ding_item_list' => t('Ding item list'),
  );
}

/**
 * Format ISBN number, remove all spaces and dashes.
 *
 * @param array $isbns
 *   Set of ISBN numbers for an item.
 *
 * @return string
 *   Formatted ISBN number.
 */
function _ding_item_list_format_isbn($isbns = array()) {
  foreach ($isbns as $k => $isbn) {
    $isbns[$k] = str_replace(array(' ', '-'), '', $isbn);
  }

  return $isbns;
}

/**
 * Add search parameters fields to existing form.
 *
 * @param array $form
 *   Form to be modified with new fields.
 * @param array $default
 *   Default values for form fields, if any.
 */
function ding_item_list_search_form(array &$form, array $default) {
  $form['plugin_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('List settings'),
  );

  $form['plugin_settings']['item_query'] = array(
    '#type' => 'textfield',
    '#title' => t('Ting query string'),
    '#default_value' => isset($default['item_query']) ? $default['item_query'] : '',
    '#required' => TRUE,
    '#maxlength' => 255,
  );

  $form['plugin_settings']['item_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Items count'),
    '#default_value' => isset($default['item_count']) ? $default['item_count'] : 3,
    '#required' => TRUE,
    '#size' => 3,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form['plugin_settings']['item_sort'] = array(
    '#type' => 'select',
    '#title' => t('Sorting'),
    '#options' => array(
      '' => t('- None -'),
      'title_ascending' => t('Title (Ascending)'),
      'title_descending' => t('Title (Descending)'),
      'creator_ascending' => t('Creator (Ascending)'),
      'creator_descending' => t('Creator (Descending)'),
      'date_ascending' => t('Date (Ascending)'),
      'date_descending' => t('Date (Descending)'),
      'acquisitionDate_ascending' => t('Acquisition date (Ascending)'),
      'acquisitionDate_descending' => t('Acquisition date (Descending)'),
    ),
    '#default_value' => isset($default['item_sort']) ? $default['item_sort'] : '',
    '#description' => t('If not set, defaults to Ranking'),
  );
}

/**
 * Generate markup according to passed search parameters.
 *
 * @param string $query
 *   Search query.
 * @param int $count
 *   Number of items to fetch.
 * @param string $sort
 *   Sort identifier.
 *
 * @return string
 *   List markup.
 */
function ding_item_list_get_content($query, $count, $sort) {
  $cid = ding_item_list_generate_cache_id($query);
  $cache = cache_get($cid, 'cache_ding_item');

  if (!$cache) {
    $objects = ding_item_list_get_objects($query, $count, FALSE, $sort);

    cache_set($cid, $objects, 'cache_ding_item', time() + DING_ITEM_LIST_CACHE_TLL * 3600);
  }
  else {
//    $objects = $cache->data;
    $objects = ding_item_list_get_objects($query, $count, FALSE, $sort);
  }

  $output = array();
  foreach ($objects as $object) {
    $loan_form = module_invoke_all('ding_entity_buttons', 'ding_entity', $object->primary_object, 'ajax');

    $output[] = array(
      'faust' => $object->id,
      'cover' => array(
        '#theme' => 'ting_object_cover',
        '#image_style' => 'ding_item_list',
        '#object' => $object,
      ),
      'title' => $object->title,
      'author' => $object->creator,
      'year' => $object->year,
      'has_rating' => $object->has_rating,
      'rating' => $object->rating,
      'rating_count' => $object->rating_count,
      'review_count' => $object->comment_count,
      'loan_form' => $loan_form,
    );
  }

  return $output;
}

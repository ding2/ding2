<?php
/**
 * @file
 * Code for the Alma mockup feature.
 */

/**
 * Implements hook_menu().;
 */
function alma_mockup_menu() {
  $items['alma_mockup/%/%'] = array(
    'title' => 'Alma mockup',
    'description' => 'Alma mockup',
    'page callback' => 'alma_mockup_page',
    'page arguments' => array(1, 2, NULL),
    'access arguments' => array('access content'),
  );
  $items['alma_mockup/%/%/%'] = array(
    'title' => 'Alma mockup',
    'description' => 'Alma mockup',
    'page callback' => 'alma_mockup_page',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_ding_provider().
 */
function alma_mockup_ding_provider() {
  return array(
    'title' => 'Alma mockup',
    'settings' => 'alma_mockup_admin',
    'provides' => array(
      'mockup' => array(
        'prefix' => 'alma_mockup',
	  ),
    ),
  );
}

/**
 * Construct the mockup page
 */
function alma_mockup_page($section, $method, $set) {
  
  $drupal_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'alma_mockup');
  $alma_mockup_fallback_url = variable_get('alma_mockup_fallback_url', NULL); 
  $alma_ssl_version = variable_get('alma_ssl_version', 'sslv3');
  $recording = variable_get('alma_mockup_recording', FALSE);
  $path = array_filter(array($section, $method, $set));
  if (!empty($_GET['q'])) {
    unset($_GET['q']);
  }
  $params = array_filter($_GET);
 
  $mockup = new AlmaMockup($path, $params, $drupal_path);

  try {
    // Let's see if we have a mockup for this request.
    $mockup->get();
  }
  catch (AlmaMockupException $e) {
    // If not, pass it on to, say, AAKB's test provider.
    if ($alma_mockup_fallback_url) {
      $mockup->pass_through($alma_mockup_fallback_url, $alma_ssl_version);
      drupal_set_message('Pass call to Alma: ' . $url, $type = 'status');
      watchdog('alma_mockup', "Pass call to Alma: %url", 
	    $variables = array('%url' => $alma_mockup_fallback_url), WATCHDOG_DEBUG);
    }
    if ($recording) {
      try {
        $mockup->record();
      }
	  catch (AlmaMockupException $e) {
        watchdog('alma_mockup', "Failed to save record: %url", 
		  $variables = array('%url' => $alma_mockup_fallback_url), WATCHDOG_ERROR);
        drupal_set_message('Failed to save record:' . $alma_mockup_fallback_url, 
		  $type = 'status');
      }
    }
  }
  catch (Exception $e) {
    drupal_set_message('Caught exception: ' .  $e->getMessage(), $type = 'status');
    watchdog('alma_mockup', "Caught exception: %e", 
	  $variables = array('%e' => $e->getMessage()), WATCHDOG_ERROR);
  }

  drupal_exit();
}

/**
 * Alma mockup administration form.
 *
 * @return array
 */
function alma_mockup_admin() {
  $form['alma_mockup']['description'] = array(
    '#type' => 'container',
  );
  $form['alma_mockup']['description']['heading'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'h3',
    '#value' => 'Alma Mockup',
  );
  $form['alma_mockup']['description']['afsnit'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'p',
    '#value' => 'To use, set Alma base URL to: ' . $GLOBALS['base_url'] . '</code>/alma_mockup/<br>
                 If a provider reply to a request is recorded, it will be retuned.<br>
                 Otherwise, if a Fallback URL is added, the request will be forwarded to the provider,
                 and the reply returned.<br>
                 Additionally, if "Enable recording" is checked, the reply from the provider is saved,
                 and is returned next time the request is sent to the Alma mockup.',
  );
  $form['alma_mockup']['alma_mockup_fallback_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Fallback URL'),
    '#default_value' => variable_get('alma_mockup_fallback_url', NULL),
    '#size' => 40,
    '#description' => t("Base fallback URL for Alma service: F.ex. AAKB test provider URL<br>
      The mockup will pass the query to the fallback provider if a reply is not recorded."),
  );
  $form['alma_mockup']['alma_mockup_recording'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable recording'),
    '#default_value' => variable_get('alma_mockup_recording', FALSE),
    '#description' => t('Record the reply from the fallback provider (Needs file permissions to be set).'),
  );
  return system_settings_form($form);
}

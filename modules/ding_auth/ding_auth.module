<?php
/**
 * @file
 * Defines the main functionality for the authentication module.
 */


define('DING_AUTH_LOGIN_URL', 'ding_auth/login');
define('DING_AUTH_LOGOUT_URL', 'ding_auth/logout');
define('DING_AUTH_REDIRECT_URL', 'ding_auth/callback');


/**
 * Implements hook_init().
 *
 * Adds simple JS script that detects if the ajax auth redirect has placed a
 * fragment to redo an ajax request.
 *
 * We don't known which pages this will happen one, so we add the script to
 * every page.
 */
function ding_auth_init() {
  drupal_add_js(drupal_get_path('module', 'ding_auth') . '/js/ding_auth.js', 'file');
}

/**
 * Implements hook_menu().
 */
function ding_auth_menu() {
  $items = array();

  $items['admin/config/ding/auth'] = array(
    'title' => 'Adgangsplatform',
    'description' => 'Configure user login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_auth_admin_settings_form'),
    'access arguments' => array('administer users'),
    'file' => 'includes/ding_auth.admin.inc',
  );

  $items['admin/config/ding/auth/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items[DING_AUTH_LOGIN_URL] = array(
    'title' => 'Log in',
    'page callback' => 'ding_auth_login',
    'access callback' => 'user_is_anonymous',
  );

  $items[DING_AUTH_LOGOUT_URL] = array(
    'title' => 'Log in',
    'page callback' => 'ding_auth_logout',
    'access callback' => TRUE,
  );

  $items[DING_AUTH_REDIRECT_URL] = array(
    'page callback' => 'ding_auth_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_preprocess_menu_link().
 *
 * Change the login link in the top menu to use ding_auth module. It's changed
 * here to make it possible to still use the old "/user" login form if
 * ding_auth is not enabled.
 */
function ding_auth_preprocess_menu_link(&$vars) {
  if ($vars['element']['#original_link']['menu_name'] == 'menu-tabs-menu') {
    if ($vars['element']['#href'] == 'user') {
      $vars['element']['#href'] = 'ding_auth/login';
    }
  }
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function ding_auth_libraries_info() {
  return array(
    'random_compat' => array(
      'name' => 'random_compat',
      'vendor url' => 'https://github.com/paragonie/random_compat',
      'download url' => 'https://github.com/paragonie/random_compat',
      'version' => 'v2.0.17',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'oauth2-client' => array(
      'name' => 'oauth2-client',
      'vendor url' => 'https://github.com/thephpleague/oauth2-client',
      'download url' => 'https://github.com/thephpleague/oauth2-client',
      'version' => '2.3.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}

/**
 * Implements hook_ding_provider_user().
 *
 * This module requires that the provider has authentication support.
 */
function ding_auth_ding_provider_user() {
  return array(
    'auth' => array(
      'required' => TRUE,
      'install time setup' => FALSE,
    ),
  );
}

/**
 * Ajax command to authenticate (redirect).
 */
function ajax_command_ding_auth_redirect($path) {
  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  // Get authentication url and set the path to be redirected back to.
  $url = ding_auth_login(FALSE, $path);

  // Store the ajax callback url that triggered the ajax auth redirect.
  $_SESSION['oauth2ajax'] = $_GET['q'];

  return ctools_ajax_command_redirect($url);
}

/**
 * Get the authentication configuration.
 *
 * @return array
 *   With the default parameters if not overridden in the administration
 *   settings form.
 */
function ding_auth_get_configuration() {
  global $base_url;
  return variable_get('ding_auth_settings', array(
    'clientId' => '',
    'clientSecret' => '',
    'redirectUri' => $base_url . '/' . DING_AUTH_REDIRECT_URL,
    'urlAuthorize' => 'https://oauth.login.bib.dk/oauth/authorize',
    'urlAccessToken' => 'https://oauth.login.bib.dk/oauth/token/',
    'urlResourceOwnerDetails' => 'https://oauth.login.bib.dk/userinfo/',
    'urlLogout' => 'https://oauth.login.bib.dk/logout/',
  ));
}

/**
 * Login menu callback.
 *
 * Will start the authentication process and redirect the user to the
 * authorization service.
 *
 * @param bool $redirect
 *   Default TRUE, mainly used to get the auth url when used in ajax context
 *   and an redirect is not desirable at this time.
 * @param string $destination
 *   Override the destination set in the current request. Mainly used in ajax
 *   context.
 * @return mixed
 *    If $redirect is FALSE the authentication url or redirect headers.
 *
 * @throws Exception
 */
function ding_auth_login($redirect = TRUE, $destination = '') {
  $provider = ding_auth_get_provider();
  $authorization_url = $provider->getAuthorizationUrl();

  // Get the state generated for you and store it to the session.
  $_SESSION['oauth2state'] = $provider->getState();
  $_SESSION['oauth2destination'] = empty($destination) ? $_REQUEST['destination'] : $destination;

  // Check if an identity provider have been set in the request.
  if (!empty($_REQUEST['idp'])) {
    $authorization_url .= '&idp=' . $_REQUEST['idp'];
  }


  if (!$redirect) {
    return $authorization_url;
  }

  // Redirect the user to the authorization URL. We don't use drupal_goto as it
  // looks into the destination in the current URL and preforms some magic with
  // it that we don't want.
  header('Location:' . $authorization_url);
  drupal_exit($authorization_url);
}

/**
 * Logout the user from auth.
 *
 * This placed in this menu callback function to ensure
 *
 * @param bool $hooked
 *   If TRUE new session is generated.
 *
 * @throws Exception
 */
function ding_auth_logout($hooked = FALSE) {
  $provider = ding_auth_get_provider();
  $config = ding_auth_get_configuration();
  $token = $_SESSION['oauth2token'];

  // Generate logout request for the authorization service and send the request.
  $request = $provider->getRequest('GET', $config['urlLogout'] . '?access_token=' . $token);
  $response = $provider->getResponse($request);

  if (!$hooked) {
    // If this was called from user registration reset the session.
    drupal_session_regenerate();
  }
}

/**
 * Implements hook_user_logout().
 *
 * Ensure that the user is logged out off the access platform.
 */
function ding_auth_user_logout() {
  ding_auth_logout(TRUE);
}

/**
 * Redirect menu callback.
 *
 * This is the end-point used when coming back from the access platform login
 * and this will try to log the user into the provider and Drupal.
 */
function ding_auth_callback() {
  if (empty($_GET['state']) || empty($_SESSION['oauth2state']) || ($_GET['state'] !== $_SESSION['oauth2state'])) {
    unset($_SESSION['oauth2state']);
    unset($_SESSION['oauth2ajax']);

    drupal_set_message(t('Invalid state detected. Login failed'));
    _ding_auth_redirect_user();
  }
  else {
    try {
      // Try to get an access token using the authorization code grant.
      $provider = ding_auth_get_provider();
      $access_token = $provider->getAccessToken('authorization_code', ['code' => $_GET['code']]);

      // Store access token for later usage.
      $_SESSION['oauth2token'] = $access_token->getToken();

      // Get information about the user. This is a mis-use of the
      // getResourceOwnerDetailsUrl configuration.
      $request = $provider->getAuthenticatedRequest('POST', $provider->getResourceOwnerDetailsUrl($access_token), $access_token);
      $response = $provider->getResponse($request);
      $user_info = $response->getBody();
      $user_info = drupal_json_decode($user_info);

      if (module_exists('ding_auth_registration') && ding_auth_registration_is_registration_request()) {
        // This is an self registration request, so we store the information in
        // the current session. So it can be used to create the user in the
        // library system in the user creation flow in ding_auth_registration.
        // The redirect below will start the process.
        $_SESSION['oauth2userinfo'] = serialize($user_info);
      }
      else {
        // Login to using the provider.
        _ding_auth_provider_login($user_info);
      }

      // Redirect user base on values set in the current session.
      _ding_auth_redirect_user();
    }
    catch (\League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {
      // Failed to get the access token or user details.
      watchdog_exception('ding_auth', $e);

      drupal_set_message(t('Failed to login and get user details for the user.'), 'warning');

      // Redirect user back.
      _ding_auth_redirect_user();
    }
  }
}

/**
 * Get oAuth2 provider.
 *
 * @return \League\OAuth2\Client\Provider\GenericProvider
 *   Provider with basic configuration.
 *
 * @throws Exception
 *   If required libraries are not loaded.
 */
function ding_auth_get_provider() {
  // The oAuth2 library also uses guzzle.
  foreach (array('random_compat', 'oauth2-client') as $lib) {
    // Checking for FALSE, as it's actually a count of how many files was
    // included, and none is included for our libraries.
    if (!($library = libraries_load($lib)) || $library['loaded'] === FALSE) {
      throw new Exception($lib . ' library not installed');
    }
  }

  $configuration = ding_auth_get_configuration();
  return new \League\OAuth2\Client\Provider\GenericProvider($configuration);
}

/**
 * Redirect the user.
 *
 * If destination exists in the current session the user is redirect to it else
 * send to profile page.
 *
 * @param string $url
 *   The url to redirect to if destination is not set in the request. Defaults
 *   to /user.
 */
function _ding_auth_redirect_user($url = 'user') {
  if (!empty($_SESSION['oauth2destination'])) {
    $url = $_SESSION['oauth2destination'];
    unset($_SESSION['oauth2destination']);
  }

  // Add fragment to the redirect if this was started as an ajax auth redirect.
  $options = array();
  if (!empty($_SESSION['oauth2ajax'])) {
    $options['fragment'] = 'redo=' . $_SESSION['oauth2ajax'];
    unset($_SESSION['oauth2ajax']);
  }

  drupal_goto($url, $options);
}

/**
 * Login the user into the library system and Drupal.
 *
 * @param array $user_info
 *   User information from the resource service.
 */
function _ding_auth_provider_login(array $user_info) {
  try {
    // Trying to login the user using the provider.
    try {
      $credentials = ding_provider_invoke('auth', 'login_credentials', $user_info['attributes']['userId']);
      $auth_res = ding_provider_invoke('user', 'authenticate', $credentials['name'], $credentials['pass'], $credentials);
    }
    catch (Exception $exception) {
      drupal_set_message($exception->getMessage(), 'warning');
      return;
    }

    if (!is_array($auth_res) || !isset($auth_res['success'])) {
      watchdog('ding_user', 'Provider returned invalid result: @res', array('@res' => print_r($auth_res, TRUE)), WATCHDOG_DEBUG);
      return;
    }

    if ($auth_res['success']) {
      if (isset($auth_res['authname']) && !empty($auth_res['authname'])) {
        // If provider supplied an authname, use it.
        $auth_name = $auth_res['authname'];
      }
      else {
        // Else use a standard authname.
        $auth_name = ding_user_default_authname($credentials['name']);
      }

      // Create new account in Drupal and if one exists update it.
      $account = _ding_user_create_account($auth_name, $auth_res);

      // Check that a profile exists for the user and if not create one.
      _ding_user_create_profile2($account);

      // Log user in.
      global $user;
      $user = $account;
      user_login_finalize();
    }
    else {
      // Check if any messages was returned from the provider.
      if (isset($auth_res['messages'])) {
        foreach ($auth_res['messages'] as $message) {
          $type = 'warning';
          if (is_array($message)) {
            list($message, $type) = $message;
          }
          drupal_set_message(check_plain($message), $type);
        }
      }

      drupal_set_message(t('Sorry but the current library do not have you as an user.'));
    }
  }
  catch (Exception $exception) {
    // Exception thrown, log error and carry on.
    watchdog_exception('ding_user', $exception);
    drupal_set_message(t('Unknown error. Please contact the library for help'));
  }
}

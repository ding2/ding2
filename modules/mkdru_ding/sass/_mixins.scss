/**
 * Mixins
 *
 * @author magnify
 */

/* Breakpoints
   ========================================================================== */

$breakpoint-low:                  580px;
$breakpoint-small:                480px;
$breakpoint-medium:               768px;
$breakpoint-large:                940px;
$breakpoint-x-large:              1210px;

/* Media query
   ========================================================================== */

@mixin respond-to($media) {
	// Sizes
	@if $media == small {
		@media only screen and (max-width: $breakpoint-small) { @content; }
	}

  @else if $media == small-medium {
    @media only screen and (max-width: $breakpoint-medium) { @content; }
  }

	@else if $media == from-small {
		@media only screen and (min-width: $breakpoint-small + 1) { @content; }
	}

  @else if $media == small-medium-low {
    @media only screen and (max-height: $breakpoint-low) and (max-width: $breakpoint-medium) { @content; }
  }

  @else if $media == medium {
    @media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-medium) { @content; }
  }

  @else if $media == till-medium {
    @media only screen and (max-width: $breakpoint-medium) { @content; }
  }

  @else if $media == from-medium {
    @media only screen and (min-width: $breakpoint-medium + 1) { @content; }
  }

  @else if $media == medium-large {
    @media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-large) { @content; }
  }

  @else if $media == large {
    @media only screen and (min-width: $breakpoint-medium + 1) and (max-width: $breakpoint-large) { @content; }
  }

  @else if $media == till-large {
    @media only screen and (max-width: $breakpoint-large) { @content; }
  }

  @else if $media == till-x-large {
    @media only screen and (max-width: $breakpoint-x-large) { @content; }
  }

	@else if $media == x-large {
		@media only screen and (min-width: $breakpoint-x-large + 1) { @content; }
	}

  @else if $media == large-x-large {
    @media only screen and (min-width: $breakpoint-medium + 1) { @content; }
  }
}


/* Breakpoints
   ========================================================================== */

@mixin small {
  @include respond-to(small) { @content; }
}

@mixin from-small {
  @include respond-to(from-small) { @content; }
}

@mixin small-medium {
  @include respond-to(small-medium) { @content; }
}

@mixin small-medium-low {
  @include respond-to(small-medium-low) { @content; }
}

@mixin medium {
  @include respond-to(medium) { @content; }
}

@mixin from-medium {
  @include respond-to(from-medium) { @content; }
}

@mixin till-medium {
  @include respond-to(till-medium) { @content; }
}

@mixin medium-large {
  @include respond-to(medium-large) { @content; }
}

@mixin large {
  @include respond-to(large) { @content; }
}

@mixin till-large {
  @include respond-to(till-large) { @content; }
}

@mixin till-x-large {
  @include respond-to(till-x-large) { @content; }
}

@mixin x-large {
  @include respond-to(x-large) { @content; }
}

@mixin large-x-large {
  @include respond-to(large-x-large) { @content; }
}



/* Typography mixins
 *
 * These are mixins to allow for use in media queries
   ========================================================================== */

@mixin font-normal() {
  font-weight: $base-font-weight-normal;
}

@mixin font-bold() {
  font-weight: $base-font-weight-bold;
}

@mixin font-italic() {
  font-style: italic;
  font-weight: $base-font-weight-normal;
}



/* Availability
   ========================================================================== */

@mixin availability($bg-color) {
  background-color: $bg-color;
  color: #fff;
  padding-top: 5px;
  padding-right: 10px;
  padding-bottom: 5px;
  padding-left: 10px;

  a {
    color: #fff;
    display: block;

    &:hover {
      text-decoration: none;
    }
  }
}



/* Pseudo arrow
 *
 * Usage example: pseudo-arrow(10px, #000, top, center, $offset: 20px)
   ========================================================================== */

@mixin pseudo-arrow($size, $color, $direction, $alignment, $offset: 20px) {
  border: $size solid transparent;
  content: "";
  height: 0;
  position: absolute;
  width: 0;

  // Place the arrow based on $direction
  #{$direction}: -$size * 2;

  // Set the border-color based on $direction
  border-#{opposite-position($direction)}-color: $color;

  // Place the arrow based on alignment (center/middle or $offset)
  @if ($alignment == "center") {

    margin-left: -$size;
    left: 50%;

  } @else if $alignment == "middle" {

    margin-top: -$size;
    top: 50%;

  } @else {

    #{$alignment}: $offset;

  }
}



// Shadow
//==========================================================================

@mixin bshadow() {
  @include box-shadow($gray-dark 1px 1px 5px);
}



// Min height for all browsers including old IE
//==========================================================================

@mixin min-height($value) {
  min-height: $value;
  height: auto !important;
  height: $value;
}

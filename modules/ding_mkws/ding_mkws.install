<?php

/**
 * @file
 * Represents all logic related to (un)installing and DB scheme definition.
 */

/**
 * Implements hook_install().
 */
function ding_mkws_install() {
  if (module_exists('ding_campaign')) {
    $field = field_info_field('field_camp_settings');
    $allowed_values = &$field['settings']['allowed_values'];
    $allowed_values['mkws'] = 'MKWS';
    field_update_field($field);
  }

  _ding_mkws_create_pane();
  variable_set('ding_mkws_global', array());
}

/**
 * Implements hook_uninstall().
 */
function ding_mkws_uninstall() {
  if (module_exists('ding_campaign')) {
    db_update('ding_campaign')
      ->fields(array(
        'type' => 'plain',
      ))
      ->condition('type', 'mkws', '=')
      ->execute();

    $field = field_read_field('field_camp_settings');
    $allowed_values = &$field['settings']['allowed_values'];
    if (in_array('mkws', $allowed_values)) {
      unset($allowed_values['mkws']);
    }
    $field['settings']['allowed_values'] = $allowed_values;
    field_update_field($field);
  }

  _ding_mkws_delete_pane();
  $base = field_info_field('field_mkws_node_widget');
  if (!$base) {
    field_delete_field('field_mkws_node_widget');
  }
  variable_del('ding_mkws_global');
}

/**
 * Implements hook_field_schema().
 */
function ding_mkws_field_schema($field) {
  $schema = array();

  switch ($field['type']) {
    case 'ding_mkws_node':
      $schema['columns'] = array(
        'term' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'default' => '',
        ),
        'resources' => array(
          'type' => 'text',
          'size' => 'medium',
          'not null' => TRUE,
        ),
        'amount' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'maxrecs' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'toggle_title' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'widget_headline' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'default' => '',
        ),
      );
      break;
  }
  return $schema;
}


/**
 * Create panel pane and handler.
 */
function _ding_mkws_create_pane() {
  ctools_include('plugins');
  ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');

  $items = array(
    'search_' => array('task_name' => 'search', 'region' => 'right_sidebar', 'location'=> t('Search result'), 'title' => t('Related content'), 'scope' => ''),
    'ting_collection_' => array('task_name' => 'ting_collection', 'region' => 'left_sidebar', 'location'=> t('Collection view'), 'title' => t('Related content'), 'scope' => ''),
    'ting_collection_au' => array('task_name' => 'ting_collection', 'region' => 'left_sidebar', 'location'=> t('Collection view'), 'title' => t('More by same author'), 'scope' => 'au'),
    'ting_object_' => array('task_name' => 'ting_object', 'region' => 'left_sidebar', 'location'=> t('Item page'), 'title' => t('Related content'), 'scope' => ''),
    'ting_object_au' => array('task_name' => 'ting_object', 'region' => 'left_sidebar', 'location'=> t('Item page'), 'title' => t('More by same author'), 'scope' => 'au'),
  );
  variable_set('ding_mkws_panes', $items);

  foreach ($items as $item) {
    $pane_id = "new-ding_mkws_" . $item['task_name'] . '_' . $item['scope'];
    $pane = ding_mkws_get_items_pane($pane_id, $item['task_name'], $item['scope'], $item['region']);

    $task = page_manager_get_task($item['task_name']);
    $handlers = page_manager_load_task_handlers($task);

    foreach ($handlers as $handler_name => &$handler) {
      if (strpos($handler_name, $item['task_name'] . '_panel_context') !== FALSE) {
        $display = panels_panel_context_get_display($handler);

        $display->content[$pane_id] = $pane;
        $display->panels[$item['region']][] = $pane_id;

        panels_save_display($display);
        page_manager_save_task_handler($handler);

        break;
      }
    }
  }
}

/**
 * Create mkws pane object.
 *
 * @param string $panel_id
 *   Machine name of the pane.
 * @param string $subtype
 *   Pane subtype.
 * @param string $scope
 *   Scope of the search query.
 * @param string $region
 *   Region where the pane will be saved.
 *
 * @return object
 *   Panels pane object.
 */
function ding_mkws_get_items_pane($panel_id, $subtype = '', $scope = NULL, $region = 'left_sidebar') {
  $pane = new stdClass();
  $pane->pid = $panel_id;
  $pane->panel = $region;
  $pane->type = 'ding_mkws_item_list';
  $pane->subtype = $subtype;
  // By default pane is hidden.
  $pane->shown = FALSE;
  $pane->access = array();
  $pane->configuration = array(
    'override_title' => 0,
    'override_title_text' => '',
    'override_title_heading' => 'h2',
    'scope' => $scope,
  );
  $pane->cache = array();
  $pane->style = array(
    'settings' => NULL,
  );
  $pane->css = array();
  $pane->extras = array();
  $pane->locks = array();

  return $pane;
}

/**
 * Delete mkws pane object.
 */
function _ding_mkws_delete_pane() {
  ctools_include('plugins');
  ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');

  $items = variable_get('ding_mkws_panes', array());
  foreach ($items as $item) {
    $pane_id = 'new-ding_mkws_' . $item['task_name'] . '_' . $item['scope'];
    $pane = ding_mkws_get_items_pane($pane_id);

    $task = page_manager_get_task($item['task_name']);
    $handlers = page_manager_load_task_handlers($task);

    foreach ($handlers as $handler_name => &$handler) {
      if (strpos($handler_name, $item['task_name'] . '_panel_context') !== FALSE) {
        $display = panels_panel_context_get_display($handler);

        $display->content[$pane_id] = $pane;
        $display->panels['left_sidebar'][] = $pane_id;

        panels_delete_display($display);
        page_manager_delete_task_handler($handler);

        break;
      }
    }
  }
}

/**
 * Adding MKWS option to campaign settings.
 */
function ding_mkws_update_7001() {
  if (module_exists('ding_campaign')) {
    $instance = field_info_field('field_camp_settings');
    $allowed_values = &$instance['settings']['allowed_values'];
    $allowed_values['mkws'] = 'MKWS';
    field_update_field($instance);
  }
}

/**
 * Adding new columns for handling widget headlines.
 */
function ding_mkws_update_7002() {
  $fields = array(
    'toggle_title' => array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    'widget_headline' => array(
      'type' => 'varchar',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ),
  );

  $field_name          = 'field_mkws_node_widget';
  $data_table_name     = 'field_data_' . $field_name;
  $revision_table_name = 'field_revision_' . $field_name;

  foreach ($fields as $col_name => $value) {
    db_add_field($data_table_name, $field_name . '_' . $col_name, $value);
    db_add_field($revision_table_name, $field_name . '_' . $col_name, $value);
  }
}

<?php

/**
 * @file
 * Install/uninstall routine.
 */

/**
 * Implements hook_install().
 */
function ding_sections_install() {
  _ding_sections_create_base();
  _ding_sections_create_image_field();
  _ding_sections_create_fields();
  ding_sections_section_shortcut();

  variable_set('ding_section_content_types', array(
    'ding_event',
    'ding_news',
    'ding_page',
  ));

  $submodules = array(
    'ding_sections_custom_css',
    'ding_sections_term_menu',
    'ding_sections_term_panel',
  );
  module_enable($submodules);
}

/**
 * Implements hook_uninstall().
 */
function ding_sections_uninstall() {
  _ding_sections_purge_fields();
  _ding_sections_purge_image_field();
  _ding_sections_purge_base();

  variable_del('ding_section_content_types');
}

/**
 * Create editorial base (Section) vocabulary.
 */
function _ding_sections_create_base() {
  $voc = new stdClass();
  $voc->name = st('Section');
  $voc->machine_name = 'section';

  taxonomy_vocabulary_save($voc);
}

/**
 * Create custom section field.
 *
 * The field to be used in node bundles,
 * to link content to section vocabulary.
 */
function _ding_sections_create_fields() {
  $field_definition = array(
    'field_name' => 'field_ding_section',
    'type' => 'taxonomy_term_reference',
    'module' => 'taxonomy',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'deleted' => '0',
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'section',
          'parent' => '0',
        ),
      ),
    ),
  );

  field_create_field($field_definition);
}

/**
 * Remove all fields regarding section.
 */
function _ding_sections_purge_fields() {
  $node_types = node_type_get_types();

  foreach ($node_types as $type) {
    $instance = field_read_instance('node', 'field_ding_section', $type->type);
    field_delete_instance($instance);
  }

  field_delete_field('field_ding_section');
}

/**
 * Remove section vocabulary.
 */
function _ding_sections_purge_base() {
  $voc = taxonomy_vocabulary_machine_name_load('section');
  if (isset($voc->vid)) {
    taxonomy_vocabulary_delete($voc->vid);
  }
}

/**
 * Create a link in shortcut menu bar.
 */
function ding_sections_section_shortcut() {
  if (ding_sections_section_shortcut_exists()) {
    return;
  }

  $t = get_t();

  $shortcut_set = shortcut_set_load(SHORTCUT_DEFAULT_SET_NAME);
  $shortcut_set->links[] = array(
    'link_path' => 'admin/structure/taxonomy/section',
    'link_title' => $t('Sections'),
  );

  shortcut_set_save($shortcut_set);
}

/**
 * Check if section shortcut link already exists.
 *
 * @return bool
 *   TRUE if the link exists, FALSE otherwise.
 */
function ding_sections_section_shortcut_exists() {
  $shortcut_set = shortcut_set_load(SHORTCUT_DEFAULT_SET_NAME);

  foreach ($shortcut_set->links as $link) {
    if ($link['link_path'] == 'admin/structure/taxonomy/section') {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Create image field for sections taxonomy term.
 */
function _ding_sections_create_image_field() {
  $field_definition = [
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => [],
    'field_name' => 'field_ding_sections_image',
    'foreign keys' => [
      'fid' => [
        'columns' => [
          'fid' => 'fid',
        ],
        'table' => 'file_managed',
      ],
    ],
    'indexes' => [
      'fid' => [
        0 => 'fid',
      ],
    ],
    'locked' => 0,
    'module' => 'image',
    'settings' => [
      'default_image' => 0,
      'profile2_private' => FALSE,
      'uri_scheme' => 'public',
    ],
    'translatable' => 0,
    'type' => 'image',
  ];

  field_create_field($field_definition);

  $field_instance_definition = [
    'bundle' => 'section',
    'deleted' => 0,
    'description' => '',
    'display' => [
      'default' => [
        'label' => 'above',
        'settings' => [],
        'type' => 'hidden',
        'weight' => 3,
      ],
    ],
    'entity_type' => 'taxonomy_term',
    'field_name' => 'field_ding_sections_image',
    'label' => 'Content image.',
    'required' => 0,
    'settings' => [
      'alt_field' => 0,
      'default_image' => 0,
      'file_directory' => '',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'title_field' => 0,
      'user_register_form' => FALSE,
    ],
    'widget' => [
      'active' => 1,
      'module' => 'media',
      'settings' => [
        'allowed_schemes' => [
          'public' => 'public',
          'vimeo' => 0,
          'youtube' => 0,
        ],
        'allowed_types' => [
          'audio' => 0,
          'document' => 0,
          'image' => 'image',
          'video' => 0,
        ],
        'browser_plugins' => [
          'ding_content' => 0,
          'media_default--media_browser_1' => 'media_default--media_browser_1',
          'media_default--media_browser_my_files' => 0,
          'media_internet' => 0,
          'upload' => 'upload',
          'youtube' => 0,
        ],
      ],
      'type' => 'media_generic',
      'weight' => 3,
    ],
  ];

  field_create_instance($field_instance_definition);
}

/**
 * Purge image field from sections.
 */
function _ding_sections_purge_image_field() {
  $field_instance = field_read_instance('taxonomy_term', 'field_ding_sections_image', 'section');

  if (!empty($field_instance)) {
    field_delete_instance($field_instance);
    field_delete_field('field_ding_sections_image');
  }
}

/**
 * Create image field.
 */
function ding_sections_update_7001() {
  _ding_sections_create_image_field();
}

/**
 * Add manualcrop settings to term image.
 */
function ding_sections_update_7101() {
  $instance = field_read_instance('taxonomy_term', 'field_ding_sections_image', 'section');
  $instance['widget']['settings']['manualcrop_enable'] = 1;
  $instance['widget']['settings']['manualcrop_styles_list'] = ['crop_16_9' => 'crop_16_9'];
  field_update_instance($instance);
}

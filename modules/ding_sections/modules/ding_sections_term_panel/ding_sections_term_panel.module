<?php

/**
 * @file
 * Term panel variant generator.
 */

/**
 * Implements hook_term_insert().
 *
 * Act when a term is created and trigger panel variant creation.
 */
function ding_sections_term_panel_taxonomy_term_insert($term) {
  if ($term->vocabulary_machine_name == 'section') {
    $term_page = field_get_items('taxonomy_term', $term, 'field_term_page');
    if ($term_page[0]['value'] == 1) {
      ding_sections_term_panel_create_term_variant($term);
    }
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function ding_sections_term_panel_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == 'section') {
    $term_page = field_get_items('taxonomy_term', $term, 'field_term_page');
    $term_page_old = field_get_items('taxonomy_term', $term->original, 'field_term_page');

    // When unchecked.
    if (($term_page[0]['value'] - $term_page_old[0]['value']) == -1) {
      // Get page.
      $page = 'term_view';
      $page = page_manager_get_page_cache($page);
      // @see page_manager.admin.inc
      if (!empty($page->handler_info['term_view_panel_context_tid_' . $term->tid])) {
        $page->handler_info['term_view_panel_context_tid_' . $term->tid]['disabled'] = TRUE;
        $page->handler_info['term_view_panel_context_tid_' . $term->tid]['changed'] |= PAGE_MANAGER_CHANGED_STATUS;
      }
      if ($function = ctools_plugin_get_function($page->subtask, 'enable callback')) {

        $result = $function($page, FALSE);
        menu_rebuild();
        page_manager_save_page_cache($page);
      }
    }
    // When checked.
    elseif (($term_page[0]['value'] - $term_page_old[0]['value']) == 1) {

      // We have 2 variants:
      // 1) handler exists then just enable him;
      // 2) we should create new variant.
      $page = 'term_view';
      $task = page_manager_get_task($page);
      ctools_get_plugins('page_manager', 'task_handlers', 'panel_context');
      $handlers = page_manager_load_sorted_handlers($task, '', FALSE);
      $handler_name = 'term_view_panel_context_tid_' . $term->tid;
      $handler = isset($handlers[$handler_name]) ? $handlers[$handler_name] : NULL;
      // Enable handler.
      if (!empty($handler)) {
        $page = 'term_view';
        $page = page_manager_get_page_cache($page);
        $page->handler_info['term_view_panel_context_tid_' . $term->tid]['disabled'] = FALSE;
        $page->handler_info['term_view_panel_context_tid_' . $term->tid]['changed'] |= PAGE_MANAGER_CHANGED_STATUS;

        if ($function = ctools_plugin_get_function($page->subtask, 'enable callback')) {
          $result = $function($page, FALSE);
          menu_rebuild();
          page_manager_save_page_cache($page);
        }
      }
      // Create new handler.
      else {
        ding_sections_term_panel_create_term_variant($term);
      }
    }
  }
}

/**
 * Get the exported default handler.
 */
function ding_sections_term_panel_get_handler() {
  $handler = new stdClass();
  $handler->disabled = FALSE; /* Edit this to true to make a default handler disabled initially */
  $handler->api_version = 1;
  $handler->name = 'term_section_panel_context';
  $handler->task = 'term_view';
  $handler->subtask = '';
  $handler->handler = 'panel_context';
  $handler->weight = 4;
  $handler->conf = array(
    'title' => 'Ding section (template)',
    'no_blocks' => 0,
    'pipeline' => 'ipe',
    'body_classes_to_remove' => '',
    'body_classes_to_add' => '',
    'css_id' => '',
    'css' => '',
    'contexts' => array(),
    'relationships' => array(),
    'name' => '',
    'access' => array(
      'plugins' => array(
        0 => array(
          'name' => 'perm',
          'settings' => array(
            'perm' => 'view section panels terms',
          ),
          'context' => 'logged-in-user',
          'not' => FALSE,
        ),
        1 => array(
          'name' => 'entity_bundle:taxonomy_term',
          'settings' => array(
            'type' => array(
              'section' => 'section',
            ),
          ),
          'context' => 'argument_term_1',
          'not' => FALSE,
        ),
      ),
      'logic' => 'and',
    ),
  );
  $display = new panels_display();
  $display->layout = 'ding_layout_1';
  $display->layout_settings = array();
  $display->panel_settings = array(
    'style_settings' => array(
      'default' => NULL,
      'left_sidebar' => NULL,
      'main_content' => NULL,
      'right_sidebar' => NULL,
      'attachment_4_1' => NULL,
      'attachment_4_2' => NULL,
      'attachment_4_3' => NULL,
      'attachment_4_4' => NULL,
      'attachment_3_1' => NULL,
      'attachment_3_2' => NULL,
      'attachment_3_3' => NULL,
      'attachment_2_1' => NULL,
      'attachment_2_2' => NULL,
      'attachment_1_1' => NULL,
      'primary' => NULL,
      'secondary' => NULL,
      'tertiary' => NULL,
    ),
  );
  $display->cache = array();
  $display->title = '';
  $display->uuid = '994da143-c0f6-4401-a343-6ea3981a6834';
  $display->content = array();
  $display->panels = array();
    $pane = new stdClass();
    $pane->pid = 'new-412d46e4-a2cc-41f9-8e20-92c2f46a2d91';
    $pane->panel = 'primary';
    $pane->type = 'term_description';
    $pane->subtype = 'term_description';
    $pane->shown = TRUE;
    $pane->access = array();
    $pane->configuration = array(
      'context' => 'argument_term_1',
      'override_title' => 0,
      'override_title_text' => '',
      'override_title_heading' => 'h2',
    );
    $pane->cache = array();
    $pane->style = array(
      'settings' => NULL,
    );
    $pane->css = array();
    $pane->extras = array();
    $pane->position = 0;
    $pane->locks = array();
    $pane->uuid = '412d46e4-a2cc-41f9-8e20-92c2f46a2d91';
    $display->content['new-412d46e4-a2cc-41f9-8e20-92c2f46a2d91'] = $pane;
    $display->panels['primary'][0] = 'new-412d46e4-a2cc-41f9-8e20-92c2f46a2d91';
    $pane = new stdClass();
    $pane->pid = 'new-21812a33-baf5-462c-856c-baaa99916d1a';
    $pane->panel = 'primary';
    $pane->type = 'ding_campaign_plus';
    $pane->subtype = 'ding_campaign_plus';
    $pane->shown = TRUE;
    $pane->access = array();
    $pane->configuration = array(
      'context' => array(
        0 => 'empty',
        1 => 'empty',
        2 => 'argument_string_1',
        3 => 'argument_term_1',
      ),
      'override_title' => 0,
      'override_title_text' => '',
      'override_title_heading' => 'h2',
      'style' => 'box',
    );
    $pane->cache = array();
    $pane->style = array(
      'settings' => NULL,
    );
    $pane->css = array();
    $pane->extras = array();
    $pane->position = 1;
    $pane->locks = array();
    $pane->uuid = '21812a33-baf5-462c-856c-baaa99916d1a';
    $display->content['new-21812a33-baf5-462c-856c-baaa99916d1a'] = $pane;
    $display->panels['primary'][1] = 'new-21812a33-baf5-462c-856c-baaa99916d1a';
    $pane = new stdClass();
    $pane->pid = 'new-5ec732fb-e7c6-4159-9756-c60f900a1966';
    $pane->panel = 'primary';
    $pane->type = 'block';
    $pane->subtype = 'menu_block-3';
    $pane->shown = TRUE;
    $pane->access = array();
    $pane->configuration = array(
      'override_title' => 0,
      'override_title_text' => '',
      'override_title_heading' => 'h2',
    );
    $pane->cache = array();
    $pane->style = array(
      'settings' => NULL,
    );
    $pane->css = array();
    $pane->extras = array();
    $pane->position = 2;
    $pane->locks = array();
    $pane->uuid = '5ec732fb-e7c6-4159-9756-c60f900a1966';
    $display->content['new-5ec732fb-e7c6-4159-9756-c60f900a1966'] = $pane;
    $display->panels['primary'][2] = 'new-5ec732fb-e7c6-4159-9756-c60f900a1966';
  $display->hide_title = PANELS_TITLE_FIXED;
  $display->title_pane = 'new-5ec732fb-e7c6-4159-9756-c60f900a1966';
  $handler->conf['display'] = $display;

  return $handler;
}

/**
 * Create a panel variant based on the node created.
 */
function ding_sections_term_panel_create_term_variant($term) {
  if (!is_object($term) || !isset($term->tid)) {
    return FALSE;
  }

  // Normally, panels do not support specific panel to node id mapping,
  // so, use php code instead.
  $tid = $term->tid;
  $php_code = '$item = menu_get_object(\'taxonomy_term\', 2); if (!empty($item->tid) && $item->tid == ' . $tid . ') {return TRUE;} return FALSE;';
  $php_filter = array(
    'name' => 'php',
    'settings' => array(
      'description' => t('Term being viewed has tid "@tid"', array('@tid' => $tid)),
      'php' => $php_code,
    ),
    'not' => FALSE,
  );

  $handler_name = 'term_view_panel_context_tid_' . $tid;
  $variant_title = t('Sections term (@term)', array('@term' => $term->name));
  $pipeline = module_exists('panels_ipe') ? 'ipe' : 'standard';

  // Clone handler by exporting it and evaluating the export. Seems hacky, but
  // that's how page_manager itself does it.
  $export = page_manager_export_task_handler(page_manager_load_task_handler('term_view', '', 'term_section_panel_context'));
  ob_start();
  eval($export);
  ob_end_clean();

  $handler->name = $handler_name;
  $handler->conf['title'] = $variant_title;
  $handler->conf['pipeline'] = $pipeline;
  $handler->weight = -50;
  $handler->conf['access']['plugins'][] = $php_filter;

  // Variant is cloned and added to the Page. Ensure the uuids are re-generated.
  panels_panel_context_get_display($handler);
  if (isset($handler->conf['display']) && method_exists($handler->conf['display'], 'clone_display')) {
    $handler->conf['display'] = $handler->conf['display']
      ->clone_display();
  }

  page_manager_save_task_handler($handler);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_sections_term_panel_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#bundle']) || $form['#bundle'] != 'section') {
    return;
  }

  if (!isset($form_state['triggering_element'])) {
    // Add term page into tab.
    $form['ding_sections']['term_panel'] = array(
      '#type' => 'fieldset',
      '#title' => t('Term page'),
      '#group' => 'section_tabs',
    );
    $form['field_term_page']['#disabled'] = TRUE;

    $form['ding_sections']['term_panel']['field_term_page'] = $form['field_term_page'];
    unset($form['field_term_page']);
  }
}

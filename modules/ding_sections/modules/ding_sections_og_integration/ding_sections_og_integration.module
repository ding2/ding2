<?php

/**
 * @file
 * Code for the Ding Section og integration feature.
 */

include_once 'ding_sections_og_integration.features.inc';

/**
 * Implements hook_secure_permissions().
 */
function ding_sections_og_integration_secure_permissions($role) {
  $permissions = array(
    'local administrator' => array(
      'administer group',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_form_alter().
 */
function ding_sections_og_integration_form_alter(&$form, &$form_state, $form_id) {
  $cts = variable_get('ding_section_content_types', array());

  $eb_cts_form = array();
  if (!empty($cts)) {
    foreach ($cts as $ct) {
      if (!empty($ct)) {
        $eb_cts_form[] = $ct . '_node_form';
      }
    }
  }

  if (empty($eb_cts_form)) {
    return FALSE;
  }
  if (in_array($form_id, $eb_cts_form)) {
    $user_og_groups = og_get_entity_groups('user');
    $eb_term_ids = $form['field_ding_section'][LANGUAGE_NONE]['#options'];
    unset($eb_term_ids['_none']);

    // Check if user have rights to use terms.
    $disabled_options = array();
    foreach ($eb_term_ids as $tid => $term_name) {
      $term_in_og = og_get_entity_groups('taxonomy_term', $tid);
      $disabled_options[$tid] = array(
        'disabled' => TRUE,
      );
      if (isset($user_og_groups['node'])) {
        foreach ($user_og_groups['node'] as $id => $gid) {
          if (empty($term_in_og['node'])) {
            continue;
          }
          if ($gid == current($term_in_og['node'])) {
            $disabled_options[$tid]['disabled'] = FALSE;
          }
        }
      }
    }
    $disabled_options = array(
      'ding_sections_og' => $disabled_options,
    );
    $js_file = drupal_get_path('module', 'ding_sections_og_integration') . '/js/ding_sections_og_integration.js';
    drupal_add_js($disabled_options, 'setting');
    drupal_add_js($js_file, 'file');
  }
}

/**
 * Implements hook_page_alter().
 *
 * Remove the IPE bottom panel for roles whose group does not match the
 * entity group.
 */
function ding_sections_og_integration_page_alter(&$page) {
  if (arg(0) != 'taxonomy' || (isset($page['content']['system_main']['#form_id']) && $page['content']['system_main']['#form_id'] == 'taxonomy_form_term')) {
    return FALSE;
  }

  $item = menu_get_object('taxonomy_term', 2, $_GET['q']);
  if (isset($item->vocabulary_machine_name) && $item->vocabulary_machine_name == 'section') {
    global $user;
    $groups = og_get_groups_by_user($user);
    $node_groups = isset($groups['node']) ? $groups['node'] : NULL;
    if (isset($item->og_group_ref_eb[LANGUAGE_NONE][0]['target_id'])) {
      $term_in_og = $item->og_group_ref_eb[LANGUAGE_NONE][0]['target_id'];
      if (!is_array($node_groups) || !in_array($term_in_og, $node_groups) || !user_access('use section panels terms')) {
        $css_file = drupal_get_path('module', 'ding_sections_og_integration') . '/css/ding_sections_og_integration.css';
        drupal_add_css($css_file, 'file');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_sections_og_integration_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#bundle']) || $form['#bundle'] != 'section') {
    return;
  }
  if (!isset($form_state['triggering_element'])) {
    $form['ding_sections']['term_panel'] = array(
      '#type' => 'fieldset',
      '#title' => t('Term page'),
      '#group' => 'section_tabs',
    );

    $form['og_wrapper']['#type'] = 'fieldset';
    $form['og_wrapper']['#title'] = t('Groups audience');
    $form['og_wrapper']['#group'] = 'section_tabs';
    $form['og_wrapper']['#tree'] = TRUE;
    $form['og_wrapper']['field_eb_autocreate_og'] = $form['field_eb_autocreate_og'];
    $form['og_wrapper']['og_group_ref_eb'] = $form['og_group_ref_eb'];
    unset($form['og_group_ref_eb']);
    unset($form['field_eb_autocreate_og']);

    if (isset($form_state['term']->tid)) {
      $group = og_get_entity_groups('taxonomy_term', $form_state['term']);
      if (!empty($group)) {
        $form['og_wrapper']['field_eb_autocreate_og'][LANGUAGE_NONE]['#default_value'] = 0;
      }
    }

    $form['og_wrapper']['og_group_ref_eb']['#states'] = array(
      'invisible' => array(
        ':input[name="og_wrapper[field_eb_autocreate_og][und]"]' => array('checked' => TRUE),
      ),
    );
  }
  $form['#submit'] = array(
    'ding_sections_og_integration_term_presave',
    'taxonomy_form_term_submit',
    'ding_sections_og_integration_auto_create_og_submit',
  );
}

/**
 * Submit before main submit.
 *
 * Is needed for correction of form_state['values'] structure.
 *
 * @todo Find better solution.
 */
function ding_sections_og_integration_term_presave(&$form, &$form_state) {
  $form_state['values']['field_eb_autocreate_og'] = $form_state['values']['og_wrapper']['field_eb_autocreate_og'];
  $form_state['values']['og_group_ref_eb'] = $form_state['values']['og_wrapper']['og_group_ref_eb'];
  $form_state['values']['og_wrapper']['og_group_ref_eb'] = $form_state['values']['og_group_ref_eb'];
  unset($form_state['values']['og_wrapper']);
}

/**
 * Submit function for creating OG on term creation.
 *
 * @see ding_sections_og_integration_form_taxonomy_form_term_alter()
 */
function ding_sections_og_integration_auto_create_og_submit(&$form, &$form_state) {
  $values = $form_state['values'];

  if (empty($values['field_eb_autocreate_og'][LANGUAGE_NONE][0]['value'])) {
    return;
  }
  global $user;
  $term_name = $form_state['values']['name'];
  $og_node_type = 'section';

  $node = new stdClass();
  $node->type = $og_node_type;
  node_object_prepare($node);
  $node->title    = $term_name;
  $node->language = LANGUAGE_NONE;

  $node = node_submit($node);
  node_save($node);

  // Add the user to the group.
  og_group('node', $node->nid, array(
    "entity type"       => "user",
    "entity"        => $user,
    "membership type"   => OG_MEMBERSHIP_TYPE_DEFAULT,
  ));

  // Changes the users role in the group
  // (1 = non-member, 2 = member, 3 = administrator member).
  og_role_grant('node', $node->nid, $user->uid, 2);

  og_group('node', $node->nid, array(
    "entity_type" => "taxonomy_term",
    "field_name" => 'og_group_ref_eb',
    "entity" => $form_state['term'],
    "membership type" => OG_MEMBERSHIP_TYPE_DEFAULT,
  ));
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function ding_sections_og_integration_taxonomy_term_delete($term) {
  if ($term->vocabulary_machine_name == 'section') {
    $field = field_get_items('taxonomy_term', $term, 'og_group_ref_eb');
    $eb_autocreate = $term->field_eb_autocreate_og[LANGUAGE_NONE][0]['value'];
    // Delete EB OG node only if it was created by current term.
    if (!empty($eb_autocreate)) {
      $tid = $field[0]['target_id'];
      // Delete "Section" node assigned to this term.
      node_delete($tid);
    }
  }
}

<?php

/**
 * @file
 * Enable DIBS as a payment provider for Ding!
 */

// URL used for capturing payments.
define('DING_DIBS_CAPTURE_URL', 'https://payment.architrade.com/cgi-bin/capture.cgi');

/**
 * Implements hook_dibsapi().
 */
function ding_dibs_dibsapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  global $user;
  switch ($op) {
    case 'info':
      $info = array(1 => array('info' => t('Ding DIBS debts payment')));
      if (is_null($delta)) {
        return $info;
      }
      return (isset($info[$delta])) ? $info[$delta] : NULL;

    case 'transaction_cancel':
      watchdog('ding_dibs', 'DIBS  order %order cancelled by user.', array(
        '%order' => $transaction['payment_order_id'],
      ), WATCHDOG_NOTICE);
      break;

    case 'transaction_accept':
      if ($transaction['payment_status'] == 1) {
        // Check if the payment is registered in the backend.
        $status = db_select('dibs_transactions', 'transaction')
          ->fields('transaction', array('provider_payment_status'))
          ->condition('payment_transaction_id', $transaction['payment_transaction_id'])
          ->execute()
          ->fetchField();

        if ($status == TRUE) {
          // Update user status cache.
          ding_provider_invoke('user', 'clear_cache', $user);
          drupal_set_message(t('Your payment of @amount was received. Transaction ID: @transaction, order no.: @order.',
              array(
                '@amount' => $transaction['payment_price'],
                '@order' => $transaction['payment_order_id'],
                '@transaction' => $transaction['payment_transaction_id'],
              )));
          watchdog('ding_dibs', 'Confirmation for DIBS transaction %transaction, order %order was displayed.', array(
            '%transaction' => $transaction['payment_transaction_id'],
            '%order' => $transaction['payment_order_id'],
          ), WATCHDOG_DEBUG);
        }
        else {
          drupal_set_message(t('Failed to recieve payment at local system. Your payment of @amount was cancelled.', array('@amount' => $transaction['payment_price'])), 'error');
        }
        drupal_goto('user/' . $user->uid . '/status-debts');
      }
      else {
        drupal_set_message(t('Payment not verified by DIBS. This indicates a problem with the network. Please try again and contact the system administrator if it persists'), 'error');
        watchdog('ding_dibs', 'Unverified DIBS transaction %transaction, order %order at accept URL: !data', array(
          '%transaction' => $transaction['payment_transaction_id'],
          '%order' => $transaction['payment_order_id'],
          '!data' => '<pre>' . check_plain(print_r($transaction, TRUE)) . '</pre>',
        ), WATCHDOG_CRITICAL);
        drupal_goto('user/' . $user->uid . '/status-debts');
      }
      break;

    case 'transaction_callback':
      watchdog('ding_dibs', 'DIBS has verified transaction %transaction, order %order.', array(
        '%transaction' => $transaction['payment_transaction_id'],
        '%order' => $transaction['payment_order_id'],
      ), WATCHDOG_NOTICE);

      if (isset($transaction['params']['callback'])) {
        $callback = $transaction['params']['callback'];
        if (function_exists($callback)) {
          // Ensure that this session isn't saved.
          drupal_save_session(FALSE);

          // Load the user that was paying.
          $my_user = user_load($transaction['customer_uid']);

          // If we have a saved session, let's resume it.
          if (isset($transaction['params']['session'])) {
            $result = db_query("SELECT sid, session FROM {sessions} WHERE sid = :sid", array(
              ':sid' => $transaction['params']['session'],
            ));
            $row = $result->fetchObject();
            // Session_decode doesn't work without any session, start one.
            session_start();
            // Set the user (session_start might have set it to anonymous).
            $user = $my_user;
            // Load the session variables into $_SESSION.
            session_decode($row->session);
          }

          // Call the callback, which may now *read* the session.
          $provider_payment_result = call_user_func($callback, $transaction);

          if ($provider_payment_result) {
            // Update dibs transaction with provider_payment_status = TRUE.
            db_update('dibs_transactions')
              ->fields(array(
                'provider_payment_status' => 1,
              ))
              ->condition('payment_transaction_id', $transaction['payment_transaction_id'])
              ->execute();
            ding_dibs_capture($delta, $transaction);
          }
          else {
            watchdog('ding_dibs', 'DIBS transaction %transaction, order %order failed to update provider.', array(
              '%transaction' => $transaction['payment_transaction_id'],
              '%order' => $transaction['payment_order_id'],
            ), WATCHDOG_CRITICAL);
          }
        }
        else {
          watchdog('ding_dibs', "Callback function @function doesn't exist.", array('@function' => $callback), WATCHDOG_CRITICAL);
        }
      }
      else {
        // Unlikely to happen, unless someone has been tampering with things
        // they shouldn't.
        watchdog('ding_dibs', "No callback function defined.", NULL, WATCHDOG_CRITICAL);
      }
      break;
  }
}

/**
 * Implements hook_ding_provider().
 */
function ding_dibs_ding_provider() {
  return array(
    'title' => 'DIBS payment provider',
    'provides' => array(
      'payment' => array(
        'prefix' => 'payment',
        'file' => 'includes/dibs.payment.inc',
      ),
    ),
  );
}

/**
 * Send user to DIBS for payment.
 *
 * When the payment is complete, the callback will be called with the
 * transaction. The global $user and session will be set up to the
 * same values as when this function was called, but be aware that the
 * session variables will *not* be saved.
 *
 * @param string $amount
 *   The amount to charge the user.
 * @param array $params
 *   Parameters for dibs.module.
 * @param string $callback
 *   The function to call on successful payment.
 * @param bool $redirect
 *   If FALSE no redirect is performed, defaults to TRUE.
 *
 * @return mixed
 *   If $redirect is set to FALSE, will the api_hash value be returned.
 */
function ding_dibs_payment_prepare($amount, array $params, $callback, $redirect = TRUE) {
  global $user;
  $params['payment_price'] = $amount;
  $params['api_module'] = 'ding_dibs';
  $params['api_delta'] = 1;
  $params['customer_uid'] = $user->uid;

  if (!isset($params['params']) || !is_array($params['params'])) {
    $params['params'] = array();
  }
  // Params is stored by dibs.module, so are tamper safe.
  $params['params']['callback'] = $callback;
  // Save session id for later loading.
  if (!empty($_COOKIE[session_name()])) {
    $params['params']['session'] = session_id();
  }

  $params += array(
    'order_info_short' => t('Payment of library dues'),
    'order_price_info' => array('Total' => $amount),
    // Dibs module fills in missing data.
  );

  return dibs_payment_prepare($params, $redirect);
}

/**
 * Capture the payment.
 *
 * @param string $delta
 *   DIBS payment settings delta (ie. identifier).
 * @param array $transaction
 *   Transaction to capture.
 */
function ding_dibs_capture($delta = NULL, array &$transaction = NULL) {
  $module = 'ding_dibs';
  $delta = 1;
  $settings = (array) variable_get('dibs_settings_' . $module . '_' . $delta, array());

  $param['merchant'] = isset($settings['general']['merchant']) ? $settings['general']['merchant'] : NULL;
  $param['account'] = isset($settings['general']['account']) ? $settings['general']['account'] : NULL;

  // DIBS' parameter amount contains the price measured in the smallest unit,
  // eg. ore in DK.
  $param['amount'] = $transaction['payment_price'] * 100;
  $param['orderid'] = $transaction['payment_order_id'];
  $param['transact'] = $transaction['payment_transaction_id'];
  $param['textreply'] = TRUE;

  $md5 = isset($settings['general']['md5']) ? $settings['general']['md5'] : FALSE;
  if ($md5) {
    $md5_key1 = isset($settings['general']['md5_key1']) ? $settings['general']['md5_key1'] : NULL;
    $md5_key2 = isset($settings['general']['md5_key2']) ? $settings['general']['md5_key2'] : NULL;
    $param['md5key'] = md5(
      $md5_key2 .
      md5($md5_key1 .
        "merchant=" . $param['merchant'] .
        "&orderid=" . $param['orderid'] .
        "&transact=" . $param['transact'] .
        "&amount=" . $param['amount']
      )
    );
  }

  $params = array();
  foreach ($param as $key => $val) {
    $params[] = $key . '=' . $val;
  }

  $dibs_reply = drupal_http_request(DING_DIBS_CAPTURE_URL . '?' . implode('&', $params));

  $capture_data = explode('&', $dibs_reply->data);
  foreach ($capture_data as $key => $val) {
    $var = explode('=', $val);
    $capture_status[$var[0]] = $var[1];
  }

  if (isset($capture_status['status']) && $capture_status['status'] == 'ACCEPTED') {
    // Update dibs transaction with dibs_capture_status = TRUE.
    db_update('dibs_transactions')
      ->fields(array(
        'dibs_capture_status' => 1,
      ))
      ->condition('payment_transaction_id', $transaction['payment_transaction_id'])
      ->execute();

    watchdog('ding_dibs', 'DIBS has captured transaction %transaction, order %order.', array(
      '%transaction' => $transaction['payment_transaction_id'],
      '%order' => $transaction['payment_order_id'],
    ), WATCHDOG_NOTICE);

    return TRUE;
  }
  else {
    $variables = array(
      '%url' => DING_DIBS_CAPTURE_URL . '?' . implode('&', $params),
      '%reply' => '<pre>' . print_r($capture_status['capture_reply'], 1) . '</pre>',
    );
    watchdog('ding_dibs', 'DIBS capture failed:<br/>URL: %url<br/>DIBS reply: %reply.', $variables, WATCHDOG_CRITICAL);
  }

  return FALSE;

}

/**
 * Implements hook_block_info().
 */
function ding_dibs_block_info() {
  // Payment info, jfr. http://tech.dibs.dk/10_step_guide/
  $blocks = array();

  $blocks['dibs-terms-of-sale'] = array(
    'info' => t('DIBS: Terms of sale'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['dibs-cards-supported'] = array(
    'info' => t('DIBS: Cards supported'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ding_dibs_block_view($delta = '') {
  $block = array();
  $supported_cards = array();
  drupal_add_css(drupal_get_path('module', 'ding_dibs') . '/css/ding_dibs.css');
  $cards = ding_dibs_cards();
  if (is_array(variable_get('cards_supported'))) {
    foreach (variable_get('cards_supported') as $card) {
      if ($card) {
        if (array_key_exists($card, $cards)) {
          $params = array(
            'path' => base_path() . drupal_get_path('module', 'ding_dibs') . '/img/card_logos/' . $cards[$card],
            'height' => '33px',
            'alt' => $card,
            'title' => $card,
            'attributes' => array('class' => 'card-logo'),
          );
          $supported_cards[] = theme('image', $params) . '<span class="card-name">' . $card . '</span></p>';
        }
      }
    }
  }
  switch ($delta) {
    case 'dibs-terms-of-sale':
      global $language;
      $block['subject'] = t('Terms and conditions of sale');
      $block['content'] = theme('dibs_terms_of_sale', array('terms_of_sale' => variable_get('terms_of_sale_' . $language->language)));
      break;

    case 'dibs-cards-supported':
      $block['subject'] = t('Cards supported');
      $block['content'] = theme('dibs_cards_supported', array(
        'cards_supported' => $supported_cards,
      ));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function ding_dibs_theme($existing, $type, $theme, $path) {
  return array(
    'dibs_terms_of_sale' => array(
      'variables' => array('terms_of_sale' => NULL),
      'template' => 'dibs_terms_of_sale',
      'path' => $path . '/templates',
    ),
    'dibs_cards_supported' => array(
      'variables' => array('cards_supported' => NULL),
      'template' => 'dibs_cards_supported',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ding_dibs_menu() {
  // Settings pages.
  $items['admin/config/payment/ding_dibs'] = array(
    'title' => 'Ding DIBS settings',
    'description' => 'Configure DIBS payment gateway for Ding.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_dibs_admin_settings'),
    'access arguments' => array('administer dibs settings'),
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_dibs.admin.inc',
  );

  $items['admin/config/payment/ding_dibs/settings'] = array(
    'title' => 'Ding DIBS settings',
    'description' => 'Configure DIBS payment gateway for Ding.',
    'weight' => 2,
    'tab_parent' => 'admin/config/payment/ding_dibs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ding_dibs.admin.inc',
  );

  // Transactions status reports.
  $items['admin/config/payment/ding_dibs/reports'] = array(
    'title' => 'Ding DIBS reports',
    'description' => 'Ding DIBS payment reports.',
    'page callback' => 'ding_dibs_admin_reports',
    'access arguments' => array('administer dibs settings'),
    'weight' => 4,
    'tab_parent' => 'admin/config/payment/ding_dibs',
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_dibs.reports.inc',
  );

  $items['admin/config/payment/ding_dibs/emails'] = array(
    'title' => 'Ding DIBS setting emails',
    'description' => 'Ding DIBS setting emails.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_dibs_setting_emails'),
    'access arguments' => array('administer dibs settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'ding_dibs.email_reports.inc',
  );

  $items['admin/reports/ding_dibs'] = array(
    'title' => 'Ding DIBS cron report',
    'description' => 'Ding DIBS cron report.',
    'page callback' => 'ding_dibs_cron_report',
    'access arguments' => array('administer dibs settings'),
    'weight' => 6,
    'tab_parent' => 'admin/config/payment/ding_dibs',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ding_dibs.email_reports.inc',
  );

  return $items;
}

/**
 * Return list of cards and logos.
 */
function ding_dibs_cards() {
  $cards = array();
  $cards['Dankort'] = 'card_Dankort_53x33.png';
  $cards['eDankort'] = 'card_E_Dankort_53x33.png';
  $cards['VISA'] = 'card_Visa_53x33.png';
  $cards['VISA Electron'] = 'card_Visa_Electron_53x33.png';
  $cards['Mastercard'] = 'card_Mastercard_53x33.png';
  $cards['JCB'] = 'card_JCB_53x33.png';
  $cards['Diners Club'] = 'card_Diners_Club_53x33.png';
  $cards['American Express'] = 'card_AMEX_53x33.png';
  $cards['Maestro'] = 'card_Maestro_53x33.png';
  $cards['Forbrugforeningen'] = 'card_Forbrugerforening_53x33.png';
  $cards['Danske Netbetaling'] = 'card_Danske_53x33.png';
  $cards['Nordea Sol-E'] = 'card_Nordea_53x33.png';
  $cards['SEB'] = 'card_SEB_53x33.png';
  $cards['SHB direktbetaling'] = 'card_Handelsbanken_53x33.png';
  $cards['Swedbank direktbetaling'] = 'card_Swedbank_53x33.png';
  $cards['PayPal'] = 'card_Paypal_53x33.png';
  $cards['Bank Einzug'] = 'card_eOLV_53x33.png';
  $cards['iDEAL'] = 'card_iDEAL_53x33.png';
  $cards['Aktia'] = 'card_Aktia_53x33.png';
  $cards['OKO'] = 'card_OKO_53x33.png';
  $cards['Sampo'] = 'card_Sampo_53x33.png';
  $cards['BankAxess'] = 'card_Bank_axess_53x33.png';
  $cards['Getitcard'] = 'card_Getitcard_53x33.png';
  $cards['MobilePay'] = 'MobilePay_55x33.jpg';

  return $cards;
}

/**
 * Implements hook_cron().
 *
 * This is done by sending written reports and email adresses result cron
 * launches in the database.
 */
function ding_dibs_cron() {
  $start_cron = FALSE;
  $cron_start_hour = variable_get('ding_dibs_start_cron_hour', NULL);
  $cron_start_minute = variable_get('ding_dibs_start_cron_minute', 0);
  if (!empty($cron_start_hour)) {
    $request_time = new DateTime('NOW');
    $today_cron_start_time = new DateTime('NOW');
    $today_cron_start_time->setTime($cron_start_hour, $cron_start_minute);
    $cron_time = variable_get('ding_dibs_last_cron', REQUEST_TIME - 86400);
    $last_cron_time = new DateTime(format_date($cron_time, 'custom', 'Y-m-d H:i'));
    if ($today_cron_start_time > $last_cron_time
      && $request_time >= $today_cron_start_time) {
      $start_cron = TRUE;
    }
  }
  if ($start_cron) {
    // Moving ding_dibs_emails into variable.
    $ding_dibs_email = variable_get('ding_dibs_emails', '');
    if (!empty($ding_dibs_email)) {
      $emails_array = preg_split("/\,|\r\n|\n/", $ding_dibs_email);
      if (count($emails_array) >= 1) {
        $id = _ding_dibs_insert_table(variable_get('ding_dibs_last_cron', REQUEST_TIME));
        for ($count = 0; $count < count($emails_array); $count++) {
          if (!empty($emails_array[$count])) {
            $params = array('subject' => t('Recent unusual DIBS reports'));
            drupal_mail('ding_dibs', 'ding_dibs_report', $emails_array[$count], language_default(), $params);
          }
        }
        if (!empty($id)) {
          _ding_dibs_update_table($id);
        }
      }
    }

    // Wipe out old dibs transactions.
    $wipe_dibs_transactions_threshold = variable_get('ding_dibs_wipe_transaction_threshold', 0);
    if ($wipe_dibs_transactions_threshold) {
      $threshold = REQUEST_TIME - $wipe_dibs_transactions_threshold;
      $query = db_select('dibs_transactions', dt)
        ->fields('dt', array('tid'))
        ->where('UNIX_TIMESTAMP(dt.payment_time) < :threshold', array(':threshold' => $threshold))
        ->execute();

      $wipe_target = $query->fetchCol();

      db_delete('dibs_transactions')
        ->condition('tid', $wipe_target, 'IN')
        ->execute();

      db_delete('dibs_transactions_log')
        ->condition('tid', $wipe_target, 'IN')
        ->execute();
    }

    variable_set('ding_dibs_last_cron', REQUEST_TIME);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function ding_dibs_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'ding_dibs');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // Alter the theme path and template elements.
    $theme_registry[$key]['theme path'] = $module_path;
    $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
    $theme_registry[$key]['type'] = 'module';
  }
}

/**
 * Implements hook_mail().
 *
 * Generate custom reports mailing message.
 */
function ding_dibs_mail($key, &$message, $params) {
  switch ($key) {
    case 'ding_dibs_report':
      module_load_include('inc', 'ding_dibs', 'ding_dibs.email_reports');
      $text_message = ding_dibs_email_reports();
      $message['subject'] = $params['subject'];
      $message['body'][] = $text_message;
      break;
  }
}

/**
 * Insert information in a table ding_dibs_report_cron.
 *
 * @param string $start
 *   The start time is in Unicode.
 *
 * @return int
 *   Id outcome writing new values to the table ding_dibs_report_cron.
 */
function _ding_dibs_insert_table($start) {
  $query = db_insert('ding_dibs_report_cron');
  $query->fields(array('time_start' => $start));
  $id = $query->execute();
  return $id;
}

/**
 * Updating information in a DB table "ding_dibs_report_cron".
 *
 * @param int $id
 *   Id database table "ding_dibs_report_cron".
 */
function _ding_dibs_update_table($id) {
  $query = db_update('ding_dibs_report_cron');
  $query->fields(
    array(
      'status' => 1,
    )
  );
  $query->condition('id', $id);
  $query->execute();
}

/**
 * Select info from the table ding_dibs_report_cron.
 *
 * @param mixed $id
 *   ID database table ding_dibs_report_cron.
 * @param mixed $status
 *   Status database table ding_dibs_report_cron.
 * @param mixed $id_report
 *   ID report which will be started sample database.
 *
 * @return array
 *   The result of the database query.
 */
function _ding_dibs_select_report_cron_table($id = FALSE, $status = FALSE, $id_report = FALSE) {
  $query = db_select('ding_dibs_report_cron', 'r');
  $query->fields('r', array('status', 'time_start'));
  if ($id && empty($id_report)) {
    $query->condition('r.id', $id, '<');
  }
  elseif ($id && !empty($id_report)) {
    $query->condition('r.id', --$id, '=');
  }
  if ($status) {
    $query->condition('r.status', $status);
  }
  $result = $query->execute()->fetchAll();
  return !empty($result) ? $result : '';
}

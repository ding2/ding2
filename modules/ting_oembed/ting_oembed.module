<?php

/**
 * @file
 * Add oEmbed support to Ting objects.
 */

/**
 * Implements hook_field_info().
 */
function ting_oembed_field_info() {
  return array(
    'ting_oembed' => array(
      'label' => t('Virtual: oEmbed support'),
      'description' => t('Use oEmbed module to substitute known urls from Ting Object'),
      'default_widget' => 'hidden',
      'default_formatter' => 'ting_oembed_default',
      'virtual_field' => array(
        'entity_types' => array('ting_object'),
      ),
    ),
  );
}

/**
 * Implements hook_field_load().
 */
function ting_oembed_field_load($entity_type, $entities, $field, $instance, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    $items[$id][0] = array(
      'oembed' => 'empty',
    );
  }
}

/**
 * Implements hook_field_widget_info().
 */
function ting_oembed_field_widget_info_alter(&$info) {
  if (isset($info['hidden'])) {
    $info['hidden']['field types'][] = 'ting_oembed';
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_oembed_field_formatter_info() {
  return array(
    'ting_oembed_default' => array(
      'label' => t('Material content'),
      'field types' => array('ting_oembed'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_oembed_field_formatter_view($entity_type, TingEntity $entity, $field, $instance, $langcode, &$items, $display) {
  $element = array();
  $matches = array();
  switch ($display['type']) {
    case 'ting_oembed_default':
      // Get url and if an oembed provider exists, render data.
      $online_url = $entity->getOnline_url();
      if ($provider = oembed_get_provider($online_url, $matches)) {
        $element[0] = oembed_render_element('oembed', $online_url);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function ting_oembed_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Alters an oEmbed response.
 *
 * We ensure the cookie consent is set before showing videos because video providers set their own cookies.
 *
 * @param mixed $response
 *   oEmbed response data.
 */
function ting_oembed_oembed_response_alter(&$response) {
  // If the oembed response is from Ekurser we need to make sure that cookieinformation consent is given before we
  // show the video.
  if (isset($response['provider']) && isset($response['html']) && $response['provider'] == 'default:eKurser') {
    $dom = new DomDocument();

    // If no charset is given Domdocument treats the input as ISO-8859-1. So we make sure it is treated as UTF-8.
    // Based on this article: https://stackoverflow.com/questions/8218230/php-domdocument-loadhtml-not-encoding-utf-8-correctly
    $dom->loadHTML(mb_convert_encoding($response['html'], 'HTML-ENTITIES', 'UTF-8'), LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
    $iframes = $dom->getElementsByTagName('iframe');

    // This is only relevant in case of a iframe.
    foreach ($iframes as $iframe) {
      $src = $iframe->getAttribute('src');
      $iframe->setAttribute('src', '');
      $iframe->setAttribute('data-consent-src', $src);
      $iframe->setAttribute('data-category-consent', "cookie_cat_marketing");

      $consent = $dom->createElement('div');
      $consent->setAttribute('class', 'consent-placeholder');
      $consent->setAttribute('data-category', "cookie_cat_marketing");

      $consent->appendChild($dom->createElement('p', t("This video is not accessible as you haven't accepted marketing-cookies")));
      $a = $dom->createElement('a', t('Click here to change your consent'));
      $a->setAttribute('class', 'js-cookie-popup-trigger');
      $a->setAttribute('href', '#');
      $consent->appendChild($a);

      $iframe->parentNode->insertBefore($consent);
    }
    $response['html'] = $dom->saveHTML();
  }
}

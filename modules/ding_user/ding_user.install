<?php
/**
 * @file
 * Install new cache table to store user credentials.
 */

/**
 * Implements hook_install().
 *
 * Ensure that entity cache table is create for profile2 (ding users).
 */
function ding_user_install() {
  ding_user_create_entity_cache_table();
  ding_user_create_private_key();
}

/**
 * Creates the entity cache table for profile2 entities.
 *
 * There is an issue in entity cache where the cache table is not always
 * created for entity types that are not nodes. This fixes that issue for
 * profile2 profiles (library users).
 */
function ding_user_create_entity_cache_table() {
  // Create cache table if it doesn't exist.
  if (!db_table_exists('cache_entity_profile2')) {
    $schema = drupal_get_schema_unprocessed('system', 'cache');
    $schema['description'] = 'Cache table used to store profile2 entity records.';
    db_create_table('cache_entity_profile2', $schema);
  }
}

/**
 * Creates the ding_user_private_key variable.
 */
function ding_user_create_private_key() {
  variable_set('ding_user_private_key', drupal_get_private_key());
}

/**
 * Create table for credential caching.
 */
function ding_user_update_7000(&$sandbox) {
  drupal_install_schema('ding_user');
}

/**
 * Use DingUserCredentialsCache instead of default DrupalDatabaseCache.
 */
function ding_user_update_7001(&$sandbox) {
  variable_set('cache_class_cache_ding_user_credentials', 'DingUserCredentialsCache');
}

/**
 * Set weight of ding_user to -1 to ensure it is called first.
 */
function ding_user_update_7002(&$sandbox) {
  $ret = db_update('system')
    ->fields(array('weight' => -1))
    ->condition('name', 'ding_user', '=')
    ->execute();
  return $ret;
}

/**
 * Remove un-used cache class variable.
 */
function ding_user_update_7003(&$sandbox) {
  variable_del('cache_class_cache_ding_user_credentials');
}

/**
 * Remove un-safe credential cache table.
 */
function ding_user_update_7004(&$sandbox) {
  db_drop_table('cache_ding_user_credentials');
}

/**
 * Create possibly missing Entity Cache table for profile2 entities.
 */
function ding_user_update_7005(&$sandbox) {
  ding_user_create_entity_cache_table();
}

/**
 * Add the provider role to all provider users.
 */
function ding_user_update_7006(&$sandbox) {
  // Load user uid's.
  $uids = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('init', '%@ding_user', 'LIKE')
    ->execute();

  // Find provider role id.
  $roles = user_roles(TRUE);
  $rid = array_search('provider', $roles);

  // Loop over the accounts and set new roles.
  foreach ($uids as $uid) {
    $uid = $uid->uid;
    $account = user_load($uid);
    if (ding_user_is_provider_user($account)) {
      $edit['roles'] = array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        $rid => 'provider',
      );
      user_save($account, $edit);
    }
  }
}

/**
 * Remove logged login attempt failures.
 */
function ding_user_update_7007(&$sandbox) {
  if (module_exists('dblog')) {
    db_delete('watchdog')
      ->condition('type', 'user')
      ->condition('message', 'Login attempt failed for%', 'LIKE')
      ->execute();
  }
}

/**
 * Remove all aliases for provider users.
 */
function ding_user_update_7008(&$sandbox) {
  db_query("DELETE a.* FROM url_alias a INNER JOIN ( SELECT concat('user/', u.uid) s FROM users u INNER JOIN authmap a ON u.uid=a.uid ) b ON a.source=b.s;")
    ->execute();
}

/**
 * Remove all redirects for provider users.
 */
function ding_user_update_7009(&$sandbox) {
  db_query("DELETE a.* FROM redirect a INNER JOIN ( SELECT concat('user/', u.uid) s FROM users u INNER JOIN authmap a ON u.uid=a.uid ) b ON a.redirect=b.s;")
    ->execute();
}

/**
 * Create the ding_user_private_key variable.
 */
function ding_user_update_7010(&$sandbox) {
  ding_user_create_private_key();
}

/**
 * Ensure init and authname are equal for provider users.
 */
function ding_user_update_7011() {
  db_query("UPDATE users a INNER JOIN authmap b ON a.uid=b.uid SET a.init=b.authname WHERE a.init<>b.authname;")
    ->execute();
}

/**
 * Change pincode length to a max/min setting.
 */
function ding_user_update_7101() {
  $length = variable_get('ding_user_pincode_length', 4);
  variable_set('ding_user_pincode_min_length', $length);
  variable_set('ding_user_pincode_max_length', $length);
  variable_del('ding_user_pincode_length');
}

/**
 * Cleanup sensitive data (address) from user object.
 */
function ding_user_update_7102(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_uid'] = 0;
    $sandbox['limit'] = 100;
    $sandbox['max'] = db_query('SELECT COUNT(uid) FROM {users} WHERE data LIKE :placeholder', [
        ':placeholder' => '%' . db_like('address') . '%',
      ])->fetchField() - 1;
  }

  $users = db_select('users', 'u')
    ->fields('u', ['uid'])
    ->condition('data', "%" . db_like('address') . "%", 'LIKE')
    ->range(0, $sandbox['limit'])
    ->execute()
    ->fetchCol();

  if ($users) {
    foreach (user_load_multiple($users) as $uid => $account) {
      unset($account->data['address']);
      try {
        user_save($account);
        $sandbox['progress']++;
        $sandbox['last_uid'] = $account->uid;
      }
      catch (Exception $e) {
        throw $e;
      }
    }
  }

  $sandbox['#finished'] = $sandbox['progress'] >= $sandbox['max'] ? TRUE : $sandbox['progress'] / $sandbox['max'];
}

/**
 * Pseudonymize patron accounts mails.
 */
function ding_user_update_7103(&$sandbox) {
  if (!array_key_exists('progress', $sandbox)) {
    $staff_uids = db_query("SELECT p.uid FROM {profile} p WHERE p.type = 'ding_staff_profile'")
      ->fetchCol();

    $sandbox['skip_uids'] = implode(',', $staff_uids);
    $sandbox['progress'] = 0;
    $sandbox['total'] = db_query("SELECT COUNT(u.uid) FROM {users} u WHERE u.uid <> 0 and u.uid <> 1 and u.uid NOT IN (:staff_uids) AND mail <> '' AND mail IS NOT NULL", [
      ':staff_uids' => $sandbox['skip_uids']
    ])->fetchField();
  }

  $queued_uids = db_query("SELECT u.uid FROM {users} u WHERE u.uid <> 0 and u.uid <> 1 AND u.uid NOT IN (:staff_uids) LIMIT {$sandbox['progress']}, 50", [
    ':staff_uids' => $sandbox['skip_uids']
  ])->fetchCol();

  $users = user_load_multiple($queued_uids);
  foreach ($users as $user) {
    if (empty($user->mail)) {
      continue;
    }

    $mail = _ding_user_pseudonymize_email($user->mail);
    user_save($user, ['mail' => $mail]);
    $sandbox['progress']++;
  }

  watchdog('ding_user', 'Pseudonymized %num users emails.', [
    '%num' => $sandbox['progress'],
  ], WATCHDOG_INFO);
  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];
}
